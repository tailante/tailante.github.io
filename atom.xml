<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>接化发の小破站</title>
  
  <subtitle>笑着打代码</subtitle>
  <link href="https://tailante.github.io/atom.xml" rel="self"/>
  
  <link href="https://tailante.github.io/"/>
  <updated>2022-10-02T13:40:25.560Z</updated>
  <id>https://tailante.github.io/</id>
  
  <author>
    <name>接化发</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端项目总结（四）</title>
    <link href="https://tailante.github.io/posts/7049.html"/>
    <id>https://tailante.github.io/posts/7049.html</id>
    <published>2022-10-02T10:33:59.000Z</published>
    <updated>2022-10-02T13:40:25.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（四）"><a href="#移动端项目总结（四）" class="headerlink" title="移动端项目总结（四）"></a>移动端项目总结（四）</h1><h2 id="反馈操作"><a href="#反馈操作" class="headerlink" title="反馈操作"></a>反馈操作</h2><div class="tip home"><p>第一、点击 x 按钮-出现一级反馈面板</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/02/PNPfn.png"/></div></div><p><strong>1.找到类似组件 - vant 中的 ActionSheet 动作面板,在 ArticleItem.vue 中使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- 一条文章单元格并列 --&gt;</span><br><span class="line">    &lt;!-- 反馈面板 --&gt;</span><br><span class="line">    &lt;van-action-sheet v-model=&quot;show&quot; :actions=&quot;actions&quot; @select=&quot;onSelect&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                show: false,</span><br><span class="line">                actions: [</span><br><span class="line">                    &#123; name: &#x27;不感兴趣&#x27; &#125;,</span><br><span class="line">                    &#123; name: &#x27;反馈垃圾内容&#x27; &#125;,</span><br><span class="line">                    &#123; name: &#x27;拉黑作者&#x27; &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            // 反馈面板点击事件</span><br><span class="line">            onSelect () &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.发现出来的不全, 分析 DOM 层级结构, 调整挂载位置, 给 van-action-sheet 设置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-action-sheet v-model=&quot;show&quot; :actions=&quot;actions&quot; @select=&quot;onSelect&quot; get-container=&quot;body&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>3.补充底部取消按钮 文字</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-action-sheet v-model=&quot;show&quot; :actions=&quot;actions&quot; @select=&quot;onSelect&quot; get-container=&quot;body&quot; cancel-text=&quot;取消&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>4.点击 x 反馈按钮, 显示反馈面板</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-icon name=&quot;cross&quot; @click=&quot;onCloseClick&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 点击了叉号按钮</span><br><span class="line">        onCloseClick () &#123;</span><br><span class="line">            // 展示动作面板</span><br><span class="line">            this.show = true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、点击一级面板反馈垃圾内容-出现二级反馈面板</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/02/PNy1S.png"/></div></div><p><strong>1.只要切换 actions 数组的值即可</strong><br><strong>2.不想散落在逻辑页面里, 所以在 api/report.js 定义 2 个变量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">export const firstActions = [</span><br><span class="line">  &#123; name: &#x27;不感兴趣&#x27; &#125;,</span><br><span class="line">  &#123; name: &#x27;反馈垃圾内容&#x27; &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">export const secondActions = [</span><br><span class="line">  &#123;</span><br><span class="line">    value: 0,</span><br><span class="line">    name: &#x27;其它问题&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 1,</span><br><span class="line">    name: &#x27;标题夸张&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 2,</span><br><span class="line">    name: &#x27;低俗色情&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 3,</span><br><span class="line">    name: &#x27;错别字多&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 4,</span><br><span class="line">    name: &#x27;旧闻重复&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 6,</span><br><span class="line">    name: &#x27;内容不实&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 8,</span><br><span class="line">    name: &#x27;侵权&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 5,</span><br><span class="line">    name: &#x27;广告软文&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 7,</span><br><span class="line">    name: &#x27;涉嫌违法犯罪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>3.在 ArticleItem.vue 中引入使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; firstActions, secondActions &#125; from &#x27;@/api/reports&#x27;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        // ...省略其他</span><br><span class="line">        actions: firstActions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.点击反馈面板切换数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onSelect (action) &#123;</span><br><span class="line">    // action绑定的数据对象, index是索引</span><br><span class="line">    if (action.name === &#x27;反馈垃圾内容&#x27;) &#123;</span><br><span class="line">        // 证明点击的是反馈垃圾内容</span><br><span class="line">        this.actions = this.secondActions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、点击二级面板返回-回到一级反馈面板</p></div><p><strong>1.定义变量 cancelText 设置底部文字(注意只是显示的文字而已)</strong><br><strong>2.绑定取消事件(无论显示取消/返回文字)底部按钮点击都触发</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-action-sheet v-model=&quot;show&quot; :actions=&quot;actions&quot; @select=&quot;onSelect&quot; get-container=&quot;body&quot; :cancel-text=&quot;cancelText&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: false,</span><br><span class="line">      actions: firstActions,</span><br><span class="line">      cancelText: &#x27;取消&#x27; // 底部按钮文字</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 反馈面板点击事件</span><br><span class="line">    onSelect (action) &#123;</span><br><span class="line">      if (action.name === &#x27;反馈垃圾内容&#x27;) &#123;</span><br><span class="line">        this.actions = secondActions</span><br><span class="line">        this.cancelText = &#x27;返回&#x27; // 修改底部按钮显示文字</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;，</span><br><span class="line">     // 取消事件</span><br><span class="line">    onCancel () &#123;</span><br><span class="line">      // 判断用户点击的是返回还是取消</span><br><span class="line">      if (this.cancelText === &#x27;返回&#x27;) &#123;</span><br><span class="line">        this.actions = firstActions</span><br><span class="line">        this.cancelText = &#x27;取消&#x27;</span><br><span class="line">        this.show = true // 点返回不要让弹窗关闭, 点取消文字按钮, 弹窗默认关闭</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：上述两个事件的触发条件在 Vant 文档里均有说明，请自行查阅文档。</p></div><div class="tip home"><p>第三、点击一级面板不感兴趣-调用接口发送数据（需要 token）</p></div><p><strong>1.在 ArticleItem.vue 中, 点击不感兴趣文章, 传递文章 id 给 ArticleList 页面</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 反馈面板点击事件</span><br><span class="line">onSelect (action) &#123;</span><br><span class="line">    if (action.name === &#x27;反馈垃圾内容&#x27;) &#123;</span><br><span class="line">        this.actions = secondActions</span><br><span class="line">        this.cancelText = &#x27;返回&#x27;</span><br><span class="line">    &#125; else if (action.name === &#x27;不感兴趣&#x27;) &#123;</span><br><span class="line">        this.$emit(&#x27;dislike&#x27;, this.obj)</span><br><span class="line">        this.show = false // 关闭弹窗</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.在 ArticleList.vue 中, 绑定 dislike 事件和 dislikeFn 方法,弄个 Notify 通知框, 提示用户反馈结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; articleDislikeAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">import &#123; Notify &#125; from &#x27;vant&#x27;</span><br><span class="line"></span><br><span class="line">// 反馈(不感兴趣)</span><br><span class="line">async dislikeFn (obj) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        await articleDislikeAPI(&#123;</span><br><span class="line">            target: obj.art_id</span><br><span class="line">        &#125;)</span><br><span class="line">        Notify(&#123; type: &#x27;success&#x27;, message: &#x27;反馈成功&#x27; &#125;)</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        Notify(&#123; type: &#x27;warning&#x27;, message: &#x27;反馈失败-联系程序员&#x27; &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第四、点击二级面板的各种反馈-调用接口发送数据（需要 token）</p></div><p><strong>在上个例子基础上，点击举报类型调用接口</strong><br><strong>ArticleItem.vue 触发父级@reports 事件, 传反馈的文章对象出来和反馈类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 反馈面板点击事件</span><br><span class="line">onSelect (action) &#123;</span><br><span class="line">    if (action.name === &#x27;反馈垃圾内容&#x27;) &#123;</span><br><span class="line">        this.actions = secondActions</span><br><span class="line">        this.cancelText = &#x27;返回&#x27;</span><br><span class="line">    &#125; else if (action.name === &#x27;不感兴趣&#x27;) &#123;</span><br><span class="line">        this.$emit(&#x27;dislike&#x27;, this.obj)</span><br><span class="line">        this.show = false</span><br><span class="line">    &#125; else &#123; // 这里就是二级反馈</span><br><span class="line">        this.$emit(&#x27;reports&#x27;, this.obj, action.value) // 外面需要反馈类型的值</span><br><span class="line">        this.actions = firstActions</span><br><span class="line">        this.show = false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>在 ArticleList.vue 里引入接口, 和@reports 事件方法使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; articleReportsAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">// 反馈(举报)</span><br><span class="line">async reportsFn (obj, type) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        await articleReportsAPI(&#123;</span><br><span class="line">            target: obj.art_id,</span><br><span class="line">            type: type,</span><br><span class="line">            remark: &#x27;就是其他问题&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">        Notify(&#123; type: &#x27;success&#x27;, message: &#x27;举报成功&#x27; &#125;)</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        Notify(&#123; type: &#x27;warning&#x27;, message: &#x27;举报失败&#x27; &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：这里博主使用自定义事件将数据传入父组件来发送请求是因为：子组件将来是要被搜索功能所复用的，因此不能在子组件内调用接口发送数据，复用的组件最好保证渲染数据的功能即可</p></div><h2 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h2><div class="tip home"><p>第一、使用 axios 响应拦截器，判断是否错误 401, 对身份认证问题统一进行权限判断,失败重新登陆</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 添加响应拦截器</span><br><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">  // 2xx 范围内的状态码都会触发该函数。</span><br><span class="line">  // 对响应数据做点什么</span><br><span class="line">  return response</span><br><span class="line">&#125;, async function (error) &#123;</span><br><span class="line">  // 超出 2xx 范围的状态码都会触发该函数。</span><br><span class="line">  // 对响应错误做点什么</span><br><span class="line">  // 只有401才代表身份过期，需要重新登陆</span><br><span class="line">  if (error.response.status === 401) &#123;</span><br><span class="line">    // 为了拿到路由对象，直接去上面引入</span><br><span class="line">    Notify(&#123; type: &#x27;warning&#x27;, message: &#x27;身份认证过期，请重新登陆&#x27; &#125;)</span><br><span class="line">    // 清空token</span><br><span class="line">    removeToken()</span><br><span class="line">    // 跳转回登录页</span><br><span class="line">    router.replace(&#x27;/login&#x27;)</span><br><span class="line">  return Promise.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、使用 axios 请求拦截器，如果本地有 token, 携带在请求头给后台</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 添加请求拦截器</span><br><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">  // 在发送请求之前做些什么</span><br><span class="line">  // 统一携带 token</span><br><span class="line">  // 判断本地有无 token，判断具体的api/index.js里面如果没有携带 Authorization，我再添加上去</span><br><span class="line">  // undefined是未定义 null是空 你得赋予</span><br><span class="line">  // ?.可选连操作符 如果前面对象里没有length属性 原地返回undefined</span><br><span class="line">  // if 第二个判断是因为防止我自己带的 refresh_token 被覆盖掉</span><br><span class="line">  if (getToken()?.length &gt; 0 &amp;&amp; config.headers.Authorization === undefined) &#123;</span><br><span class="line">    config.headers.Authorization = `Bearer $&#123;getToken()&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">  return config</span><br><span class="line">&#125;, function (error) &#123;</span><br><span class="line">  // 对请求错误做些什么</span><br><span class="line">  return Promise.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip warning"><p>判断条件中的这段代码 getToken()?.length &gt; 0 ?.可选连操作符 如果前面对象里没有 length 属性 原地返回 undefined</p></div><h2 id="频道管理"><a href="#频道管理" class="headerlink" title="频道管理"></a>频道管理</h2><div class="tip home"><p>第一、标签准备和样式,为右侧增加一个 + 号</p></div><div class="tip home"><p>第二、点击 + 号，弹出频道管理页面</p></div><p><strong>1.寻找类似的组件 - vant 组件库叫 popup 组件</strong><br><strong>2.单独创建 Home/ChannelEdit.vue - 频道编辑组件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 弹出层的头部区域 --&gt;</span><br><span class="line">    &lt;van-nav-bar title=&quot;频道管理&quot;&gt;</span><br><span class="line">      &lt;template #right&gt;</span><br><span class="line">        &lt;van-icon name=&quot;cross&quot; size=&quot;0.37333334rem&quot; color=&quot;white&quot;/&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/van-nav-bar&gt;</span><br><span class="line">    &lt;!-- 我的频道 --&gt;</span><br><span class="line">    &lt;div class=&quot;my-channel-box&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;channel-title&quot;&gt;</span><br><span class="line">        &lt;span&gt;我的频道</span><br><span class="line">          &lt;span class=&quot;small-title&quot;&gt;</span><br><span class="line">            点击进入频道</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span&gt;编辑&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 我的频道列表 --&gt;</span><br><span class="line">      &lt;van-row type=&quot;flex&quot;&gt;</span><br><span class="line">        &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;channel-item van-hairline--surround&quot;&gt;</span><br><span class="line">            名字</span><br><span class="line">            &lt;!-- 删除的徽标 --&gt;</span><br><span class="line">            &lt;van-badge color=&quot;transparent&quot; class=&quot;cross-badge&quot;&gt;</span><br><span class="line">              &lt;template #content&gt;</span><br><span class="line">                &lt;van-icon</span><br><span class="line">                  name=&quot;cross&quot;</span><br><span class="line">                  class=&quot;badge-icon&quot;</span><br><span class="line">                  color=&quot;#cfcfcf&quot;</span><br><span class="line">                  size=&quot;0.32rem&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">            &lt;/van-badge&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/van-col&gt;</span><br><span class="line">      &lt;/van-row&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 更多频道 --&gt;</span><br><span class="line">    &lt;div class=&quot;more-channel-box&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;channel-title&quot;&gt;</span><br><span class="line">        &lt;span&gt;点击添加更多频道：&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 更多频道列表 --&gt;</span><br><span class="line">      &lt;van-row type=&quot;flex&quot;&gt;</span><br><span class="line">        &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;channel-item van-hairline--surround&quot;&gt;名字&lt;/div&gt;</span><br><span class="line">        &lt;/van-col&gt;</span><br><span class="line">      &lt;/van-row&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.van-popup,</span><br><span class="line">.popup-container &#123;</span><br><span class="line">  background-color: transparent;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.popup-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pop-header &#123;</span><br><span class="line">  height: 90px;</span><br><span class="line">  background-color: #007bff;</span><br><span class="line">  color: white;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  position: relative;</span><br><span class="line">  .title &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pop-body &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  overflow: scroll;</span><br><span class="line">  padding: 8px;</span><br><span class="line">  background-color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.my-channel-box,</span><br><span class="line">.more-channel-box &#123;</span><br><span class="line">  .channel-title &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 28px;</span><br><span class="line">    padding: 0 6px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.channel-item &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 36px;</span><br><span class="line">  background-color: #fafafa;</span><br><span class="line">  margin: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*删除的微标 */</span><br><span class="line">.cross-badge &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: -3px;</span><br><span class="line">  top: 0;</span><br><span class="line">  border: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*提示文字 */</span><br><span class="line">.small-title &#123;</span><br><span class="line">  font-size: 10px;</span><br><span class="line">  color: gray;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/02/PlkE5.png"/></div></div><p><strong>3.在 Home/index.vue 引入注册使用</strong><br><strong>4.准备变量 show, 点击按钮处弹窗</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-icon name=&quot;plus&quot; size=&quot;0.37333334rem&quot; class=&quot;moreChannels&quot; @click=&quot;show = true&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>5.点击弹出层 x, 关闭</strong></p><p>ChannelEdit 内向父传事件, 影响 show 的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Home/index.vue内</span><br><span class="line">&lt;!-- 弹出层的主体区域 --&gt;</span><br><span class="line">&lt;channel-edit @close=&quot;show = false&quot;&gt;&lt;/channel-edit&gt;</span><br><span class="line">----------------------------------------------</span><br><span class="line">// ChannelEdit.vue内</span><br><span class="line">&lt;van-nav-bar title=&quot;频道管理&quot;&gt;</span><br><span class="line">    &lt;template #right&gt;</span><br><span class="line">&lt;van-icon name=&quot;cross&quot; size=&quot;0.37333334rem&quot; color=&quot;white&quot; @click=&quot;$emit(&#x27;close&#x27;)&quot;/&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-nav-bar&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第三、更多频道，我的频道数据准备（取决与后端接口数据）</p></div><div class="tip warning"><p>由于本项目后端接口只有所有频道数据与我的频道数据，因此我们可以通过计算属性利用简单的算法将更多频道的数据得到：遍历全部数据中的每个, 去已选数组里查找, 找不到收集起来</p></div><p><strong>1.在 ChannelEdit 页面内, 首页把用户已选频道传入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; allChannelListAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      allChannelList: [] // 所有频道</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    userChannelList: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default: () =&gt; []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  async created () &#123;</span><br><span class="line">    const res = await allChannelListAPI()</span><br><span class="line">    console.log(res)</span><br><span class="line">    this.allChannelList = res.data.data.channels</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">&lt;channel-edit :userChannelList=&quot;channelList&quot; @close=&quot;show = false&quot;&gt;&lt;/channel-edit&gt;</span><br></pre></td></tr></table></figure><p><strong>2.ChannelEdit 内设置计算属性 - 提取未选中的频道数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    unChannelList () &#123;</span><br><span class="line">      return this.allChannelList.filter(obj =&gt; &#123;</span><br><span class="line">        const index = this.userChannelList.findIndex(obj2 =&gt; obj2.id === obj.id)</span><br><span class="line">        if (index === -1) return true</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>3.在 Home/ChannelEdit.vue 编辑频道组件上, 对应标签位置, 循环 name 使用即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 我的频道列表 --&gt;</span><br><span class="line">&lt;van-row type=&quot;flex&quot;&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot; v-for=&quot;obj in userChannelList&quot; :key=&quot;obj.id&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;channel-item van-hairline--surround&quot;&gt;</span><br><span class="line">            &#123;&#123; obj.name &#125;&#125;</span><br><span class="line">            &lt;!-- 删除的徽标 --&gt;</span><br><span class="line">            &lt;van-badge color=&quot;transparent&quot; class=&quot;cross-badge&quot;&gt;</span><br><span class="line">                &lt;template #content&gt;</span><br><span class="line">&lt;van-icon</span><br><span class="line">                      name=&quot;cross&quot;</span><br><span class="line">                      class=&quot;badge-icon&quot;</span><br><span class="line">                      color=&quot;#cfcfcf&quot;</span><br><span class="line">                      size=&quot;0.32rem&quot;</span><br><span class="line">                      /&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/van-badge&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">&lt;/van-row&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 更多频道 --&gt;</span><br><span class="line">&lt;div class=&quot;more-channel-box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;channel-title&quot;&gt;</span><br><span class="line">        &lt;span&gt;点击添加更多频道：&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 更多频道列表 --&gt;</span><br><span class="line">    &lt;van-row type=&quot;flex&quot;&gt;</span><br><span class="line">        &lt;van-col span=&quot;6&quot; v-for=&quot;obj in unChannelList&quot; :key=&quot;obj.id&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;channel-item van-hairline--surround&quot;&gt;&#123;&#123; obj.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/van-col&gt;</span><br><span class="line">    &lt;/van-row&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第四、频道管理——点击编辑按钮即可对频道进行增删操作</p></div><p><strong>1.点击编辑按钮实现文字切换(变量取反)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;channel-title&quot;&gt;</span><br><span class="line">    &lt;span&gt;我的频道</span><br><span class="line">        &lt;span class=&quot;small-title&quot;&gt;</span><br><span class="line">            &#123;&#123; isEdit ? &#x27;点击删除频道&#x27; : &#x27;点击进入频道&#x27; &#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span @click=&quot;isEdit = !isEdit&quot;&gt;&#123;&#123; isEdit ? &#x27;完成&#x27; : &#x27;编辑&#x27; &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isEdit: false // 控制编辑状态</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.设置 x 微标显示与否(推荐频道上不能出现 x)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 删除的徽标 --&gt;</span><br><span class="line">&lt;van-badge color=&quot;transparent&quot; class=&quot;cross-badge&quot; v-show=&quot;isEdit &amp;&amp; obj.id !== 0&quot;&gt;</span><br><span class="line">    &lt;template #content&gt;</span><br><span class="line">&lt;van-icon</span><br><span class="line">          name=&quot;cross&quot;</span><br><span class="line">          class=&quot;badge-icon&quot;</span><br><span class="line">          color=&quot;#cfcfcf&quot;</span><br><span class="line">          size=&quot;0.32rem&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-badge&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第五、频道管理——编辑状态下，点击更多频道中的每一个频道，会添加进我的频道</p></div><p><strong>1.更多频道选择 - 绑定点击事件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-col span=&quot;6&quot; v-for=&quot;obj in unChannelList&quot; :key=&quot;obj.id&quot; @click=&quot;addFn(obj)&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;channel-item van-hairline--surround&quot;&gt;</span><br><span class="line">        &#123;&#123; obj.name &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/van-col&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 新增频道</span><br><span class="line">        addFn (obj) &#123;</span><br><span class="line">            if (this.isEdit === true) &#123;</span><br><span class="line">                this.$emit(&#x27;addChannel&#x27;, obj)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.回传要添加的频道 obj 对象, 子传父</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addFn (item) &#123; // 新增频道</span><br><span class="line">    if (this.isEdit === true) &#123; // 编辑状态</span><br><span class="line">        this.$emit(&#x27;add&#x27;, item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.在 Home/index.vue, 接收后, 添加到频道数组里</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 弹出层的主体区域 --&gt;</span><br><span class="line">&lt;channel-edit :userChannelList=&quot;channelList&quot; @close=&quot;show = false&quot; @addChannel=&quot;addChannelFn&quot;&gt;&lt;/channel-edit&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 添加频道</span><br><span class="line">        addChannelFn (obj) &#123;</span><br><span class="line">            this.channelList.push(obj)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意: 你有计算属性, 所以引用变量改变, 未选频道自动重新计算</p></div><div class="tip home"><p>第六、增删同步后台数据</p></div><p><strong>1.定义更新频道接口方法(查看接口文档)</strong></p><p><strong>2.在 Home/index.vue - 引入接口方法, 在新增频道方法中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 把数据&#123;&#123;name:xxx,id:xxx&#125;&#125;预处理成后台想要的格式&#123;name:xxx,seq:xxx&#125;, 直接把频道数组更新覆盖给后台</span><br><span class="line">import &#123; updateChannelAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">async editFn (obj, index, type) &#123; // 编辑频道</span><br><span class="line">    if (type === &#x27;add&#x27;) &#123;</span><br><span class="line">        this.list.push(obj)</span><br><span class="line">    &#125;</span><br><span class="line">    const arr = this.list.filter((obj) =&gt; &#123; return obj.id !== 0 &#125;) // 先过滤掉id为0的推荐频道, 把剩余的数组返回</span><br><span class="line">    console.log(arr)</span><br><span class="line"></span><br><span class="line">    const resultList = arr.map((item, index) =&gt; &#123;</span><br><span class="line">        const newObj = &#123; ...item &#125; // 浅拷贝(让对象和原数组脱离关系)</span><br><span class="line">        newObj.seq = index + 1</span><br><span class="line">        delete newObj.name // 删除对象里name键值对</span><br><span class="line">        return newObj</span><br><span class="line">    &#125;)</span><br><span class="line">    // map会收集每次遍历return的值形成一个新数组</span><br><span class="line">    console.log(resultList)</span><br><span class="line">    await updateChannelAPI(&#123;</span><br><span class="line">        channels: resultList</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意: 由于本接口不需要传递推荐频道，因此需要在数组中将推荐频道删除，但是数组是引用类型数据，一定要注意，进行删除操作时不要对原数据产生任何影响</p></div><div class="tip warning"><p>以下为错误示范：虽然 filter 导出的新数组是新的地址 但是里面的对象指向的还是同一地址，所以只要对里面的属性进行操作 必然会影响原数组里面的对象</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const newArr = this.userChannelList.filter(item =&gt; item.id !== 0)</span><br><span class="line">      newArr.forEach((item, index) =&gt; &#123;</span><br><span class="line">        delete item.name</span><br><span class="line">        item.seq = index</span><br><span class="line">      &#125;)</span><br><span class="line">      const res = await updateChannelsAPI(&#123;</span><br><span class="line">        channels: newArr</span><br><span class="line">      &#125;)</span><br><span class="line">      console.log(res)</span><br></pre></td></tr></table></figure><div class="tip home"><p>第七、编辑状态下，点击我的频道任意频道，即可对其进行删除</p></div><p><strong>1.推荐频道不允许删除, 所以单独判断一下, 不给删除频道小微标</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 删除的徽标 --&gt;</span><br><span class="line">&lt;van-badge color=&quot;transparent&quot; class=&quot;cross-badge&quot; v-if=&quot;isEdit &amp;&amp; obj.name !== &#x27;推荐&#x27;&quot;&gt;</span><br><span class="line">    &lt;template #content&gt;</span><br><span class="line">&lt;van-icon</span><br><span class="line">          name=&quot;cross&quot;</span><br><span class="line">          class=&quot;badge-icon&quot;</span><br><span class="line">          color=&quot;#cfcfcf&quot;</span><br><span class="line">          size=&quot;0.32rem&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-badge&gt;</span><br></pre></td></tr></table></figure><p><strong>2.点击选项删除</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 我的频道列表 --&gt;</span><br><span class="line">&lt;van-row type=&quot;flex&quot;&gt;</span><br><span class="line">&lt;van-col span=&quot;6&quot; v-for=&quot;obj in tabsList&quot; :key=&quot;obj.id&quot; @click=&quot;removeFn(obj)&quot;&gt;</span><br><span class="line">&lt;/van-col&gt;</span><br><span class="line">&lt;/van-row&gt;</span><br></pre></td></tr></table></figure><p><strong>3.从 ChannelEdit.vue 传递要删除的索引到 Home/index.vue 删除频道</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 删除频道</span><br><span class="line">   removeFn (obj) &#123;</span><br><span class="line">       if (this.isEdit === true &amp;&amp; obj.name !== &#x27;推荐&#x27;) &#123;</span><br><span class="line">           this.$emit(&#x27;removeChannel&#x27;, obj)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>4.Home/index.vue - 监听 removeChannel 事件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 弹出层的主体区域 --&gt;</span><br><span class="line">&lt;channel-edit :userChannelList=&quot;channelList&quot; @close=&quot;show = false&quot; @addChannel=&quot;addChannelFn&quot; @removeChannel=&quot;removeChannelFn&quot;&gt;&lt;/channel-edit&gt;</span><br></pre></td></tr></table></figure><p><strong>5.把更新方法提取, 分别调用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    // 添加频道</span><br><span class="line">    async addChannelFn (obj) &#123;</span><br><span class="line">      this.channelList.push(obj)</span><br><span class="line">      this.updateChannel()</span><br><span class="line">    &#125;,</span><br><span class="line">    // 统一更新频道</span><br><span class="line">    async updateChannel () &#123;</span><br><span class="line">      // 先拷贝一份数组(前端页面用channelList, 后端用拷贝出的数组)</span><br><span class="line">      // 数组第一层, 对象里key+value是第二层</span><br><span class="line">      const newArr = this.channelList.map(obj =&gt; &#123;</span><br><span class="line">        const newObj = &#123; ...obj &#125;</span><br><span class="line">        return newObj</span><br><span class="line">      &#125;)</span><br><span class="line">      // 先剔除推荐</span><br><span class="line">      const index = newArr.findIndex(obj =&gt; obj.name === &#x27;推荐&#x27;)</span><br><span class="line">      newArr.splice(index, 1)</span><br><span class="line">      // 转换字段</span><br><span class="line">      newArr.forEach((obj, index) =&gt; &#123;</span><br><span class="line">        delete obj.name</span><br><span class="line">        obj.seq = index + 1</span><br><span class="line">      &#125;)</span><br><span class="line">      // 调用接口</span><br><span class="line">      await updateChannelAPI(&#123;</span><br><span class="line">        channels: newArr</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 删除频道</span><br><span class="line">    async removeChannelFn (obj) &#123;</span><br><span class="line">      // 找到这个频道在数组下标删除</span><br><span class="line">      const ind = this.channelList.findIndex(item =&gt; item.id === obj.id)</span><br><span class="line">      this.channelList.splice(ind, 1)</span><br><span class="line">      this.updateChannel()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><div class="tip home"><p>第八、频道管理层关闭，重置编辑状态</p></div><p><strong>1.绑定@closed 事件(查阅 vant)</strong></p><p>channel-edit 添加 ref(为了获取组件对象, 修改内部的 isEdit 变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 弹出层组件 --&gt;</span><br><span class="line">&lt;van-popup v-model=&quot;show&quot; class=&quot;edit_wrap&quot; @closed=&quot;onPopupClosed&quot;&gt;</span><br><span class="line">    &lt;!-- 弹出层的主体区域 --&gt;</span><br><span class="line">    &lt;channel-edit :userChannelList=&quot;channelList&quot; @close=&quot;show = false&quot; @addChannel=&quot;addChannelFn&quot; @removeChannel=&quot;removeChannelFn&quot; ref=&quot;channelEdit&quot;&gt;&lt;/channel-edit&gt;</span><br><span class="line">&lt;/van-popup&gt;</span><br></pre></td></tr></table></figure><p><strong>2.在 Home/index.vue - 访问到 ChannelEdit.vue 的 isEdit 变量设置为 false</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    // 弹层关闭-重置编辑频道状态</span><br><span class="line">    onPopupClosed () &#123;</span><br><span class="line">        this.$refs.channelEdit.isEdit = false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第九、在非编辑状态下，点击我的频道中任意频道，进入相应频道</p></div><p><strong>1.在 ChannelEdit.vue 的我的频道, 点击事件判断</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 删除频道</span><br><span class="line">removeFn (obj) &#123;</span><br><span class="line">    if (this.isEdit === true &amp;&amp; obj.name !== &#x27;推荐&#x27;) &#123; // 删除频道</span><br><span class="line">        this.$emit(&#x27;removeChannel&#x27;, obj)</span><br><span class="line">    &#125; else &#123; // 进入逻辑</span><br><span class="line">        this.$emit(&#x27;changeChannel&#x27;, obj)</span><br><span class="line">        this.$emit(&#x27;close&#x27;) // 关闭弹窗</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.在 Home/index.vue - 绑定@changeChannel 事件, 准备切换显示频道</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;channel-edit</span><br><span class="line">              :userChannelList=&quot;channelList&quot;</span><br><span class="line">              @close=&quot;show = false&quot;</span><br><span class="line">              @addChannel=&quot;addChannelFn&quot;</span><br><span class="line">              @removeChannel=&quot;removeChannelFn&quot;</span><br><span class="line">              ref=&quot;channelEdit&quot;</span><br><span class="line">              @changeChannel=&quot;channgeChannelFn&quot;</span><br><span class="line">              &gt;&lt;/channel-edit&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 切换频道</span><br><span class="line">    channgeChannelFn (obj) &#123;</span><br><span class="line">      this.channelId = obj.id // 传过来的频道ID, 影响tabs默认v-model的选择</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip "><p>未完待续。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（四）&quot;&gt;&lt;a href=&quot;#移动端项目总结（四）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（四）&quot;&gt;&lt;/a&gt;移动端项目总结（四）&lt;/h1&gt;&lt;h2 id=&quot;反馈操作&quot;&gt;&lt;a href=&quot;#反馈操作&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端项目总结（三）</title>
    <link href="https://tailante.github.io/posts/1e88.html"/>
    <id>https://tailante.github.io/posts/1e88.html</id>
    <published>2022-10-01T00:49:44.000Z</published>
    <updated>2022-10-02T09:00:45.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（三）"><a href="#移动端项目总结（三）" class="headerlink" title="移动端项目总结（三）"></a>移动端项目总结（三）</h1><div class="tip warning faa-horizontal animated faa-fast"><p>写在前面，只要修改了配置文件，一定要重启服务器！！！！</p></div><h2 id="首页功能开发"><a href="#首页功能开发" class="headerlink" title="首页功能开发"></a>首页功能开发</h2><div class="tip home"><p>第一、分析页面结构，创建对应路由，同时将路由重定向至首页</p></div><p>1.Login.vue 和 Layout.vue 是一级路由页面<br>2.Home.vue 和 User.vue 应该是嵌入在 Layout.vue 页面里的二级路由页面<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/01/MMGHh.png"/></div></div></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 二级路由的设置方法</span><br><span class="line">&#123;</span><br><span class="line">    path: &#x27;/layout&#x27;,</span><br><span class="line">    component: Layout,</span><br><span class="line">    redirect: &#x27;/layout/home&#x27;, // 默认显示二级页面为home首页</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;home&#x27;,</span><br><span class="line">        component: Home</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;user&#x27;,</span><br><span class="line">        component: User</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、在 layout 页面铺设底部导航，查找 Vant 组件库文档，使用 TabBar 组件，进行全局注册，并设置对应的路由跳转属性</p></div><div class="tip home"><p>第三、美化样式, 给 router-view 外面, 套一个 div.home_container, 并且防止二级页面内容, 被底部导航挡住</p></div><div class="tip home"><p>第四、登录成功，跳转至首页</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 在Login/index.js内, 登陆成功逻辑处末尾</span><br><span class="line">this.$router.replace(&#123;</span><br><span class="line">    path: &#x27;/layout&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip home"><p>第五、进入 Home 组件，开始设置头部标签，查阅 vant 文档为头部左侧添加一个 logo 图片，右侧添加一个 icon 搜索图标</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 头部标签 --&gt;</span><br><span class="line">    &lt;van-nav-bar fixed&gt;</span><br><span class="line">      &lt;template #left&gt;</span><br><span class="line">        &lt;!-- &lt;img class=&quot;logo&quot; src=&quot;../../assets/toutiao_logo.png&quot; alt=&quot;&quot; /&gt; --&gt;</span><br><span class="line">        &lt;img class=&quot;logo&quot; :src=&quot;imgObj&quot;/&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template #right&gt;</span><br><span class="line">        &lt;van-icon name=&quot;search&quot; size=&quot;0.48rem&quot; color=&quot;#fff&quot;/&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/van-nav-bar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意点一：头部标签为何不在 Layout 上面使用 ? 如果使用, 则所有二级页面都有头了, 但实际上只有 Home 页面头部有</p><p>注意点二：由于搜索图标的大小样式是设置在行内，因此 postcss 无法发挥作用，只能通过手动设置 rem 解决</p></div><div class="tip home"><p>第六、查阅 vant 文档，找到 Tab 标签页 ，为首页铺设频道</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 频道部分 --&gt;</span><br><span class="line">// 内容1, 内容2, 内容3, 内容4, 对应的是tab标签下面对应的内容区域(插槽技术)，分别一一对应的关系, 分别独立, 互不影响</span><br><span class="line">&lt;van-tabs v-model=&quot;active&quot; animated&gt;</span><br><span class="line">  &lt;van-tab title=&quot;标签 1&quot;&gt;内容 1&lt;/van-tab&gt;</span><br><span class="line">  &lt;van-tab title=&quot;标签 2&quot;&gt;内容 2&lt;/van-tab&gt;</span><br><span class="line">  &lt;van-tab title=&quot;标签 3&quot;&gt;内容 3&lt;/van-tab&gt;</span><br><span class="line">  &lt;van-tab title=&quot;标签 4&quot;&gt;内容 4&lt;/van-tab&gt;</span><br><span class="line">&lt;/van-tabs&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>为提升用户体验，将头部设置为固定定位，tab 栏被定位的头部导航挡住, 设置固定定位/粘性定位（查阅 vant 文档进行设置）, 距离上边 46px(手动转 rem)，tab 栏内容部分, 也要给 tab 导航定位留出距离</p></div><div class="tip home"><p>第七、铺设频道动态数据，查阅接口文档，定义接口（需要携带 token），在组件创建时发送请求，循环铺设频道</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; userChannelAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">            // ...省略其他</span><br><span class="line">        channelList: [] // 频道数据</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    async created () &#123;</span><br><span class="line">const res = await userChannelAPI()</span><br><span class="line">this.channelList = res.data.data.channels</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------</span><br><span class="line">&lt;!-- 频道部分 --&gt;</span><br><span class="line">&lt;van-tabs v-model=&quot;active&quot; animated sticky offset-top=&quot;1.226667rem&quot;&gt;</span><br><span class="line">    &lt;van-tab v-for=&quot;item in channelList&quot; :key=&quot;item.id&quot; :title=&quot;item.name&quot;&gt;</span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    &lt;/van-tab&gt;</span><br><span class="line">&lt;/van-tabs&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>登录和未登录返回的频道有什么区别? 登录就会传递 token 给后台, 返回对应用户的频道,未登录后台返回默认的频道</p></div><div class="tip home"><p>第八、在 tab 栏内容部分铺设文章列表之前，进行组件拆分，使结构更加清晰，为后续搜索功能开发组件的复用买下基础</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/01/Mgm4S.png"/></div></div><div class="tip home"><p>第九、创建对应组件</p></div> 1.创建 ArtileItem 组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 一条文章单元格 --&gt;</span><br><span class="line">  &lt;van-cell&gt;</span><br><span class="line">    &lt;!-- 标题区域的插槽 --&gt;</span><br><span class="line">    &lt;template #title&gt;</span><br><span class="line">      &lt;div class=&quot;title-box&quot;&gt;</span><br><span class="line">        &lt;!-- 标题 --&gt;</span><br><span class="line">        &lt;span&gt;文章标题&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;!-- label 区域的插槽 --&gt;</span><br><span class="line">    &lt;template #label&gt;</span><br><span class="line">      &lt;div class=&quot;label-box&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;span&gt;作者&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;0评论&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;8个月前&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 反馈按钮 --&gt;</span><br><span class="line">        &lt;van-icon name=&quot;cross&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/van-cell&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">/* 标题样式 */</span><br><span class="line">.title-box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* label描述样式 */</span><br><span class="line">.label-box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 文章信息span */</span><br><span class="line">.label-box span&#123;</span><br><span class="line">    margin: 0 3px;</span><br><span class="line">    &amp;:first-child&#123;</span><br><span class="line">        margin-left: 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>2.创建 ArticleList 组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 文章列表 --&gt;</span><br><span class="line">    &lt;article-item&gt;&lt;/article-item&gt;</span><br><span class="line">    &lt;article-item&gt;&lt;/article-item&gt;</span><br><span class="line">    &lt;article-item&gt;&lt;/article-item&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ArticleItem from &#x27;./components/ArticleItem.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ArticleItem</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3.Home 页引入 ArticleList</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 频道部分 --&gt;</span><br><span class="line">&lt;van-tabs v-model=&quot;active&quot;</span><br><span class="line">          animated</span><br><span class="line">          sticky</span><br><span class="line">          offset-top=&quot;1.226667rem&quot;&gt;</span><br><span class="line">    &lt;van-tab v-for=&quot;item in channelList&quot;</span><br><span class="line">             :key=&quot;item.id&quot;</span><br><span class="line">             :title=&quot;item.name&quot;&gt;</span><br><span class="line">        &lt;article-list&gt;&lt;/article-list&gt;</span><br><span class="line">    &lt;/van-tab&gt;</span><br><span class="line">&lt;/van-tabs&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 只有核心代码</span><br><span class="line">import ArticleList from &#x27;@/views/Home/ArticleList&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        ArticleList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>一个细节：<br>每个 van-tab 代表一个标签导航，它中间夹着的内容，对应下属列表的内容<br>van-tab 循环了很多标签导航，与之一一对应的内容列表不是上来都创建的，默认创建当前激活导航对应的列表组件<br>第一次切换的对应的频道时，才会创建下属的 articlelist 组件 -&gt; created()<br>第二次切换就是显示隐藏切换</p></div><div class="tip home"><p>第十、查看接口文档，调用接口，发送请求，铺设数据</p></div><p><strong>1.在 Home/ArticleList.vue 引入, 并发起请求</strong><br><strong>2.在 ArticleList.vue 中, data 定义 articleList 变量接受</strong><br><strong>3.v-for 循环 ArticleItem, 传入文章对象</strong><br><strong>4.ArticleItem 定义 props 变量 obj 接收, 从 ArticleList 传递过来的文章信息对象</strong><br><strong>5.替换标签内容</strong><br><strong>6.需要 v-if 进行图片判断，来确定渲染图片的数量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template #title&gt;</span><br><span class="line">      &lt;div class=&quot;title-box&quot;&gt;</span><br><span class="line">        &lt;!-- 标题 --&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; obj.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;!-- 单图 --&gt;</span><br><span class="line">        &lt;img class=&quot;thumb&quot;</span><br><span class="line">             :src=&quot;obj.cover.images[0]&quot;</span><br><span class="line">             v-if=&quot;obj.cover.type === 1&quot;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 三张图片 --&gt;</span><br><span class="line">        &lt;div class=&quot;thumb-box&quot; v-if=&quot;obj.cover.type &gt; 1&quot;&gt;</span><br><span class="line">          &lt;img class=&quot;thumb&quot;</span><br><span class="line">             v-for=&quot;(imgUrl, index) in obj.cover.images&quot;</span><br><span class="line">             :key=&quot;index&quot;</span><br><span class="line">             :src=&quot;imgUrl&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>7.需要对时间进行优化，把时间转换成多久之前</strong><br>第一种方法：引入插件库进行处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// dayjs第三方库: https://dayjs.fenxianglu.cn/</span><br><span class="line">yarn add dayjs</span><br><span class="line">---------------------------</span><br><span class="line">// 新建 utils/date.js</span><br><span class="line">import dayjs from &#x27;dayjs&#x27;</span><br><span class="line">import relativeTime from &#x27;dayjs/plugin/relativeTime&#x27; // 到指定时间需要的插件</span><br><span class="line">import &#x27;dayjs/locale/zh&#x27; // 集成中文</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * .....多久之前</span><br><span class="line"> * @param &#123;*&#125; 之前的时间</span><br><span class="line"> * @returns 系统时间到之前指定时间的距离值</span><br><span class="line"> */</span><br><span class="line">export const timeAgo = (targetTime) =&gt; &#123;</span><br><span class="line">  // 格式化时间</span><br><span class="line">  dayjs.extend(relativeTime)</span><br><span class="line">  dayjs.locale(&#x27;zh&#x27;)</span><br><span class="line">  var a = dayjs()</span><br><span class="line">  var b = dayjs(targetTime)</span><br><span class="line">  return a.to(b) // 返回多久之前...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二种方法：自己单独封装一个转换时间的 js 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">relativeTime (val) &#123;</span><br><span class="line">      const t = new Date(val)</span><br><span class="line">      const diff = Date.now() - t.getTime()</span><br><span class="line"></span><br><span class="line">      const year = Math.floor(diff / (1000 * 3600 * 24 * 365))</span><br><span class="line">      if (year) &#123;</span><br><span class="line">        return `$&#123;year&#125;年前`</span><br><span class="line">      &#125;</span><br><span class="line">      const month = Math.floor(diff / (1000 * 3600 * 24 * 30))</span><br><span class="line">      if (month) &#123;</span><br><span class="line">        return `$&#123;month&#125;月前`</span><br><span class="line">      &#125;</span><br><span class="line">      const day = Math.floor(diff / (1000 * 3600 * 24))</span><br><span class="line">      if (day) &#123;</span><br><span class="line">        return `$&#123;day&#125;天前`</span><br><span class="line">      &#125;</span><br><span class="line">      const hour = Math.floor(diff / (1000 * 3600))</span><br><span class="line">      if (hour) &#123;</span><br><span class="line">        return `$&#123;hour&#125;小时前`</span><br><span class="line">      &#125;</span><br><span class="line">      const minute = Math.floor(diff / (1000 * 60))</span><br><span class="line">      if (minute) &#123;</span><br><span class="line">        return `$&#123;minute&#125;分钟前`</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return &#x27;刚才&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>这里博主更推荐第二种，也就是自己封装一个时间处理函数，一方面锻炼自己原生封装的能力，另一方面可以减小由于引入了外部包而导致最后代码打包时所增加的不必要的体积</p><p>随后将时间处理函数在 home 中使用，直接对数据进行预处理</p></div><div class="tip home"><p>第十一、点击频道显示不同数据(tab 栏切换)</p></div> 1.点击频道, 拿到频道 ID 2.由于频道是用 tab 标签页组件, 需要看文档如何拿到- 在 van-tabs 上修改 v-model 变量名(把 active 换成 channelId)- 在 van-tab 绑定 name 属性和值(值为频道 ID)- 点 van-tab 后,name 值会自动绑定给 v-model(vant 组件内部实现的)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 频道部分 --&gt;</span><br><span class="line">&lt;van-tabs v-model=&quot;channelId&quot; animated sticky offset-top=&quot;1.226667rem&quot;&gt;</span><br><span class="line">&lt;van-tab v-for=&quot;item in channelList&quot; :key=&quot;item.id&quot; :title=&quot;item.name&quot; :name=&quot;item.id&quot;&gt;</span><br><span class="line">&lt;article-list :cid=&quot;channelId&quot;&gt;&lt;/article-list&gt;</span><br><span class="line">&lt;/van-tab&gt;</span><br><span class="line">&lt;/van-tabs&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // ...省略其他(把active换成channelId)</span><br><span class="line">      channelId: 0, // 频道ID(默认0是推荐)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3.ArticleList 内, props 定义变量 cid, 替换请求的频道（默认会切换 ArticleList, 组件创建后, 会重新进行网络请求）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  // ...核心代码</span><br><span class="line">  props: &#123;</span><br><span class="line">    cid: Number</span><br><span class="line">  &#125;,</span><br><span class="line">  async created () &#123;</span><br><span class="line">    const res = await articlesListAPI(&#123;</span><br><span class="line">      channelId: this.cid</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 回来的数据进行预处理, 把时间转成多久多久之前</span><br><span class="line">    res.data.data.results.forEach((obj) =&gt; &#123;</span><br><span class="line">      obj.pubdate = this.timeAgo(obj.pubdate)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    this.articleList = res.data.data.results</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>这里需要解释一下，为什么选择将频道 ID 传入 ArticleList ,而不是直接在 Home 组件内进行数据请求？</p><p>如果我们查阅 Vant 组件文档会发现，点击 tab 标签页可以触发 change 事件，在这里重新发送请求拿到数据，但是这会导致一个致命的问题，每次切换都会得到最新数据，造成不好的用户体验，即使使用组件缓存也没用（keep-alive 是阻止组件销毁，而你只要切换，就会触发事件发送请求拿数据），因为 Home 组件的 data 现在用的是同一个数组切换数据（多个 articleList 用的是同一个数组，会相互影响），所以我们将选择将频道 ID 传入 ArticleList ，文章列表数据，请求，数组，分别放入到各自内部，自己请求自己的，Home 只负责传入当前激活频道的 ID</p></div><div class="tip home"><p>第十二、文章列表——手指往上拉, 底部加载更多</p></div><p>思路：<br><strong>1.寻找 vant 组件, 叫 list 组件(用法查阅文档)</strong><br><strong>2.要判断是否滚动到底部</strong><br><strong>3.给后台传递页码 / 偏移量, 拿到新数据</strong><br><strong>4.和现有数据合并到一个数组里</strong></p><p>1.在 Home/ArticleList 中,使用 list 组件，同时定义组件所需的变量和方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-list</span><br><span class="line">      v-model=&quot;loading&quot;</span><br><span class="line">      :finished=&quot;finished&quot;</span><br><span class="line">      finished-text=&quot;没有更多了&quot;</span><br><span class="line">      @load=&quot;onLoad&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 文章列表 --&gt;</span><br><span class="line">      &lt;article-item</span><br><span class="line">        v-for=&quot;item in articleList&quot;</span><br><span class="line">        :key=&quot;item.art_id&quot;</span><br><span class="line">        :obj=&quot;item&quot;</span><br><span class="line">      &gt;&lt;/article-item&gt;</span><br><span class="line">&lt;/van-list&gt;</span><br><span class="line">--------------------------------------------</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      articleList: [], // 文章列表</span><br><span class="line">      loading: false, // 底部加载状态</span><br><span class="line">      finished: false // 数据是否全部加载完成</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 底部加载</span><br><span class="line">    onLoad () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.触底的距离有点远, 查文档, 设置 list 组件属性 offset=”50”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-list</span><br><span class="line">      v-model=&quot;loading&quot;</span><br><span class="line">      :finished=&quot;finished&quot;</span><br><span class="line">      finished-text=&quot;没有更多了&quot;</span><br><span class="line">      @load=&quot;onLoad&quot;</span><br><span class="line">      offset=&quot;50&quot;</span><br><span class="line">    &gt;</span><br></pre></td></tr></table></figure><p>3.网页刚上来不监测是否触底, 不执行 load 事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-list</span><br><span class="line">      v-model=&quot;loading&quot;</span><br><span class="line">      :finished=&quot;finished&quot;</span><br><span class="line">      finished-text=&quot;没有更多了&quot;</span><br><span class="line">      @load=&quot;onLoad&quot;</span><br><span class="line">      offset=&quot;50&quot;</span><br><span class="line">      :immediate-check=&quot;false&quot; (是否在初始化时立即执行滚动位置检查)</span><br><span class="line">    &gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>为什么我们需要 immediate-check=”false” 来使网页刚上来不监测是否触底, 不执行 load 事件？</p><p>因为网页刚打开，created 与 onload 同时执行 同时发送请求 导致 key 值相同</p><p>那么第二个问题就出现了，我们刚打开网页为什么会触发 onload 事件呢？</p><p>主要是因为组件挂载时，就会默认判定一次是否触底，在 vue 中，DOM 的更新是异步的，而第一次的数据也是网络请求回来的，标签先挂载了，数据回来才更新 dom，所以标签没有高度，所以触底</p></div><p>4.查看接口文档，分析如何拿到下一页数据（由于各个接口文档不同，博主以本项目文档举例），发现接口文档有个 timestamp, 说明下一页要用上一次请求成功的 pre_timestamp 的值，所以在 Home/ArticleList.vue, data 里定义变量 nextTime，在文章列表获取成功时, 接收 pre_timestamp 的值，调用接口传入 nextTIme，接收数据合并到现有数组中,最后判断是否全部加载完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // ...省略其他</span><br><span class="line">      nextTime: null // 用于加载更多(分页)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    async getArticleList () &#123;</span><br><span class="line">      // 负责拿文章列表数据</span><br><span class="line">      const res = await articlesListAPI(&#123;</span><br><span class="line">        channelId: this.cid,</span><br><span class="line">        timestamp: this.nextTime</span><br><span class="line">      &#125;)</span><br><span class="line">      console.log(res)</span><br><span class="line">      // 回来的数据进行预处理, 把时间转成多久多久之前</span><br><span class="line">      res.data.data.results.forEach((obj) =&gt; &#123;</span><br><span class="line">        obj.pubdate = this.timeAgo(obj.pubdate)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      // 如果无数据</span><br><span class="line">      if (res.data.data.results.length === 0) &#123;</span><br><span class="line">        this.finished = true // 告诉list组件直接底部显示没有更多数据</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.nextTime = res.data.data.pre_timestamp // 保存下一页数据的时间(做分页用)</span><br><span class="line">        this.articleList = [...this.articleList, ...res.data.data.results]</span><br><span class="line">        // 等待网络请求结果后</span><br><span class="line">        this.loading = false // 底部加载更多状态</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async created () &#123;</span><br><span class="line">    this.getArticleList()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>1.list 组件使用的注意点：</p><ul><li>list 组件触底后, 自动执行 load 事件和对应 onLoad 方法, 并把 loading 值改为 true</li><li>异步数据加载完毕, 合并数据, 把 loading 改为 false, 以后再让 list 自动执行 load 事件</li><li><p>异步数据加载完毕, 判断没有数据了, 把 finished 改为 true, 以后再也不出 load 事件</p><p>2.为何要把新数组和就数组拆开合并起来？ 为了让页面数据更多, 撑高 list 组件, 让用户继续滚动</p></li></ul></div><div class="tip home"><p>第十三、解决 bug：只要稍微滚动，再切换频道，created 与 onload 又会同时执行，就会导致 k 重复</p></div><div class="tip warning"><p>原因：immediate-check:仅仅是内部不要判断而已 ，而 onload 监听事件一直在执行，当上一个页面滚动条位置不为 0 时，切换到新的组件，这时候滚动条会向 0 的位置滚动，而同时异步的数据还没有渲染到 DOM 上，这时候 onload 再一次认为触底加载更多，于是乎触发事件。</p></div><p>解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 底部加载</span><br><span class="line">onLoad () &#123;</span><br><span class="line">    // 有第一页数据以后, onLoad再发请求</span><br><span class="line">    if (this.articleList.length &gt; 0) &#123;</span><br><span class="line">        this.getArticleList()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第十四、文章列表——手指往下拉, 顶部刷新</p></div><p>思路：<br><strong>1. 实现页面上下拉效果 - vant组件里的list组件</strong><br><strong>2. 刷新要把旧数组清空, 时间回到系统时间, 重新发起一次请求, 第一页数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// 用法：包裹在list外层</span><br><span class="line">&lt;van-pull-refresh v-model=&quot;isLoading&quot; @refresh=&quot;onRefresh&quot;&gt;</span><br><span class="line">      &lt;van-list</span><br><span class="line">        v-model=&quot;loading&quot;</span><br><span class="line">        :finished=&quot;finished&quot;</span><br><span class="line">        finished-text=&quot;没有更多了&quot;</span><br><span class="line">        @load=&quot;onLoad&quot;</span><br><span class="line">        offset=&quot;50&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!-- 文章列表 --&gt;</span><br><span class="line">        &lt;article-item</span><br><span class="line">          v-for=&quot;item in articleList&quot;</span><br><span class="line">          :key=&quot;item.art_id&quot;</span><br><span class="line">          :obj=&quot;item&quot;</span><br><span class="line">        &gt;&lt;/article-item&gt;</span><br><span class="line">      &lt;/van-list&gt;</span><br><span class="line">    &lt;/van-pull-refresh&gt;</span><br><span class="line">---------------------------------------------</span><br><span class="line">export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            // ...省略了其他变量(不要删除啊)</span><br><span class="line">            isLoading: false // 顶部刷新状态</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 顶部刷新事件方法</span><br><span class="line">        onRefresh () &#123;</span><br><span class="line">            this.nextTime = null</span><br><span class="line">      this.articleList = []</span><br><span class="line">      this.getArticleList()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br><span class="line">同时一定要注意，在getArticleList()方法中加入这句话，数据异步刷新完毕, 要关闭isLoading状态</span><br><span class="line">this.isLoading = false // 顶部加载状态关闭</span><br></pre></td></tr></table></figure><div class="tip "><p>未完待续。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（三）&quot;&gt;&lt;a href=&quot;#移动端项目总结（三）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（三）&quot;&gt;&lt;/a&gt;移动端项目总结（三）&lt;/h1&gt;&lt;div class=&quot;tip warning faa-horizontal an</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端项目总结（二）</title>
    <link href="https://tailante.github.io/posts/12f1.html"/>
    <id>https://tailante.github.io/posts/12f1.html</id>
    <published>2022-09-30T07:05:26.000Z</published>
    <updated>2022-09-30T12:43:27.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（二）"><a href="#移动端项目总结（二）" class="headerlink" title="移动端项目总结（二）"></a>移动端项目总结（二）</h1><div class="tip warning faa-horizontal animated faa-fast"><p>写在前面，只要修改了配置文件，一定要重启服务器！！！！</p></div><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><div class="tip home"><p>第一、搭建登陆页面，添加路由规则，并在 App.vue 中添加路由挂载点</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Login from &#x27;@/views/Login&#x27;</span><br><span class="line">const routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        redirect: &#x27;/login&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/login&#x27;,</span><br><span class="line">        component: Login</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><div class="tip warning"><p>一个注意点：可以先暂时将页面重定向至登录页，等后续首页功能开发后，重定向至首页</p></div><div class="tip home"><p>第二、根据 UI 设计图，在 Vant 组件库中找到对应组件（NavBar 导航，表单组件），铺设登陆页面</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 具体可查阅Vant组件库文档</span><br><span class="line">// 组件引入</span><br><span class="line">// 在main.js - 引入Vant组件 - NavBar导航 - 全局注册</span><br><span class="line">import &#123; NavBar &#125; from &#x27;vant&#x27;</span><br><span class="line">Vue.use(NavBar)</span><br><span class="line">------------------------------</span><br><span class="line">&lt;!-- 组件使用 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;van-nav-bar title=&quot;&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><details class="folding-tag" cyan open><summary> 知识点：修改组件库样式 </summary>              <div class='content'>              <p><span class='p red'>第一种方法</span>：利用开发者工具，找到对应标签的类名，进行样式的覆盖即可<br><span class='p red'>第二种方法</span>：在 Vant 组件库文档中，找到<strong><span class='p cyan'>定制主题</span></strong>选项，按需引入<br>步骤一：<br>在 babel.config.js 中配置按需引入样式源文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      &#x27;import&#x27;,</span><br><span class="line">      &#123;</span><br><span class="line">        libraryName: &#x27;vant&#x27;,</span><br><span class="line">        libraryDirectory: &#x27;es&#x27;,</span><br><span class="line">        // 指定样式路径</span><br><span class="line">        style: (name) =&gt; `$&#123;name&#125;/style/less`,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x27;vant&#x27;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意 babel6 不支持按需引入样式，请手动引入样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 引入全部样式</span><br><span class="line">import &#x27;vant/lib/index.less&#x27;;</span><br><span class="line"></span><br><span class="line">// 引入单个组件样式</span><br><span class="line">import &#x27;vant/lib/button/style/less&#x27;;</span><br></pre></td></tr></table></figure><p>步骤二：<br>使用 Less 提供的 modifyVars 即可对变量进行修改，如果 vue-cli 搭建的项目，可以在 vue.config.js 中进行配置<br>在 src 目录下新建的 styles 文件夹下建立一个 xxx.less 文件夹，用于修改想要变更的样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// vue.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      less: &#123;</span><br><span class="line">        // 若 less-loader 版本小于 6.0，请移除 lessOptions 这一级，直接配置选项。</span><br><span class="line">        lessOptions: &#123;</span><br><span class="line">          modifyVars: &#123;</span><br><span class="line">            // 第一种方式：直接覆盖变量（每次修改都要重启服务器）</span><br><span class="line">            &#x27;text-color&#x27;: &#x27;#111&#x27;,</span><br><span class="line">            &#x27;border-color&#x27;: &#x27;#eee&#x27;,</span><br><span class="line">            // 第二种方式：可以通过 less 文件覆盖（文件路径为绝对路径：不要手动写绝对路径, 用代码来动态获取, 请使用path.join()来进行路径的拼接）（不需要重启服务器）</span><br><span class="line">            hack: `true; @import &quot;$&#123;path.join(__dirname, &#x27;src/styles/cover.less&#x27;)&#125;&quot;;`</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">---------------------------------------</span><br><span class="line">// 在less 文件中设置</span><br><span class="line">@nav-bar-background-color:#007bff;</span><br><span class="line">@nav-bar-title-text-color:white;</span><br></pre></td></tr></table></figure>              </div>            </details><div class="tip warning faa-horizontal animated"><p>注意点一：博主认为，上述第一种方法适用于组件不复用的情况，因为在 style 标签具有 scoped 属性的情况下，只会作用于当前组件，而第二种方法适用于组件复用的情况，无论是直接覆盖变量，或者在 less 文件中覆盖，其修改的组件样式有可能被多处引用，从而导致牵一发而动全身。</p><p>注意点二：上述第一种方法有可能会出现不生效的情况，出现该情况的原因是：该选择器是组件内部的标签，并不是 template 模板中的根标签，在 style 标签具有 scoped 属性的情况下，scoped 尝试为其加入属性选择器来匹配当前页面，而只有在 template 模板中的根标签才能够被 scoped 选中，所以它选不中组件内部的标签。</p><p>解决办法：在选择器前面加上 /deep/ (/deep/ 会把属性选择器加到前面 利用后代选择器往里找)</p><p>/<em> /deep/ 就是把 data-v-hash 值选择器写到类名的前面 </em>/<br>/deep/ .van-nav-bar__title{<br>color: white;<br>}</p><p>注意点三：为什么不直接给组件设置 class 类名，因为组件属性虽然是 class, 但是也要看组件是否支持才可以（需要自己查阅文档）</p></div><div class="tip home"><p>第三、表单组件的正则校验</p></div><p>以下是使用例子，其中组件的属性与方法可以自行查阅文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 整个表单 --&gt;</span><br><span class="line">      &lt;van-form @submit=&quot;onSubmit&quot;&gt;</span><br><span class="line">        &lt;!-- name: 与 input name作用相同，数据传输标志 --&gt;</span><br><span class="line">        &lt;!-- rules 表单校验规则 --&gt;</span><br><span class="line">        &lt;!-- 支持正则校验 --&gt;</span><br><span class="line">        &lt;van-field v-model=&quot;user.mobile&quot;</span><br><span class="line">                   required</span><br><span class="line">                   name=&quot;mobile&quot;</span><br><span class="line">                   label=&quot;手机号&quot;</span><br><span class="line">                   placeholder=&quot;请输入手机号&quot;</span><br><span class="line">                   :rules=&quot;[&#123; required: true, message: &#x27;请输入11位手机号&#x27;, pattern: /^1[3-9]\d&#123;9&#125;$/ &#125;]&quot; /&gt;</span><br><span class="line">        &lt;van-field v-model=&quot;user.code&quot;</span><br><span class="line">                   required</span><br><span class="line">                   type=&quot;password&quot;</span><br><span class="line">                   name=&quot;code&quot;</span><br><span class="line">                   label=&quot;密码&quot;</span><br><span class="line">                   placeholder=&quot;请填写密码&quot;</span><br><span class="line">                   :rules=&quot;[&#123; required: true, message: &#x27;请填写6位密码&#x27;, pattern: /^\d&#123;6&#125;$/ &#125;]&quot; /&gt;</span><br><span class="line">        &lt;div style=&quot;margin: 16px;&quot;&gt;</span><br><span class="line">          &lt;!-- 信息按钮 type=&quot;info&quot; --&gt;</span><br><span class="line">          &lt;!-- native-type 原生 button 标签的 type 属性 --&gt;</span><br><span class="line">          &lt;van-button round</span><br><span class="line">                      block</span><br><span class="line">                      :loading=&quot;isLoading&quot;</span><br><span class="line">                      :disabled=&quot;isLoading&quot;</span><br><span class="line">                      type=&quot;info&quot;</span><br><span class="line">                      native-type=&quot;submit&quot;</span><br><span class="line">                      loading-text=&quot;登录中...&quot;&gt;提交&lt;/van-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/van-form&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>一个注意点：属性后无值的属性，默认值为 true</p></div><div class="tip home"><p>第四、查看接口文档，调用登录接口</p></div><p>在中 api/index.js - 定义登录接口方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 用户 - 登录</span><br><span class="line">export const loginAPI = (&#123; mobile, code &#125;) =&gt; &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;/v1_0/authorizations&#x27;,</span><br><span class="line">    method: &#x27;POST&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      mobile,</span><br><span class="line">      code</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中引入调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; loginAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">async onSubmit () &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        const res = await loginAPI(this.formLogin)</span><br><span class="line">        const &#123; token, refresh_token &#125; = res.data.data</span><br><span class="line">        console.log(token);</span><br><span class="line">        console.log(refresh_token);</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        console.error(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>一个注意点：axios 内部 自动把参数对象转换成 json 格式发后台，自动将 Content-Type：’application/json’ 配置好</p></div><div class="tip home"><p>第五、登录按钮优化，防止用户在网速慢的时候多次点击登录按钮</p></div><p>1.给按钮设置 loading 状态和 disabled 禁用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-button</span><br><span class="line">            round</span><br><span class="line">            block</span><br><span class="line">            type=&quot;info&quot;</span><br><span class="line">            native-type=&quot;submit&quot;</span><br><span class="line">            :loading=&quot;isLoding&quot;</span><br><span class="line">            :disabled=&quot;isLoding&quot;</span><br><span class="line">            loading-text=&quot;程序员拼命加载ing...&quot;&gt;登录&lt;/van-button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                // ...省略其他</span><br><span class="line">                isLoding: false // 加载状态</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.在网络请求开始的时候 isLoading = true,在网络请求结束的时候 isLoading = false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">async onSubmit () &#123;</span><br><span class="line">    this.isLoading = true</span><br><span class="line">    try &#123;</span><br><span class="line">        const res = await loginAPI(this.formLogin)</span><br><span class="line">        const &#123; token, refresh_token &#125; = res.data.data</span><br><span class="line">        // 可自行查阅 Vant 组件库 Notify 的用法</span><br><span class="line">        Notify(&#123; type: &#x27;success&#x27;, message: &#x27;登录成功&#x27; &#125;)</span><br><span class="line">        this.isLoading = false</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">      // 可自行查阅 Vant 组件库 Notify 的用法</span><br><span class="line">        Notify(&#123; type: &#x27;warning&#x27;, message: &#x27;手机号或密码错误&#x27; &#125;)</span><br><span class="line">        this.isLoading = false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第六、登录结果持久化，把 token 和 refresh_token 值保存到浏览器中</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 此文件 封装三个方法 专门用于操作token</span><br><span class="line">// 封装的目的： 代码分层方便清晰，修改方便</span><br><span class="line"></span><br><span class="line">const key = &#x27;xxx&#x27;</span><br><span class="line"></span><br><span class="line">// 设置</span><br><span class="line">export const setToken = token =&gt; localStorage.setItem(key, token)</span><br><span class="line"></span><br><span class="line">// 取出</span><br><span class="line">export const getToken = () =&gt; localStorage.getItem(key)</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">export const removeToken = () =&gt; localStorage.removeItem(key)</span><br></pre></td></tr></table></figure><div class="tip warning"><p>这里博主将本地存储方法封装为一个 js 文件，并将方法向外导出,哪一个组件需要使用，哪一个组件就可以引用，提高代码复用性的同时，增加了可维护性，如果后续需求改动，即可在该 js 文件中进行替换：如 localStorage 替换为 localSession</p></div><div class="tip "><p>未完待续。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（二）&quot;&gt;&lt;a href=&quot;#移动端项目总结（二）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（二）&quot;&gt;&lt;/a&gt;移动端项目总结（二）&lt;/h1&gt;&lt;div class=&quot;tip warning faa-horizontal an</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端项目总结（一）</title>
    <link href="https://tailante.github.io/posts/828b.html"/>
    <id>https://tailante.github.io/posts/828b.html</id>
    <published>2022-09-30T05:12:34.000Z</published>
    <updated>2022-10-01T01:14:09.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（一）"><a href="#移动端项目总结（一）" class="headerlink" title="移动端项目总结（一）"></a>移动端项目总结（一）</h1><div class="tip warning faa-horizontal animated faa-fast"><p>写在前面，只要修改了配置文件，一定要重启服务器！！！！</p></div><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ul><li>极客园移动端是一个<span class='p red'>IT资讯移动web应用</span>，有着和<strong>今日头条</strong>类似的资讯浏览体验。</li><li><span class='p red'>主要功能</span>：资讯列表、标签页切换，文章举报，频道管理、文章详情、关注功能、点赞功能、评论功能、搜索功能、登录功能、个人中心、编辑资料、小思同学</li><li>极客园可打包成一款移动 APP，后期结合 H5+可在 Hbuilder 打包成一款体验较好的手机应用。</li><li>项目在线浏览地址: <a href="http://123.57.109.30:4005/dist/">http://123.57.109.30:4005/dist/</a></li></ul><h2 id="项目技术点介绍"><a href="#项目技术点介绍" class="headerlink" title="项目技术点介绍"></a>项目技术点介绍</h2><ul><li>vuejs 中<ul><li>$nextTick 使用 (vue 更新 DOM 是异步的)</li><li>组件通信 (父, 子传递)</li><li>keep-alive 组件缓存</li></ul></li><li>vuex</li><li>vue-router<ul><li>懒加载 (对打包以后首页加载速度有提高)</li></ul></li><li>axios<ul><li>请求和响应拦截器（自动发送 token）</li><li>封装请求工具方法 (代码分层)</li></ul></li><li>vant 移动端组件库</li><li>socket.io-client<ul><li>服务器主动推送数据</li></ul></li><li>amfe-flexible<ul><li>移动端 rem 适配</li></ul></li></ul><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><div class="tip home"><p>第一、清空项目默认配置内容</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules # 安装的包</span><br><span class="line">├── public# 静态资源托管目录</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">└── src# 源码</span><br><span class="line">    ├── api#请求接口封装模块</span><br><span class="line">    └── index.js #封装请求方法</span><br><span class="line">    ├── assets#资源目录</span><br><span class="line">    ├── components#组件目录</span><br><span class="line">    ├── router#路由模块</span><br><span class="line">    └── index.js #路由对象</span><br><span class="line">    ├── store#Vuex容器模块</span><br><span class="line">    └── index.js #store对象</span><br><span class="line">    ├── styles #样式目录</span><br><span class="line">    ├── utils  #工具模块目录</span><br><span class="line">    ├── views  #视图组件目录</span><br><span class="line">    ├── App.vue#根组件</span><br><span class="line">    └── main.js#入口文件</span><br><span class="line">├── .browserslistrc # 浏览器的约定</span><br><span class="line">├── .editorconfig #对本项目要用到编辑器的约定</span><br><span class="line">├── .eslintrc.js #eslint</span><br><span class="line">├── .gitignore # git的忽略设置</span><br><span class="line">├── babel.config.js#babel配置文件</span><br><span class="line">├── package-lock.json#npm相关文件</span><br><span class="line">├── package.json#npm相关文件</span><br><span class="line">└── README.md#项目说明文件</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、增加新的配置文件，将请求均封装至一个模块，统一管理网络请求，不参与逻辑代码，方便后期维护</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- /api/index.js 存储请求函数模块</span><br><span class="line">- /styles 样式文件模块</span><br><span class="line">- /utils 工具函数模块</span><br></pre></td></tr></table></figure><div class="tip home"><p>第三、按需引入 Vant 组件库</p></div><span class='p red'>babel-plugin-import</span> 是一款 babel 插件，它会在编译过程中将 import 的写法自动转换为按需引入的方式。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 安装插件</span><br><span class="line">npm i babel-plugin-import -D</span><br><span class="line"></span><br><span class="line">// 对于使用 babel7 的用户，可以在 babel.config.js 中配置</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [&#x27;import&#x27;, &#123;</span><br><span class="line">      libraryName: &#x27;vant&#x27;,</span><br><span class="line">      libraryDirectory: &#x27;es&#x27;,</span><br><span class="line">      style: true</span><br><span class="line">    &#125;, &#x27;vant&#x27;]</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 接着你可以在代码中直接引入 Vant 组件</span><br><span class="line">// 插件会自动将代码转化为方式二中的按需引入形式</span><br><span class="line">import &#123; Button &#125; from &#x27;vant&#x27;;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated"><p>注意：博主推荐自动按需引入插件，一方面它避免了一次性导入所有组件，增加代码包体积，而另一方面也避免了每次手动引入组件总是还要再引入组件配套的 css 而造成代码冗余。</p></div><div class="tip home"><p>第四、下载 amfe-flexible、postcss 和postcss-pxtorem@5.1.1 进行移动端适配</p></div><p>根目录下创建 postcss.config.js 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">plugins: &#123;</span><br><span class="line">    &#x27;postcss-pxtorem&#x27;: &#123;</span><br><span class="line">      // 能够把所有元素的px单位转成Rem</span><br><span class="line">      // rootValue: 转换px的基准值。</span><br><span class="line">      // 编码时, 一个元素宽是75px，则换成rem之后就是2rem</span><br><span class="line">      rootValue: 37.5,</span><br><span class="line">      propList: [&#x27;*&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated"><p>一个注意点：postcss 只能转换 style 里面的px  行内的样式它无法进行转换 所以只能自己手动利用rem计算</p></div><div class="tip home"><p>第五、封装 axios 函数，统一配置、便于管理</p></div><p>创建 utils/request.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 基于 axios 封装的请求模块</span><br><span class="line">import theAxios from &#x27;axios&#x27;</span><br><span class="line">// 新建一个新的axios实例</span><br><span class="line">const axios = theAxios.create(&#123;</span><br><span class="line">  baseURL: &#x27;请求的URL基地址&#x27;,</span><br><span class="line">  timeout: 20000 // 20秒超时时间</span><br><span class="line">&#125;)</span><br><span class="line">// 采用对象解构赋值的形式进行参数传递，同时利用函数返回值将 axios 导出</span><br><span class="line">export default (&#123; url, method = &#x27;GET&#x27;, params = &#123;&#125;, data = &#123;&#125;, headers = &#123;&#125; &#125;) =&gt; &#123;</span><br><span class="line">  return axios(&#123;</span><br><span class="line">    url,</span><br><span class="line">    method,</span><br><span class="line">    params,</span><br><span class="line">    data,</span><br><span class="line">    headers</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated"><p>上述代码使用函数+return 导出 axios 的好处是：<br>以后换库, 只需要改这里, 逻辑页面不用动, 保证代码的复用性和独立性(高内聚低耦合)<br>return $.ajax({<br>&nbsp;&nbsp;url: url,<br>&nbsp;&nbsp;type: method,<br>&nbsp;&nbsp;data: data,<br>&nbsp;&nbsp;header: headers<br>})</p></div><div class="tip home"><p>第六、封装接口</p></div><p>api/index.js 定义各种接口方法<br>创建 utils/request.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import request from &#x27;@/utils/request&#x27;</span><br><span class="line">// 接口方法, 只负责调用一个接口, 返回一个Promise对象</span><br><span class="line">export const oneAPI = () =&gt; &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;url地址&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">export const twoAPI = () =&gt; &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;url地址&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 组件导入调用</span><br><span class="line">import &#123; oneAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">async function myFn()&#123;</span><br><span class="line">    const res = await allChannelListAPI()</span><br><span class="line">    console.log(res) // 后台返回的数据</span><br><span class="line">&#125;</span><br><span class="line">// 同时，可使用try+catch来捕获promise失败的结果</span><br><span class="line">myFn();</span><br></pre></td></tr></table></figure><div class="tip "><p>未完待续。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（一）&quot;&gt;&lt;a href=&quot;#移动端项目总结（一）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（一）&quot;&gt;&lt;/a&gt;移动端项目总结（一）&lt;/h1&gt;&lt;div class=&quot;tip warning faa-horizontal an</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于搭建本页面</title>
    <link href="https://tailante.github.io/posts/db1f.html"/>
    <id>https://tailante.github.io/posts/db1f.html</id>
    <published>2022-09-29T13:17:54.000Z</published>
    <updated>2022-09-29T15:12:06.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录博客的第一次"><a href="#记录博客的第一次" class="headerlink" title="记录博客的第一次"></a>记录博客的第一次</h1><h2 id="小白的懵懂"><a href="#小白的懵懂" class="headerlink" title="小白的懵懂"></a>小白的懵懂</h2><p>对于与一个编程小白来说，这次搭建博客真的是<span class='p red'>太不容易了</span>，以下便是这篇博客出生的艰辛历程。</p><p>首先，我去百度搜索了 <strong>hexo 的官方文档</strong>，来进行安装。在全局安装完以后，下一步就是创建，然而我呆头呆脑的在一个 <wavy>非空的文件夹</wavy> 里进行创建，果不其然报错了，就这个错误我记得还浪费掉许多时间去解决它 QAQ。。<span class='p cyan'>(后来才发现需要一个空文件夹)</span></p><p>在创建完一个 hexo 项目以后，就进行配置，什么主标题啊，副标题啊，关键字啊，都配置好了，又学习了一些常用命令，然后就发现不对劲，就感觉这个默认主题有点丑啊哈哈，<span class='p red'>就打算换一个主题</span>，由于我的疏忽，我并<span class='p red'>没有看到</span> hexo 官方文档中有主题这个选项，但是我也够聪明，直接去中国知名的哔哩哔哩大学去寻找如何为 hexo 更换主体，我翻到了一位<span class='p cyan'>UP 主的个人博客搭建教程，讲道理，视频真的是保姆级别</span> ，奈何我这马马虎虎，活生生把一天的工作量硬是拖到两天。</p><p>由于我本人是自学前端的嘛，所以hexo所依赖的Git与Node.js我平时用的挺多的，所以UP主有关这些<wavy>依赖的配置</wavy>我都是快进，直接跳到了配置主题部分，就是这个操作把我坑惨了。。</p><h2 id="自负的开始"><a href="#自负的开始" class="headerlink" title="自负的开始"></a>自负的开始</h2><p>首先我去 <strong>github</strong> 上将主题代码拉到本地，然后在自己 <strong>hexo 项目</strong>的 <strong>_config.yml</strong> 上将 <strong>theme</strong> 修改为 <strong>butterfly</strong> ，然后运行，然后就报错啦哈哈，因为项目文件夹的名字是 <strong>hexo-theme-butterfly</strong><span class='p red'>(讲道理从这开始已经就不对劲了)</span>,于是乎我又把 <strong>theme</strong> 修改为 <strong>hexo-theme-butterfly</strong>，再跑一变，这次没有报错，本地可以运行，于是我跟着视频就继续配置功能，配置到本地搜索功能的时候，我就发现<span class='p red'>搜索标签根本没有渲染到html上</span>，屏幕里根本就没有这个搜索按钮，但是我以为这可能是服务器还没解析好，于是继续跟着视频配置，直到后来<span class='p red'>连音乐播放器都没有显示</span>，我就感觉不对劲了，然而我以为靠我自己可以解决，但浪费了一下午还是没能解决，十分无奈找到UP主，请它出山帮忙，内时候我还没部署到<strong>github</strong>，然后就立刻建立仓库把这个项目部署上去了，好家伙部署以后更迷糊，连css样式都没了,UP主看完都想刀了我，问我有没有<span class='p red'>好好看视频</span>，后来我又从头到尾仔细看了一边，才发现我快进的地方都是关键的地方QAQ</p><h2 id="好好改造，重新做人"><a href="#好好改造，重新做人" class="headerlink" title="好好改造，重新做人"></a>好好改造，重新做人</h2><div class="tip warning"><p>第一，我从github上拉下来的代码，是测试版的，所以文件名才显示hexo-theme-butterfly，如果直接复制UP主博客里的代码下载以后的主题文件就是butterfly正式版。</p></div><div class="tip warning"><p>第二，在github建立仓库时，我的仓库名是瞎起的，正确的应该是自己的github用户名.github.io。</p></div><div class="tip warning"><p>第三，hexo有严格的格式要求，空格和缩进哪怕多一个少一个都可能报错。</p></div><div class="tip warning"><p>第四，要好好看文档，其实许多答案都在文档里，所有的东西只有自己配置一遍才懂——安知鱼。</p></div><h2 id="由衷的感谢"><a href="#由衷的感谢" class="headerlink" title="由衷的感谢"></a>由衷的感谢</h2><p>最后，十分感谢安知鱼UP主为我博客的建设提出的悉心指导，下面是大佬的博客，欢迎去那里取经<br><div class="tip error"><p><a href="https://anzhiy.cn/">https://anzhiy.cn/</a></p></div></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录博客的第一次&quot;&gt;&lt;a href=&quot;#记录博客的第一次&quot; class=&quot;headerlink&quot; title=&quot;记录博客的第一次&quot;&gt;&lt;/a&gt;记录博客的第一次&lt;/h1&gt;&lt;h2 id=&quot;小白的懵懂&quot;&gt;&lt;a href=&quot;#小白的懵懂&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tailante.github.io/posts/3eeb.html"/>
    <id>https://tailante.github.io/posts/3eeb.html</id>
    <published>2022-09-28T12:04:23.503Z</published>
    <updated>2022-09-29T03:32:08.265Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><div class="tip "><p>default</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
