<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>接化发の小破站</title>
  
  <subtitle>笑着打代码</subtitle>
  <link href="https://tailante.github.io/atom.xml" rel="self"/>
  
  <link href="https://tailante.github.io/"/>
  <updated>2022-09-30T06:44:31.797Z</updated>
  <id>https://tailante.github.io/</id>
  
  <author>
    <name>接化发</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端项目总结（一）</title>
    <link href="https://tailante.github.io/posts/828b.html"/>
    <id>https://tailante.github.io/posts/828b.html</id>
    <published>2022-09-30T05:12:34.000Z</published>
    <updated>2022-09-30T06:44:31.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（一）"><a href="#移动端项目总结（一）" class="headerlink" title="移动端项目总结（一）"></a>移动端项目总结（一）</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ul><li>极客园移动端是一个<span class='p red'>IT资讯移动web应用</span>，有着和<strong>今日头条</strong>类似的资讯浏览体验。</li><li><span class='p red'>主要功能</span>：资讯列表、标签页切换，文章举报，频道管理、文章详情、关注功能、点赞功能、评论功能、搜索功能、登录功能、个人中心、编辑资料、小思同学</li><li>极客园可打包成一款移动 APP，后期结合 H5+可在 Hbuilder 打包成一款体验较好的手机应用。</li><li>项目在线浏览地址: <a href="http://123.57.109.30:4005/dist/">http://123.57.109.30:4005/dist/</a></li></ul><h2 id="项目技术点介绍"><a href="#项目技术点介绍" class="headerlink" title="项目技术点介绍"></a>项目技术点介绍</h2><ul><li>vuejs 中<ul><li>$nextTick 使用 (vue 更新 DOM 是异步的)</li><li>组件通信 (父, 子传递)</li><li>keep-alive 组件缓存</li></ul></li><li>vuex</li><li>vue-router<ul><li>懒加载 (对打包以后首页加载速度有提高)</li></ul></li><li>axios<ul><li>请求和响应拦截器（自动发送 token）</li><li>封装请求工具方法 (代码分层)</li></ul></li><li>vant 移动端组件库</li><li>socket.io-client<ul><li>服务器主动推送数据</li></ul></li><li>amfe-flexible<ul><li>移动端 rem 适配</li></ul></li></ul><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><div class="tip home"><p>第一、清空项目默认配置内容</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules # 安装的包</span><br><span class="line">├── public# 静态资源托管目录</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">└── src# 源码</span><br><span class="line">    ├── api#请求接口封装模块</span><br><span class="line">    └── index.js #封装请求方法</span><br><span class="line">    ├── assets#资源目录</span><br><span class="line">    ├── components#组件目录</span><br><span class="line">    ├── router#路由模块</span><br><span class="line">    └── index.js #路由对象</span><br><span class="line">    ├── store#Vuex容器模块</span><br><span class="line">    └── index.js #store对象</span><br><span class="line">    ├── styles #样式目录</span><br><span class="line">    ├── utils  #工具模块目录</span><br><span class="line">    ├── views  #视图组件目录</span><br><span class="line">    ├── App.vue#根组件</span><br><span class="line">    └── main.js#入口文件</span><br><span class="line">├── .browserslistrc # 浏览器的约定</span><br><span class="line">├── .editorconfig #对本项目要用到编辑器的约定</span><br><span class="line">├── .eslintrc.js #eslint</span><br><span class="line">├── .gitignore # git的忽略设置</span><br><span class="line">├── babel.config.js#babel配置文件</span><br><span class="line">├── package-lock.json#npm相关文件</span><br><span class="line">├── package.json#npm相关文件</span><br><span class="line">└── README.md#项目说明文件</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、增加新的配置文件，将请求均封装至一个模块，统一管理网络请求，不参与逻辑代码，方便后期维护</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- /api/index.js 存储请求函数模块</span><br><span class="line">- /styles 样式文件模块</span><br><span class="line">- /utils 工具函数模块</span><br></pre></td></tr></table></figure><div class="tip home"><p>第三、按需引入 Vant 组件库</p></div><div class="tip home"><p>第四、下载 amfe-flexible、postcss 和postcss-pxtorem@5.1.1 进行移动端适配</p></div><p>根目录下创建 postcss.config.js 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">plugins: &#123;</span><br><span class="line">    &#x27;postcss-pxtorem&#x27;: &#123;</span><br><span class="line">      // 能够把所有元素的px单位转成Rem</span><br><span class="line">      // rootValue: 转换px的基准值。</span><br><span class="line">      // 编码时, 一个元素宽是75px，则换成rem之后就是2rem</span><br><span class="line">      rootValue: 37.5,</span><br><span class="line">      propList: [&#x27;*&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第五、封装 axios 函数，统一配置、便于管理</p></div><p>创建 utils/request.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 基于 axios 封装的请求模块</span><br><span class="line">import theAxios from &#x27;axios&#x27;</span><br><span class="line">// 新建一个新的axios实例</span><br><span class="line">const axios = theAxios.create(&#123;</span><br><span class="line">  baseURL: &#x27;请求的URL基地址&#x27;,</span><br><span class="line">  timeout: 20000 // 20秒超时时间</span><br><span class="line">&#125;)</span><br><span class="line">// 采用对象解构赋值的形式进行参数传递，同时利用函数返回值将 axios 导出</span><br><span class="line">export default (&#123; url, method = &#x27;GET&#x27;, params = &#123;&#125;, data = &#123;&#125;, headers = &#123;&#125; &#125;) =&gt; &#123;</span><br><span class="line">  return axios(&#123;</span><br><span class="line">    url,</span><br><span class="line">    method,</span><br><span class="line">    params,</span><br><span class="line">    data,</span><br><span class="line">    headers</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated"><p>上述代码使用函数+return 导出 axios 的好处是：<br>以后换库, 只需要改这里, 逻辑页面不用动, 保证代码的复用性和独立性(高内聚低耦合)<br>return $.ajax({<br>&nbsp;&nbsp;url: url,<br>&nbsp;&nbsp;type: method,<br>&nbsp;&nbsp;data: data,<br>&nbsp;&nbsp;header: headers<br>})</p></div><div class="tip home"><p>第六、封装接口</p></div><p>api/index.js 定义各种接口方法<br>创建 utils/request.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import request from &#x27;@/utils/request&#x27;</span><br><span class="line">// 接口方法, 只负责调用一个接口, 返回一个Promise对象</span><br><span class="line">export const oneAPI = () =&gt; &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;url地址&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">export const twoAPI = () =&gt; &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;url地址&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 组件导入调用</span><br><span class="line">import &#123; oneAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">async function myFn()&#123;</span><br><span class="line">    const res = await allChannelListAPI()</span><br><span class="line">    console.log(res) // 后台返回的数据</span><br><span class="line">&#125;</span><br><span class="line">// 同时，可使用try+catch来捕获promise失败的结果</span><br><span class="line">myFn();</span><br></pre></td></tr></table></figure><div class="tip "><p>未完待续。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（一）&quot;&gt;&lt;a href=&quot;#移动端项目总结（一）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（一）&quot;&gt;&lt;/a&gt;移动端项目总结（一）&lt;/h1&gt;&lt;h2 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于搭建本页面</title>
    <link href="https://tailante.github.io/posts/db1f.html"/>
    <id>https://tailante.github.io/posts/db1f.html</id>
    <published>2022-09-29T13:17:54.000Z</published>
    <updated>2022-09-29T15:12:06.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录博客的第一次"><a href="#记录博客的第一次" class="headerlink" title="记录博客的第一次"></a>记录博客的第一次</h1><h2 id="小白的懵懂"><a href="#小白的懵懂" class="headerlink" title="小白的懵懂"></a>小白的懵懂</h2><p>对于与一个编程小白来说，这次搭建博客真的是<span class='p red'>太不容易了</span>，以下便是这篇博客出生的艰辛历程。</p><p>首先，我去百度搜索了 <strong>hexo 的官方文档</strong>，来进行安装。在全局安装完以后，下一步就是创建，然而我呆头呆脑的在一个 <wavy>非空的文件夹</wavy> 里进行创建，果不其然报错了，就这个错误我记得还浪费掉许多时间去解决它 QAQ。。<span class='p cyan'>(后来才发现需要一个空文件夹)</span></p><p>在创建完一个 hexo 项目以后，就进行配置，什么主标题啊，副标题啊，关键字啊，都配置好了，又学习了一些常用命令，然后就发现不对劲，就感觉这个默认主题有点丑啊哈哈，<span class='p red'>就打算换一个主题</span>，由于我的疏忽，我并<span class='p red'>没有看到</span> hexo 官方文档中有主题这个选项，但是我也够聪明，直接去中国知名的哔哩哔哩大学去寻找如何为 hexo 更换主体，我翻到了一位<span class='p cyan'>UP 主的个人博客搭建教程，讲道理，视频真的是保姆级别</span> ，奈何我这马马虎虎，活生生把一天的工作量硬是拖到两天。</p><p>由于我本人是自学前端的嘛，所以hexo所依赖的Git与Node.js我平时用的挺多的，所以UP主有关这些<wavy>依赖的配置</wavy>我都是快进，直接跳到了配置主题部分，就是这个操作把我坑惨了。。</p><h2 id="自负的开始"><a href="#自负的开始" class="headerlink" title="自负的开始"></a>自负的开始</h2><p>首先我去 <strong>github</strong> 上将主题代码拉到本地，然后在自己 <strong>hexo 项目</strong>的 <strong>_config.yml</strong> 上将 <strong>theme</strong> 修改为 <strong>butterfly</strong> ，然后运行，然后就报错啦哈哈，因为项目文件夹的名字是 <strong>hexo-theme-butterfly</strong><span class='p red'>(讲道理从这开始已经就不对劲了)</span>,于是乎我又把 <strong>theme</strong> 修改为 <strong>hexo-theme-butterfly</strong>，再跑一变，这次没有报错，本地可以运行，于是我跟着视频就继续配置功能，配置到本地搜索功能的时候，我就发现<span class='p red'>搜索标签根本没有渲染到html上</span>，屏幕里根本就没有这个搜索按钮，但是我以为这可能是服务器还没解析好，于是继续跟着视频配置，直到后来<span class='p red'>连音乐播放器都没有显示</span>，我就感觉不对劲了，然而我以为靠我自己可以解决，但浪费了一下午还是没能解决，十分无奈找到UP主，请它出山帮忙，内时候我还没部署到<strong>github</strong>，然后就立刻建立仓库把这个项目部署上去了，好家伙部署以后更迷糊，连css样式都没了,UP主看完都想刀了我，问我有没有<span class='p red'>好好看视频</span>，后来我又从头到尾仔细看了一边，才发现我快进的地方都是关键的地方QAQ</p><h2 id="好好改造，重新做人"><a href="#好好改造，重新做人" class="headerlink" title="好好改造，重新做人"></a>好好改造，重新做人</h2><div class="tip warning"><p>第一，我从github上拉下来的代码，是测试版的，所以文件名才显示hexo-theme-butterfly，如果直接复制UP主博客里的代码下载以后的主题文件就是butterfly正式版。</p></div><div class="tip warning"><p>第二，在github建立仓库时，我的仓库名是瞎起的，正确的应该是自己的github用户名.github.io。</p></div><div class="tip warning"><p>第三，hexo有严格的格式要求，空格和缩进哪怕多一个少一个都可能报错。</p></div><div class="tip warning"><p>第四，要好好看文档，其实许多答案都在文档里，所有的东西只有自己配置一遍才懂——安知鱼。</p></div><h2 id="由衷的感谢"><a href="#由衷的感谢" class="headerlink" title="由衷的感谢"></a>由衷的感谢</h2><p>最后，十分感谢安知鱼UP主为我博客的建设提出的悉心指导，下面是大佬的博客，欢迎去那里取经<br><div class="tip error"><p><a href="https://anzhiy.cn/">https://anzhiy.cn/</a></p></div></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录博客的第一次&quot;&gt;&lt;a href=&quot;#记录博客的第一次&quot; class=&quot;headerlink&quot; title=&quot;记录博客的第一次&quot;&gt;&lt;/a&gt;记录博客的第一次&lt;/h1&gt;&lt;h2 id=&quot;小白的懵懂&quot;&gt;&lt;a href=&quot;#小白的懵懂&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tailante.github.io/posts/3eeb.html"/>
    <id>https://tailante.github.io/posts/3eeb.html</id>
    <published>2022-09-28T12:04:23.503Z</published>
    <updated>2022-09-29T03:32:08.265Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><div class="tip "><p>default</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
