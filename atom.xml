<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>接化发の小破站</title>
  
  <subtitle>笑着打代码</subtitle>
  <link href="https://tailante.github.io/atom.xml" rel="self"/>
  
  <link href="https://tailante.github.io/"/>
  <updated>2022-10-10T14:46:39.640Z</updated>
  <id>https://tailante.github.io/</id>
  
  <author>
    <name>接化发</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS真的太随便了</title>
    <link href="https://tailante.github.io/posts/7f8a.html"/>
    <id>https://tailante.github.io/posts/7f8a.html</id>
    <published>2022-10-10T14:41:32.000Z</published>
    <updated>2022-10-10T14:46:39.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从未见过如此自由的语言"><a href="#从未见过如此自由的语言" class="headerlink" title="从未见过如此自由的语言"></a>从未见过如此自由的语言</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><div class="tip home"><ol><li>JavaScript数组中的默认存储值是undefined，其它编程语言数组的默认存储值是0或者是垃圾数据</li></ol></div><div class="tip home"><ol><li>与其它的编程语言不同，JavaScript可以访问数组中不存在的索引，会返回undefined，而其它的编程语言会报错或返回垃圾数据</li></ol></div><div class="tip home"><ol><li>JavaScript可以存储不同类型的数据，而其它的编程语言只能存储一种数据类型的数据</li></ol></div><div class="tip home"><ol><li>当JavaScript中数组的存储空间不够用时，它会自动扩容，而其它的语言数组的大小是固定的，一旦定义了，就无法改变</li></ol></div><div class="tip home"><ol><li>JavaScript中分配给数组的存储空间是不连续的，而其他编程语言中分配给数组的存储空间是连续的</li></ol></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从未见过如此自由的语言&quot;&gt;&lt;a href=&quot;#从未见过如此自由的语言&quot; class=&quot;headerlink&quot; title=&quot;从未见过如此自由的语言&quot;&gt;&lt;/a&gt;从未见过如此自由的语言&lt;/h1&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端项目总结（八）</title>
    <link href="https://tailante.github.io/posts/72ee.html"/>
    <id>https://tailante.github.io/posts/72ee.html</id>
    <published>2022-10-04T08:29:13.000Z</published>
    <updated>2022-10-04T13:53:45.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目优化"><a href="#移动端项目优化" class="headerlink" title="移动端项目优化"></a>移动端项目优化</h1><h2 id="优化——路由-懒加载"><a href="#优化——路由-懒加载" class="headerlink" title="优化——路由-懒加载"></a>优化——路由-懒加载</h2><div class="tip home"><p>第一、运行时, network 里禁用缓存, 观察 app.js 大小</p></div><div class="tip home"><p>第二、路由懒加载 - 查看文档: <a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html">https://router.vuejs.org/zh/guide/advanced/lazy-loading.html</a></p></div><div class="tip home"><p>第三、使用</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">component: Login</span><br><span class="line">// 改成这个写法</span><br><span class="line">component: () =&gt; import(&#x27;@/views/Login.vue&#x27;)</span><br></pre></td></tr></table></figure><div class="tip home"><p>第四、再次运行后观察app.js的大小</p></div><div class="tip warning"><p>路由拦截器, 可以让页面不上来都被引入到webpack里一起打包插入到浏览器运行,等待使用时, 再去循环对应页面组件,为了让首页渲染更快</p><p>路由懒加载,路由规则匹配后, 再加载对应js代码</p></div><h2 id="优化——路由-全局守卫——登录成功时-不允许切换路径进入登录页面"><a href="#优化——路由-全局守卫——登录成功时-不允许切换路径进入登录页面" class="headerlink" title="优化——路由-全局守卫——登录成功时, 不允许切换路径进入登录页面"></a>优化——路由-全局守卫——登录成功时, 不允许切换路径进入登录页面</h2><div class="tip home"><p>方法一、全局前置守卫判断</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  // 有token, 不能去登录页</span><br><span class="line">  // 无token, 需要用户&quot;权限&quot;的才需要去登录页</span><br><span class="line">  if (store.state.token.length &gt; 0 &amp;&amp; to.path === &#x27;/login&#x27;) &#123;</span><br><span class="line">    // 证明有token-已经登录了</span><br><span class="line">    next(false) // 阻止跳转原地呆着</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip home"><p>方法二、路由独享守卫</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &#x27;/login&#x27;,</span><br><span class="line">    component: () =&gt; import(/* webpackChunkName: &quot;Login&quot; */ &#x27;@/views/Login&#x27;),</span><br><span class="line">    beforeEnter (to, from, next) &#123;</span><br><span class="line">      if (store.state.token.length &gt; 0) &#123; // vuex里有token(代表登录过, 但是一定要注意过期和主动退出要先清除vuex和本地的token, 让其跳转登录页)</span><br><span class="line">        return next(false)</span><br><span class="line">      &#125;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="优化——token续签——用户无感知重新登陆，登陆一次终身有效（类似微信、qq）"><a href="#优化——token续签——用户无感知重新登陆，登陆一次终身有效（类似微信、qq）" class="headerlink" title="优化——token续签——用户无感知重新登陆，登陆一次终身有效（类似微信、qq）"></a>优化——token续签——用户无感知重新登陆，登陆一次终身有效（类似微信、qq）</h2><div class="tip home"><p>第一、定义刷新token的接口方法</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 用户 - 更新token</span><br><span class="line">export const refreshTokenAPI = () =&gt; request(&#123;</span><br><span class="line">  url: &#x27;/v1_0/authorizations&#x27;,</span><br><span class="line">  method: &#x27;PUT&#x27;,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Authorization: `Bearer $&#123;store.state.refresh_token&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二 、在响应拦截器401处, 调用重新请求token的接口</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 添加响应拦截器</span><br><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">  // 2xx 范围内的状态码都会触发该函数。</span><br><span class="line">  // 对响应数据做点什么</span><br><span class="line">  return response</span><br><span class="line">&#125;, async function (error) &#123;</span><br><span class="line">  // 超出 2xx 范围的状态码都会触发该函数。</span><br><span class="line">  // 对响应错误做点什么</span><br><span class="line">  // 只有401才代表身份过期，需要重新登陆</span><br><span class="line">  if (error.response.status === 401) &#123;</span><br><span class="line">    // 为了拿到路由对象，直接去上面引入</span><br><span class="line">    Notify(&#123; type: &#x27;warning&#x27;, message: &#x27;身份认证过期，请重新登陆&#x27; &#125;)</span><br><span class="line">    // 清空token 才能让路由守卫判断失效 放行</span><br><span class="line">    removeToken()</span><br><span class="line">    // 方式一：用户有感知 直接跳转</span><br><span class="line">    // router.replace(&#x27;/login&#x27;)</span><br><span class="line">    // 方式二：利用refresh_token重新获取 用户无感知</span><br><span class="line">    const res = await getNewToken()</span><br><span class="line">    // 把新token存本地</span><br><span class="line">    setToken(res.data.data.token)</span><br><span class="line">    // 同时更新到请求头</span><br><span class="line">    error.config.headers.Authorization = &#x27;Bearer &#x27; + res.data.data.token</span><br><span class="line">    // 未完成的请求再次发起    error.config 是上一次请求的配置对象</span><br><span class="line">    // 结果promise对象会 return 到原本逻辑页面调用的地方</span><br><span class="line">    return axios(error.config)</span><br><span class="line">  &#125; else if (error.response.status === 500 &amp;&amp; error.config.url === &#x27;/v1_0/authorizations&#x27; &amp;&amp; error.config.method === &#x27;put&#x27;) &#123;</span><br><span class="line">    // 刷新的 refresh 也过期了  多重条件锁定是 refresh过期</span><br><span class="line">    localStorage.clear() // 清空所有</span><br><span class="line">    router.replace(&#x27;/login&#x27;) // 跳转页面</span><br><span class="line">  &#125;</span><br><span class="line">  return Promise.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="优化——一个api-index-js-有几百行代码-不便于管理——分散到多个js文件里-再引入回到统一导出"><a href="#优化——一个api-index-js-有几百行代码-不便于管理——分散到多个js文件里-再引入回到统一导出" class="headerlink" title="优化——一个api/index.js, 有几百行代码, 不便于管理——分散到多个js文件里, 再引入回到统一导出"></a>优化——一个api/index.js, 有几百行代码, 不便于管理——分散到多个js文件里, 再引入回到统一导出</h2><div class="tip home"><p>export * from ‘模块’ (导入所有并再以相同方式导出)</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// api/index.js如下</span><br><span class="line"></span><br><span class="line">export * from &#x27;./reports&#x27; // 反馈列表数据</span><br><span class="line">export * from &#x27;./ArticleDetail&#x27; // 文章详情相关</span><br><span class="line">export * from &#x27;./Home&#x27; // 首页(频道)相关, 首页文章列表</span><br><span class="line">export * from &#x27;./Login&#x27; // 登录相关</span><br><span class="line">export * from &#x27;./Search&#x27; // 搜索相关</span><br><span class="line">export * from &#x27;./User&#x27; / 用户相关</span><br><span class="line"></span><br><span class="line">// export 文档: https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export</span><br></pre></td></tr></table></figure><h2 id="优化——组件缓存——防止组件频繁创建和销毁，实现组件的状态保持"><a href="#优化——组件缓存——防止组件频繁创建和销毁，实现组件的状态保持" class="headerlink" title="优化——组件缓存——防止组件频繁创建和销毁，实现组件的状态保持"></a>优化——组件缓存——防止组件频繁创建和销毁，实现组件的状态保持</h2><div class="tip home"><p>在<strong>App.vue</strong>中的router-view外层套上一个keep-alive组件</p></div><p><strong>缓存的一级路由页面切换不被释放, 但是首页还是会重新请求数据</strong></p><div class="tip home"><p>在<strong>Layout.vue</strong>中的router-view外层套上一个keep-alive组件</p></div><p><strong>这次Home和User页面都被缓存了(二级路由也要管)</strong></p><div class="tip home"><p>但发现<strong>搜索页面</strong>和<strong>详情页面</strong>多被缓存起来了 (多次进入不同的文章, 发现都是同一个文章详情)</p></div><div class="tip home"><p>对router-view使用exclude属性来区别, 哪些页面组件可以缓存</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 特别注意exclude里是组件的name名字(跟路由没什么关系)</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;keep-alive :exclude=&quot;[&#x27;ArticleDetail&#x27;, &#x27;Login&#x27;, &#x27;Search&#x27;, &#x27;SearchResult&#x27;]&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="优化——头像不更新问题——User-vue被缓存了-所以改了头像回到User页面-created里获取用户资料接口不会执行"><a href="#优化——头像不更新问题——User-vue被缓存了-所以改了头像回到User页面-created里获取用户资料接口不会执行" class="headerlink" title="优化——头像不更新问题——User.vue被缓存了, 所以改了头像回到User页面, created里获取用户资料接口不会执行"></a>优化——头像不更新问题——User.vue被缓存了, 所以改了头像回到User页面, created里获取用户资料接口不会执行</h2><div class="tip home"><p>解决方案1: 把created换成activated钩子函数即可</p></div><div class="tip home"><p>解决方案2: UserEdit.vue修改头像成功后, 更新到vuex中, User页面使用的vuex数据也受到更新</p></div><p><strong>1.vuex中定义mutations修改头像</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">updatePhoto (state, photo) &#123;</span><br><span class="line">    state.user.photo = photo</span><br><span class="line">    localStorage.setItem(&#x27;user&#x27;, JSON.stringify(state.user))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.UserEdit.vue映射, 调用传成功头像覆盖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([&#x27;updatePhoto&#x27;]),</span><br><span class="line"></span><br><span class="line">    async onFileChange (ev) &#123;</span><br><span class="line">      if (ev.target.files.length === 0) return</span><br><span class="line">      const fd = new FormData()</span><br><span class="line">      fd.append(&#x27;photo&#x27;, ev.target.files[0])</span><br><span class="line">      const res = await updatePhotoAPI(fd)</span><br><span class="line">      console.log(res)</span><br><span class="line">      this.profile.photo = res.data.data.photo</span><br><span class="line">      this.updatePhoto(res.data.data.photo) // 同步头像给vuex</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>引申 - 用户名字修改也是同理的</p></div><h2 id="优化——文章详情页里代码片段高亮效果"><a href="#优化——文章详情页里代码片段高亮效果" class="headerlink" title="优化——文章详情页里代码片段高亮效果"></a>优化——文章详情页里代码片段高亮效果</h2><div class="tip home"><p>想要让代码高亮, 必须在<strong>后台发布文章</strong>时, 就要把代码分段用pre+code标签包裹</p></div><div class="tip home"><p>前端可以通过获取这些标签名/指定类名, 分别给予相应样式</p></div><p><strong>1.下载此插件到项目中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add highlight.js -D</span><br></pre></td></tr></table></figure><p><strong>2.在main.js 引入即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import hljs from &#x27;highlight.js&#x27; // hljs对象</span><br><span class="line">import &#x27;highlight.js/styles/default.css&#x27; // 代码高亮的样式</span><br></pre></td></tr></table></figure><p><strong>3.注册高亮代码-自定义指令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&#x27;highlight&#x27;, function (el) &#123; // 自定义一个代码高亮指令</span><br><span class="line">    const highlight = el.querySelectorAll(&#x27;pre, code&#x27;) // 获取里面所有pre或者code标签</span><br><span class="line">    highlight.forEach((block) =&gt; &#123;</span><br><span class="line">        hljs.highlightElement(block) // 突出显示这些标签(以及内部代码, 会自动识别语言)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4.在铺设文章详情标签使用v-highlight指令即可</strong></p><div class="tip warning"><p>基于 highlight.js 美化详情页的代码片段</p><p>英文文档(更全): <a href="https://highlightjs.readthedocs.io/en/latest/index.html">https://highlightjs.readthedocs.io/en/latest/index.html</a></p><p>中文文档: <a href="https://fenxianglu.cn/highlight.html">https://fenxianglu.cn/highlight.html</a></p></div><h2 id="优化——文章详情-loading效果"><a href="#优化——文章详情-loading效果" class="headerlink" title="优化——文章详情-loading效果"></a>优化——文章详情-loading效果</h2><div class="tip home"><p>在网络慢的时候/在没有文章时, 可以给用户一个提示</p></div><p><strong>1.加载效果提示, vant组件有, 找到全局注册</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Loading &#125; from &#x27;vant&#x27;;</span><br><span class="line">Vue.use(Loading);</span><br></pre></td></tr></table></figure><p><strong>2.标签使用, 和内容+评论势不两立</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文章加载中... --&gt;</span><br><span class="line">&lt;van-loading color=&quot;#1989fa&quot;&gt;文章疯狂加载ing...&lt;/van-loading&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- 文章信息区域 --&gt;</span><br><span class="line">    &lt;div class=&quot;article-container&quot;&gt;</span><br><span class="line">        &lt;!-- ... --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 文章评论区域 --&gt;</span><br><span class="line">    &lt;CommentList&gt;&lt;/CommentList&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>3.调整loading标签样式, 给个class类名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-loading color=&quot;#1989fa&quot; class=&quot;loading&quot;&gt;文章疯狂加载ing...&lt;/van-loading&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.loading &#123;</span><br><span class="line">  margin-top: 50px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>4.加入判断, 加载中或者文章详情标签出现</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-loading color=&quot;#1989fa&quot; class=&quot;loading&quot; v-if=&quot;artObj.title === undefined&quot;&gt;文章疯狂加载ing...&lt;/van-loading&gt;</span><br><span class="line">&lt;div v-else&gt;</span><br><span class="line">&lt;!-- 文章信息区域 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="优化——登录未遂地址"><a href="#优化——登录未遂地址" class="headerlink" title="优化——登录未遂地址"></a>优化——登录未遂地址</h2><div class="tip home"><p>401时, 自动切登录页,登录后回到刚才页面</p></div><p><strong>1.要点赞的时候, 401了, 强制跳转到登录页面了, 保存未遂地址跳转到登录页面</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 要把tokens续签改掉, 否则不会跳转到登录页面</span><br><span class="line"></span><br><span class="line">if (error.response.status === 401) &#123; // 身份过期</span><br><span class="line">    // token续签方式1:  去登录页重新登录, token无用, 清掉-确保路由守卫if进不去</span><br><span class="line">    store.commit(&#x27;setToken&#x27;, &#x27;&#x27;)</span><br><span class="line">    console.log(router.currentRoute.fullPath)</span><br><span class="line">    router.push(&#123; path: `/login?path=$&#123;router.currentRoute.fullPath&#125;` &#125;)</span><br><span class="line"></span><br><span class="line">    // token续签方式2: refreshToken(用户无感知)</span><br><span class="line">    // store.commit(&#x27;setToken&#x27;, &#x27;&#x27;)</span><br><span class="line">    // const res = await refreshTokenAPI()</span><br><span class="line">    // store.commit(&#x27;setToken&#x27;, res.data.data.token)</span><br><span class="line">    // 再调用一次未完成的请求啊(用户无感知)</span><br><span class="line">    // error.config 就是上一次axios请求的配置对象</span><br><span class="line">    // console.dir(error.config)</span><br><span class="line">    // 把新的token赋予到下一次axios请求的请求头中</span><br><span class="line">    // error.config.headers.Authorization = &#x27;Bearer &#x27; + res.data.data.token</span><br><span class="line">    // return到await的地方</span><br><span class="line">    // return ajax(error.config)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    return Promise.reject(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.在Login/index.vue, 登录后, 判断有未遂地址, 跳这里, 否则去/路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 跳转到Layout页面</span><br><span class="line">this.$router.replace(&#123;</span><br><span class="line">    path: this.$route.query.path || &#x27;/layout&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="优化——图片懒加载"><a href="#优化——图片懒加载" class="headerlink" title="优化——图片懒加载"></a>优化——图片懒加载</h2><div class="tip home"><p>图片标签进入视口才加载图片,图片src会调用浏览器请求图片资源</p></div><p><strong>1.vant组件库里有个叫LazyLoad指令, 在main.js中全局注册</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Lazyload &#125; from &#x27;vant&#x27;;</span><br><span class="line">Vue.use(Lazyload);</span><br></pre></td></tr></table></figure><p><strong>2.先查看首页, 上来默认请求了多少张图片 / 点击别的频道查看</strong></p><p><strong>3.根据文档指示, 在src/components/ArticleItem.vue中, 把所有img的src换成v-lazy指令即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 标题区域的插槽 --&gt;</span><br><span class="line">&lt;template #title&gt;</span><br><span class="line">&lt;div class=&quot;title-box&quot;&gt;</span><br><span class="line">    &lt;!-- 标题 --&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; obj.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;!-- 单图 --&gt;</span><br><span class="line">    &lt;img</span><br><span class="line">         class=&quot;thumb&quot;</span><br><span class="line">         v-lazy=&quot;obj.cover.images[0]&quot;</span><br><span class="line">         v-if=&quot;obj.cover.type === 1&quot;</span><br><span class="line">         /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 三张图片 --&gt;</span><br><span class="line">&lt;div class=&quot;thumb-box&quot; v-if=&quot;obj.cover.type &gt; 1&quot;&gt;</span><br><span class="line">    &lt;img</span><br><span class="line">         class=&quot;thumb&quot;</span><br><span class="line">         v-for=&quot;(imgUrl, index) in obj.cover.images&quot;</span><br><span class="line">         :key=&quot;index&quot;</span><br><span class="line">         v-lazy=&quot;imgUrl&quot;</span><br><span class="line">         /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>4.再次观察上来默认请求的图片个数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原理实现: https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver</span><br><span class="line">- img标签先不给src属性赋值</span><br><span class="line">- 等img标签出现在视口时, 把身上另外属性的图片地址给src请求</span><br><span class="line">具体例子看这个: https://www.cnblogs.com/lidgblogs/p/7607582.html</span><br></pre></td></tr></table></figure><h2 id="优化——自动聚焦问题"><a href="#优化——自动聚焦问题" class="headerlink" title="优化——自动聚焦问题"></a>优化——自动聚焦问题</h2><div class="tip home"><p>用户名修改弹窗多次点击,只有第一次自动聚焦问题</p></div><p><strong>1.自动聚焦依赖自定义指令inserted执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">而Dialog只有第一次出现是插入到真实DOM, 触发inserted方法</span><br><span class="line"></span><br><span class="line">而Dialog以后初选是css层面的显示出现, 不会触发inserted方法</span><br></pre></td></tr></table></figure><p><strong>2.给自定义指令添加update方法, 指定所在DOM更新时执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">// 插件对象(必须有install方法, 才可以注入到Vue.use中)</span><br><span class="line">export default &#123;</span><br><span class="line">  install () &#123;</span><br><span class="line">    Vue.directive(&#x27;fofo&#x27;, &#123;</span><br><span class="line">      inserted (el) &#123;</span><br><span class="line">        fn(el)</span><br><span class="line">      &#125;,</span><br><span class="line">      update (el) &#123;</span><br><span class="line">        fn(el)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">function fn (el) &#123;</span><br><span class="line">  if (el.nodeName === &#x27;INPUT&#x27; || el.nodeName === &#x27;TEXTAREA&#x27;) &#123;</span><br><span class="line">    // 如果直接是input标签/textarea标签</span><br><span class="line">    el.focus()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 指令在van-search组件身上, 获取的是组件根标签div, 而input在标签内</span><br><span class="line">    const inp = el.querySelector(&#x27;input&#x27;)</span><br><span class="line">    const textArea = el.querySelector(&#x27;textarea&#x27;)</span><br><span class="line">    // 如果找到了</span><br><span class="line">    if (inp || textArea) &#123;</span><br><span class="line">      inp &amp;&amp; inp.focus()</span><br><span class="line">      textArea &amp;&amp; textArea.focus()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 本身也不是, 子标签里也没有</span><br><span class="line">      console.error(&#x27;请把v-fofo用在输入框标签上&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化——抽离组件注册"><a href="#优化——抽离组件注册" class="headerlink" title="优化——抽离组件注册"></a>优化——抽离组件注册</h2><div class="tip home"><p>main.js代码有些多, 分散出去</p></div><p><strong>1.创建src/VantRegister.js, 把Vant注册的相关代码复制过来</strong></p><p><strong>2.在main.js引入一下, 让代码执行</strong></p><h2 id="优化——首页-滚动条位置"><a href="#优化——首页-滚动条位置" class="headerlink" title="优化——首页-滚动条位置"></a>优化——首页-滚动条位置</h2><div class="tip home"><p>切换首页和我的页面,首页滚动条位置需要恢复</p></div><p><strong>1.路由对象/home, 上添加meta额外信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meta: &#123; isRecord: true, top: 0 &#125; // isRecord是否需要设置滚动位置</span><br></pre></td></tr></table></figure><p><strong>2.给Home设置组件内守卫</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 路由离开 - 触发(保存滚动位置)</span><br><span class="line">beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">    from.meta.top = window.scrollY</span><br><span class="line">    next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.在全局后置钩子设置页面滚动条</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 全局后置钩子</span><br><span class="line">router.afterEach((to, from) =&gt; &#123;</span><br><span class="line">  // 如果当前的路由的元信息中，isRecord 的值为 true</span><br><span class="line">  if (to.meta.isRecord) &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      // 则把元信息中的 top 值设为滚动条纵向滚动的位置</span><br><span class="line">      window.scrollTo(0, to.meta.top)</span><br><span class="line">    &#125;, 0)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：keep-alive不会缓存滚动条的位置的</p></div><h2 id="优化——频道-滚动条位置"><a href="#优化——频道-滚动条位置" class="headerlink" title="优化——频道-滚动条位置"></a>优化——频道-滚动条位置</h2><div class="tip home"><p>tabs切换保存当前位置,tabs切换后, 把位置设置</p></div><p><strong>1.明确数据结构, 在Home/index.vue定义变量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// “频道名称”和“滚动条位置”之间的对应关系，格式 &#123; &#x27;推荐ID&#x27;: 211, &#x27;htmlID&#x27;: 30, &#x27;开发者资讯ID&#x27;: 890 &#125;</span><br><span class="line">const nameToTop = &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>2.tabs标签绑定before-change事件和方法实现</strong><br>向nameToTop添加属性和位置, 缓存起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-tabs v-model=&quot;channelId&quot; animated sticky offset-top=&quot;1.226667rem&quot; :before-change=&quot;tabBeforeChangeFn&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    // 频道切换之前触发</span><br><span class="line">    tabsBeforeChangeFn () &#123;</span><br><span class="line">      nameToTop[this.channelId] = window.scrollY // 先保存要被切走频道的滚动距离(一定要用哦this.channelId里存着的)</span><br><span class="line">      // 只有return true才会让tabs切换</span><br><span class="line">      return true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>3.监测tabs切换后, 从nameToTop对象里拿到原本滚动位置设置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-tabs v-model=&quot;channelId&quot; animated sticky offset-top=&quot;1.226667rem&quot;  :before-change=&quot;tabsBeforeChangeFn&quot; @change=&quot;tabsChangeFn&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    // 频道切换后</span><br><span class="line">    tabsChangeFn (channelId) &#123;</span><br><span class="line">      // 等 DOM 更新完毕之后，根据记录的&quot;滚动条位置&quot;，调用 window.scrollTo() 方法进行滚动</span><br><span class="line">      this.$nextTick(() =&gt; &#123;</span><br><span class="line">        window.scrollTo(0, nameToTop[channelId] || 0)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="优化——持久化存储方式"><a href="#优化——持久化存储方式" class="headerlink" title="优化——持久化存储方式"></a>优化——持久化存储方式</h2><div class="tip home"><p>封装本地持久化方法</p></div><p><strong>1.创建utils/storage.js文件, 定义4个方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 本地存储方式</span><br><span class="line">// 如果同时有sessionStorage和localStorage, 可以封装2份</span><br><span class="line">// 现在我只封装一种统一的方式</span><br><span class="line">export const setStorage = (key, value) =&gt; &#123;</span><br><span class="line">  localStorage.setItem(key, value)</span><br><span class="line">&#125;</span><br><span class="line">export const getStorage = (key) =&gt; &#123;</span><br><span class="line">  return localStorage.getItem(key)</span><br><span class="line">&#125;</span><br><span class="line">export const removeStorage = (key) =&gt; &#123;</span><br><span class="line">  localStorage.removeItem(key)</span><br><span class="line">&#125;</span><br><span class="line">export const clearStorage = () =&gt; &#123;</span><br><span class="line">  localStorage.clear()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.把所有使用本地存储的地方, 都统一换成这里定义的方法</strong></p><h2 id="优化——便于扩展的Notify"><a href="#优化——便于扩展的Notify" class="headerlink" title="优化——便于扩展的Notify"></a>优化——便于扩展的Notify</h2><div class="tip home"><p>万一以后项目的通知框要统一更换</p></div><p><strong>1.新建utils/Notify.js文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 基于vant组件库, UI层弹窗封装</span><br><span class="line">// Notify函数</span><br><span class="line">// import &#123; Notify &#125; from &#x27;vant&#x27;</span><br><span class="line">import &#123; Toast &#125; from &#x27;vant&#x27;</span><br><span class="line"></span><br><span class="line">export const MyNotify = (&#123; type, message &#125;) =&gt; &#123;</span><br><span class="line">//   Notify(&#123;</span><br><span class="line">//     type: type,</span><br><span class="line">//     message: message</span><br><span class="line">//   &#125;)</span><br><span class="line"></span><br><span class="line">  if (type === &#x27;warning&#x27;) &#123;</span><br><span class="line">    Toast(&#123;</span><br><span class="line">      type: &#x27;fail&#x27;,</span><br><span class="line">      message</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; else if (type === &#x27;success&#x27;) &#123;</span><br><span class="line">    Toast(&#123;</span><br><span class="line">      type,</span><br><span class="line">      message</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.演示登录页面Login.vue提示框, 别的页面也是这样用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; MyNotify &#125; from &#x27;@/utils/Notify&#x27;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    ...mapActions([&#x27;asyncLoginAction&#x27;]),</span><br><span class="line">    async onSubmit () &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        await this.asyncLoginAction(this.formLogin)</span><br><span class="line">        MyNotify(&#123; type: &#x27;success&#x27;, message: &#x27;登录成功&#x27; &#125;)</span><br><span class="line">        // 跳转到Layout页面</span><br><span class="line">        this.$router.replace(&#123;</span><br><span class="line">          path: this.$route.query.path || &#x27;/layout&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; catch (err) &#123;</span><br><span class="line">        MyNotify(&#123; type: &#x27;warning&#x27;, message: &#x27;手机号或密码错误&#x27; &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>封装统一UI弹窗, 以后更改封装的自定义函数内部实现, 整个项目所有UI弹窗都换掉</p></div><div class="tip "><p>完</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目优化&quot;&gt;&lt;a href=&quot;#移动端项目优化&quot; class=&quot;headerlink&quot; title=&quot;移动端项目优化&quot;&gt;&lt;/a&gt;移动端项目优化&lt;/h1&gt;&lt;h2 id=&quot;优化——路由-懒加载&quot;&gt;&lt;a href=&quot;#优化——路由-懒加载&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端项目总结（七）</title>
    <link href="https://tailante.github.io/posts/c68b.html"/>
    <id>https://tailante.github.io/posts/c68b.html</id>
    <published>2022-10-04T07:43:29.000Z</published>
    <updated>2022-10-04T08:27:20.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（七）"><a href="#移动端项目总结（七）" class="headerlink" title="移动端项目总结（七）"></a>移动端项目总结（七）</h1><h2 id="聊天机器人——小思同学"><a href="#聊天机器人——小思同学" class="headerlink" title="聊天机器人——小思同学"></a>聊天机器人——小思同学</h2><div class="tip home"><p>第一、创建小思同学组件，配置路由</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/PVLtk.png"/></div></div><p><strong>1.views/Chat/index.vue - 创建页面</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;!-- 固定导航 --&gt;</span><br><span class="line">    &lt;van-nav-bar fixed left-arrow @click-left=&quot;$router.back()&quot; title=&quot;小思同学&quot;&gt;&lt;/van-nav-bar&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 聊天主体区域 --&gt;</span><br><span class="line">    &lt;div class=&quot;chat-list&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &lt;!-- 左侧是机器人小思 --&gt;</span><br><span class="line">          &lt;div class=&quot;chat-item left&quot;&gt;</span><br><span class="line">            &lt;van-image fit=&quot;cover&quot; round src=&quot;https://img.yzcdn.cn/vant/cat.jpeg&quot; /&gt;</span><br><span class="line">            &lt;div class=&quot;chat-pao&quot;&gt;这里是别人说的话&lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 右侧是当前用户 --&gt;</span><br><span class="line">          &lt;div class=&quot;chat-item right&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chat-pao&quot;&gt;这里是我说的话&lt;/div&gt;</span><br><span class="line">            &lt;van-image fit=&quot;cover&quot; round src=&quot;https://img.yzcdn.cn/vant/cat.jpeg&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 对话区域 --&gt;</span><br><span class="line">    &lt;div class=&quot;reply-container van-hairline--top&quot;&gt;</span><br><span class="line">      &lt;van-field  placeholder=&quot;说点什么...&quot;&gt;</span><br><span class="line">        &lt;template #button&gt;</span><br><span class="line">          &lt;span  style=&quot;font-size:12px;color:#999&quot;&gt;提交&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/van-field&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Chat&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  background: #fafafa;</span><br><span class="line">  padding: 46px 0 50px 0;</span><br><span class="line">  .chat-list &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    overflow-y: scroll;</span><br><span class="line">    .chat-item &#123;</span><br><span class="line">      padding: 10px;</span><br><span class="line">      .van-image &#123;</span><br><span class="line">        vertical-align: top;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line">      &#125;</span><br><span class="line">      .chat-pao &#123;</span><br><span class="line">        vertical-align: top;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        min-width: 40px;</span><br><span class="line">        max-width: 70%;</span><br><span class="line">        min-height: 40px;</span><br><span class="line">        line-height: 38px;</span><br><span class="line">        border: 0.5px solid #c2d9ea;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        position: relative;</span><br><span class="line">        padding: 0 10px;</span><br><span class="line">        background-color: #e0effb;</span><br><span class="line">        word-break: break-all;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #333;</span><br><span class="line">        &amp;::before &#123;</span><br><span class="line">          content: &#x27;&#x27;;</span><br><span class="line">          width: 10px;</span><br><span class="line">          height: 10px;</span><br><span class="line">          position: absolute;</span><br><span class="line">          top: 12px;</span><br><span class="line">          border-top: 0.5px solid #c2d9ea;</span><br><span class="line">          border-right: 0.5px solid #c2d9ea;</span><br><span class="line">          background: #e0effb;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.chat-item.right &#123;</span><br><span class="line">  text-align: right;</span><br><span class="line">  .chat-pao &#123;</span><br><span class="line">    margin-left: 0;</span><br><span class="line">    margin-right: 15px;</span><br><span class="line">    &amp;::before &#123;</span><br><span class="line">      right: -6px;</span><br><span class="line">      transform: rotate(45deg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.chat-item.left &#123;</span><br><span class="line">  text-align: left;</span><br><span class="line">  .chat-pao &#123;</span><br><span class="line">    margin-left: 15px;</span><br><span class="line">    margin-right: 0;</span><br><span class="line">    &amp;::before &#123;</span><br><span class="line">      left: -5px;</span><br><span class="line">      transform: rotate(-135deg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.reply-container &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  height: 44px;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background: #f5f5f5;</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>2.配置路由，点击van-cell单元格跳转页面</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-cell icon=&quot;chat-o&quot; title=&quot;小思同学&quot; is-link to=&quot;/chat&quot;/&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、铺设小思同学页面，先把固定数据铺设上去</p></div><p><strong>1.先在本地渲染数组 - 准备数组并循环渲染到标签上</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Chat&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      word: &#x27;&#x27;, // 输入框的内容</span><br><span class="line">      // 所有的聊天消息</span><br><span class="line">      list: [</span><br><span class="line">        // 只根据 name 属性，即可判断出这个消息应该渲染到左侧还是右侧</span><br><span class="line">        &#123; name: &#x27;xs&#x27;, msg: &#x27;hi，你好！我是小思&#x27; &#125;,</span><br><span class="line">        &#123; name: &#x27;me&#x27;, msg: &#x27;我是编程小王子&#x27; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.把数据循环到标签上, 注意判断数据是哪一边的, 给输入框绑定v-model</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;!-- 固定导航 --&gt;</span><br><span class="line">    &lt;van-nav-bar fixed left-arrow @click-left=&quot;$router.back()&quot; title=&quot;小思同学&quot;&gt;&lt;/van-nav-bar&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 聊天主体区域 --&gt;</span><br><span class="line">    &lt;div class=&quot;chat-list&quot;&gt;</span><br><span class="line">      &lt;div v-for=&quot;obj, index in list&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">          &lt;!-- 左侧是机器人小思 --&gt;</span><br><span class="line">          &lt;div class=&quot;chat-item left&quot; v-if=&quot;obj.name === &#x27;xs&#x27;&quot;&gt;</span><br><span class="line">            &lt;van-image fit=&quot;cover&quot; round src=&quot;https://img.yzcdn.cn/vant/cat.jpeg&quot; /&gt;</span><br><span class="line">            &lt;div class=&quot;chat-pao&quot;&gt;&#123;&#123; obj.msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 右侧是当前用户 --&gt;</span><br><span class="line">          &lt;div class=&quot;chat-item right&quot; v-if=&quot;obj.name === &#x27;me&#x27;&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;chat-pao&quot;&gt;&#123;&#123; obj.msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;van-image fit=&quot;cover&quot; round src=&quot;https://img.yzcdn.cn/vant/cat.jpeg&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 对话区域 --&gt;</span><br><span class="line">    &lt;div class=&quot;reply-container van-hairline--top&quot;&gt;</span><br><span class="line">      &lt;van-field v-model=&quot;word&quot;  placeholder=&quot;说点什么...&quot;&gt;</span><br><span class="line">        &lt;template #button&gt;</span><br><span class="line">          &lt;span  style=&quot;font-size:12px;color:#999&quot;&gt;提交&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/van-field&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、及时通信——webSocket使用（即时通信我将单独出一期为大家详细解答）</p></div><p><strong>1.安装客户端socket的包(支持websocket) - 内部对websocket进行了封装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add socket.io-client@4.0.0</span><br></pre></td></tr></table></figure><p><strong>2.在Chat/index.vue引入包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 导入 socket.io-client 包</span><br><span class="line">import &#123; io &#125; from &#x27;socket.io-client&#x27;</span><br><span class="line"></span><br><span class="line">// 定义变量，存储 websocket 实例</span><br><span class="line">let socket = null</span><br></pre></td></tr></table></figure><p><strong>3.创建socket服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    // 创建客户端 websocket 的实例</span><br><span class="line">    socket = io(&#x27;http://toutiao.itheima.net&#x27;, &#123;</span><br><span class="line">        query: &#123;</span><br><span class="line">            token: this.token</span><br><span class="line">        &#125;,</span><br><span class="line">        transports: [&#x27;websocket&#x27;]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>这里请注意：io与axios一毛钱关系都没有 没有基地址,请将完整地址写入</p></div><p><strong>4.监听是否连接成功(只有连接内置事件执行了, 才能进行后续操作)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  // 建立连接的事件</span><br><span class="line">  socket.on(&#x27;connect&#x27;, () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;与服务器建立了连接&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.在组件销毁前, 关闭服务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 组件被销毁之前，清空 sock 对象</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">  // 关闭连接</span><br><span class="line">  socket.close()</span><br><span class="line"></span><br><span class="line">  // 销毁 websocket 实例对象</span><br><span class="line">  socket = null</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>6.在created监听socket的消息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    // 接收到消息的事件</span><br><span class="line">    socket.on(&#x27;message&#x27;, data =&gt; &#123;</span><br><span class="line">      // 把服务器发送过来的消息，存储到 list 数组中</span><br><span class="line">      this.list.push(&#123;</span><br><span class="line">        name: &#x27;xs&#x27;,</span><br><span class="line">        msg: data.msg</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>7.在 send事件中, 把服务器发来的数据装到数组里</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sendFn () &#123;</span><br><span class="line">    // 判断内容是否为空</span><br><span class="line">    if (!this.word) return</span><br><span class="line"></span><br><span class="line">    // 添加聊天消息到 list 列表中</span><br><span class="line">    this.list.push(&#123;</span><br><span class="line">        name: &#x27;me&#x27;,</span><br><span class="line">        msg: this.word</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8.客户端调用 <code>socket.emit(&#39;message&#39;, 消息内容)</code> 方法把消息发送给 websocket 服务器：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 向服务端发送消息</span><br><span class="line">sendFn () &#123;</span><br><span class="line">    // 判断内容是否为空</span><br><span class="line">    if (!this.word) return</span><br><span class="line"></span><br><span class="line">    // 添加聊天消息到 list 列表中</span><br><span class="line">    this.list.push(&#123;</span><br><span class="line">        name: &#x27;me&#x27;,</span><br><span class="line">        msg: this.word</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 把消息发送给 websocket 服务器</span><br><span class="line">    socket.emit(&#x27;message&#x27;, &#123;</span><br><span class="line">        msg: this.word,</span><br><span class="line">        timestamp: new Date().getTime()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 清空文本框的内容</span><br><span class="line">    this.word = &#x27;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：及时通信——webSocket使用，需要与后台协商好, 发送消息和接收消息的事件名, 以及数据格式</p></div><div class="tip home"><p>第三、发消息和收消息, 立刻滚动到底部</p></div><p><strong>1.定义滚动到底部的方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 滚动到页面底部</span><br><span class="line">scrollToBottom () &#123;</span><br><span class="line">    // 获取到所有的聊天 Item 项</span><br><span class="line">    const chatItem = document.querySelectorAll(&#x27;.chat-item&#x27;)</span><br><span class="line">    // 获取到最后一项对应的 DOM 元素</span><br><span class="line">    const lastItem = chatItem[chatItem.length - 1]</span><br><span class="line">    // 调用 scrollIntoView() 方法，显示这个元素</span><br><span class="line">    lastItem.scrollIntoView(&#123;</span><br><span class="line">        behavior: &#x27;smooth&#x27; // 动画平滑</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.在发布消息 / 接收到消息的时候, 调用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.$nextTick(() =&gt; &#123;</span><br><span class="line">    this.scrollToBottom()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip home"><p>第四、由于个人中心，修改资料，小思同学均需要用到个人头像，所以存储用户头像在vuex</p></div><p><strong>1.在vuex中定义变量保存信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    // ...</span><br><span class="line">    user: JSON.parse(localStorage.getItem(&#x27;user&#x27;)) || &#123;&#125; // 用户基本资料(默认从本地取)</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    // ...</span><br><span class="line">    setUser (state, userObj) &#123;</span><br><span class="line">      state.user = userObj</span><br><span class="line">      localStorage.setItem(&#x27;user&#x27;, JSON.stringify(userObj))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>2.在User/index.vue中, 获取后保存起来</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    ...mapMutations([&#x27;setToken&#x27;, &#x27;setUser&#x27;]),</span><br><span class="line">&#125;,</span><br><span class="line">async created () &#123;</span><br><span class="line">const res = await userInfoAPI()</span><br><span class="line">this.user = res.data.data</span><br><span class="line">this.setUser(res.data.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.既然存储到vuex中, 我的页面也使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapState, mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // user: &#123;&#125; // 用户对象</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([&#x27;user&#x27;])</span><br><span class="line">  &#125;,</span><br><span class="line">  async created () &#123;</span><br><span class="line">    const res = await userInfoAPI()</span><br><span class="line">    console.log(res)</span><br><span class="line">    // this.user = res.data.data</span><br><span class="line">    this.setUser(res.data.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.去小思同学页面使用vuex中的值, 使用头像</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 定义getters, 直接拿到user里的头像</span><br><span class="line">getters: &#123;</span><br><span class="line">    userPhoto (state) &#123;</span><br><span class="line">        return state.user.photo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------</span><br><span class="line">// 然后在逻辑页面映射过来使用即可</span><br><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([&#x27;userPhoto&#x27;])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip "><p>项目至此，算初步完成，但还需要优化很多。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（七）&quot;&gt;&lt;a href=&quot;#移动端项目总结（七）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（七）&quot;&gt;&lt;/a&gt;移动端项目总结（七）&lt;/h1&gt;&lt;h2 id=&quot;聊天机器人——小思同学&quot;&gt;&lt;a href=&quot;#聊天机器人——小思同</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端项目总结（六）</title>
    <link href="https://tailante.github.io/posts/faee.html"/>
    <id>https://tailante.github.io/posts/faee.html</id>
    <published>2022-10-04T03:17:02.000Z</published>
    <updated>2022-10-04T07:40:53.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（六）"><a href="#移动端项目总结（六）" class="headerlink" title="移动端项目总结（六）"></a>移动端项目总结（六）</h1><h2 id="文章评论功能"><a href="#文章评论功能" class="headerlink" title="文章评论功能"></a>文章评论功能</h2><div class="tip home"><p>第一、创建文章评论组件，在文章详情页显示</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/PocyE.png"/></div></div><p><strong>1.ArticleDetail/CommentList.vue - 定义评论组件(复制标签和样式, 然后对比)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 评论列表 --&gt;</span><br><span class="line">    &lt;div class=&quot;cmt-list&quot;&gt;</span><br><span class="line">      &lt;!-- 评论的 Item 项 --&gt;</span><br><span class="line">      &lt;div class=&quot;cmt-item&quot;&gt;</span><br><span class="line">        &lt;!-- 头部区域 --&gt;</span><br><span class="line">        &lt;div class=&quot;cmt-header&quot;&gt;</span><br><span class="line">          &lt;!-- 头部左侧 --&gt;</span><br><span class="line">          &lt;div class=&quot;cmt-header-left&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;&quot; alt=&quot;&quot; class=&quot;avatar&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;uname&quot;&gt;zs&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 头部右侧 --&gt;</span><br><span class="line">          &lt;div class=&quot;cmt-header-right&quot;&gt;</span><br><span class="line">            &lt;van-icon name=&quot;like&quot; size=&quot;16&quot; color=&quot;red&quot; /&gt;</span><br><span class="line">            &lt;van-icon name=&quot;like-o&quot; size=&quot;16&quot; color=&quot;gray&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 主体区域 --&gt;</span><br><span class="line">        &lt;div class=&quot;cmt-body&quot;&gt;</span><br><span class="line">          基于字体的图标集，可以通过 Icon 组件使用，也可以在其他组件中通过 icon 属性引用。基于字体的图标集，可以通过 Icon 组件使用，也可以在其他组件中通过 icon 属性引用。</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 尾部区域 --&gt;</span><br><span class="line">        &lt;div class=&quot;cmt-footer&quot;&gt;3天前&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.cmt-list &#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  .cmt-item &#123;</span><br><span class="line">    padding: 15px 0;</span><br><span class="line">    + .cmt-item &#123;</span><br><span class="line">      border-top: 1px solid #f8f8f8;</span><br><span class="line">    &#125;</span><br><span class="line">    .cmt-header &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      align-items: center;</span><br><span class="line">      justify-content: space-between;</span><br><span class="line">      .cmt-header-left &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        .avatar &#123;</span><br><span class="line">          width: 40px;</span><br><span class="line">          height: 40px;</span><br><span class="line">          background-color: #f8f8f8;</span><br><span class="line">          border-radius: 50%;</span><br><span class="line">          margin-right: 15px;</span><br><span class="line">        &#125;</span><br><span class="line">        .uname &#123;</span><br><span class="line">          font-size: 12px;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .cmt-body &#123;</span><br><span class="line">      font-size: 14px;</span><br><span class="line">      line-height: 28px;</span><br><span class="line">      text-indent: 2em;</span><br><span class="line">      margin-top: 6px;</span><br><span class="line">      word-break: break-all;</span><br><span class="line">    &#125;</span><br><span class="line">    .cmt-footer &#123;</span><br><span class="line">      font-size: 12px;</span><br><span class="line">      color: gray;</span><br><span class="line">      margin-top: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>2.引入到ArticleDetail.vue里使用后查看效果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- Header 区域 --&gt;</span><br><span class="line">    &lt;!-- 文章信息区域 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 文章评论区域 --&gt;</span><br><span class="line">    &lt;CommentList&gt;&lt;/CommentList&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import CommentList from &#x27;./CommentList.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  // ...</span><br><span class="line">  components: &#123;</span><br><span class="line">    CommentList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、获取评论数据</p></div><p><strong>1.定义接口方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 评论 - 获取列表</span><br><span class="line">// offset第一页时, 不用在params携带(axios发现值为null会自动忽略此参数)</span><br><span class="line">export const commentListAPI = (&#123; artId, offset = null, limit = 10 &#125;) =&gt; &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;/v1_0/comments&#x27;,</span><br><span class="line">    params: &#123;</span><br><span class="line">      type: &#x27;a&#x27;,</span><br><span class="line">      source: artId,</span><br><span class="line">      offset,</span><br><span class="line">      limit</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.CommentList.vue中, 引入发请求, 拿数据，循环铺设，对于时间，引入时间处理方法, 处理时间（前文均有涉及）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; commentListAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  async created () &#123;</span><br><span class="line">    this.getCommentListFn()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async getCommentListFn () &#123;</span><br><span class="line">      const res = await commentListAPI(&#123;</span><br><span class="line">        artId: this.$route.query.aid</span><br><span class="line">      &#125;)</span><br><span class="line">      console.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：axios库中params里的值为null, 会自动忽略此参数和值, 不发给后台,但是如果是 data 仍然会发送到后台！！！！</p></div><div class="tip home"><p>第三、评论点亮功能，请参考作者关注功能</p></div><div class="tip home"><p>第四、发布评论，显示评论和发布评论容器切换</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/Pogrs.gif"/></div></div><p><strong>1.在CommentList.vue底部 - 准备标签和样式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 底部添加评论区域 - 1 --&gt;</span><br><span class="line">&lt;div class=&quot;add-cmt-box van-hairline--top&quot;&gt;</span><br><span class="line">    &lt;van-icon name=&quot;arrow-left&quot; size=&quot;0.48rem&quot; @click=&quot;$router.back()&quot; /&gt;</span><br><span class="line">    &lt;div class=&quot;ipt-cmt-div&quot;&gt;发表评论&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;icon-box&quot;&gt;</span><br><span class="line">        &lt;van-badge&gt;</span><br><span class="line">            &lt;van-icon name=&quot;comment-o&quot; size=&quot;0.53333334rem&quot; /&gt;</span><br><span class="line">        &lt;/van-badge&gt;</span><br><span class="line">        &lt;van-icon name=&quot;star-o&quot; size=&quot;0.53333334rem&quot; /&gt;</span><br><span class="line">        &lt;van-icon name=&quot;share-o&quot; size=&quot;0.53333334rem&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 底部添加评论区域 - 2 --&gt;</span><br><span class="line">&lt;div class=&quot;cmt-box van-hairline--top&quot;&gt;</span><br><span class="line">    &lt;textarea placeholder=&quot;友善评论、理性发言、阳光心灵&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;van-button type=&quot;default&quot; disabled&gt;发布&lt;/van-button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>2.对class修饰</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">/*美化 - 文章详情 - 底部的评论页面 */</span><br><span class="line">// 外层容器</span><br><span class="line">.art-cmt-container-1 &#123;</span><br><span class="line">  padding-bottom: 46px;</span><br><span class="line">&#125;</span><br><span class="line">.art-cmt-container-2 &#123;</span><br><span class="line">  padding-bottom: 80px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 发布评论的盒子 - 1</span><br><span class="line">.add-cmt-box &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  background-color: white;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  height: 46px;</span><br><span class="line">  line-height: 46px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  .ipt-cmt-div &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    border: 1px solid #efefef;</span><br><span class="line">    border-radius: 15px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    padding-left: 15px;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">    background-color: #f8f8f8;</span><br><span class="line">  &#125;</span><br><span class="line">  .icon-box &#123;</span><br><span class="line">    width: 40%;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-evenly;</span><br><span class="line">    line-height: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">  width: 20px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  background: #f2f3f5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 发布评论的盒子 - 2</span><br><span class="line">.cmt-box &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 80px;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  background-color: white;</span><br><span class="line">  textarea &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    height: 66%;</span><br><span class="line">    border: 1px solid #efefef;</span><br><span class="line">    background-color: #f8f8f8;</span><br><span class="line">    resize: none;</span><br><span class="line">    border-radius: 6px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line">  .van-button &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.data声明变量, isShowCmtInput: false, 控制textarea是否应该出现</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 底部添加评论区域 - 1 --&gt;</span><br><span class="line">&lt;div class=&quot;add-cmt-box van-hairline--top&quot; v-if=&quot;isShowCmtInput === false&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 底部添加评论区域 - 2 --&gt;</span><br><span class="line">&lt;div class=&quot;cmt-box van-hairline--top&quot; v-else&gt;</span><br></pre></td></tr></table></figure><p><strong>4.给发布评论标签绑定点击事件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;ipt-cmt-div&quot; @click=&quot;isShowCmtInput = true&quot;&gt;发表评论&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>5.使用自定义指令fofo, 让输入框自动聚焦, 并修改自定义指令代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">// 插件对象(必须有install方法, 才可以注入到Vue.use中)</span><br><span class="line">export default &#123;</span><br><span class="line">  install () &#123;</span><br><span class="line">    Vue.directive(&#x27;fofo&#x27;, &#123;</span><br><span class="line">      inserted (el) &#123;</span><br><span class="line">        if (el.nodeName === &#x27;INPUT&#x27; || el.nodeName === &#x27;TEXTAREA&#x27;) &#123;</span><br><span class="line">          // 如果直接是input标签/textarea标签</span><br><span class="line">          el.focus()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          // 指令在van-search组件身上, 获取的是组件根标签div, 而input在标签内</span><br><span class="line">          const inp = el.querySelector(&#x27;input&#x27;)</span><br><span class="line">          const textArea = el.querySelector(&#x27;textarea&#x27;)</span><br><span class="line">          // 如果找到了</span><br><span class="line">          if (inp || textArea) &#123;</span><br><span class="line">            inp &amp;&amp; inp.focus()</span><br><span class="line">            textArea &amp;&amp; textArea.focus()</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            // 本身也不是, 子标签里也没有</span><br><span class="line">            console.error(&#x27;请把v-fofo用在输入框标签上&#x27;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：由于本次输入框为文本编辑器，所以对于自动聚焦的自定义指令还需要进行进一步的判断</p><p>知识点：原生标签拿名字 是 DOM.nodeName  注意 是大写的</p></div><p><strong>6.给输入框使用, 自动聚焦指令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea v-fofo placeholder=&quot;友善评论、理性发言、阳光心灵&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><p><strong>7.失去焦点, 让发布评论div关闭</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea v-fofo placeholder=&quot;友善评论、理性发言、阳光心灵&quot; @blur=&quot;isShowCmtInput = false&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><p><strong>8.给评论列表外层容器动态设置类名-距离底部</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 防止底部输入框, 挡住隔壁的内容</span><br><span class="line"></span><br><span class="line">&lt;!-- 评论列表 --&gt;</span><br><span class="line">&lt;div</span><br><span class="line">     class=&quot;cmt-list&quot;</span><br><span class="line">     :class=&quot;isShowCmtInput ? &#x27;art-cmt-container-2&#x27; : &#x27;art-cmt-container-1&#x27;&quot;</span><br><span class="line">     &gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第五、设置评论微标数量提示，点击评论微标滚动到第一个评论</p></div><p><strong>1.收集评论总数, 显示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// max: 超出这个数量, 就显示max的数字+</span><br><span class="line"></span><br><span class="line">&lt;van-badge :content=&quot;totalCount&quot; :max=&quot;99&quot;&gt;</span><br><span class="line">&lt;van-icon name=&quot;comment-o&quot; size=&quot;0.53333334rem&quot; /&gt;</span><br><span class="line">&lt;/van-badge&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      commentList: [],</span><br><span class="line">      isShowCmtInput: false,</span><br><span class="line">      totalCount: &#x27;&#x27; // 评论总数</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  async created () &#123;</span><br><span class="line">    this.getCommentListFn()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 获取评论列表</span><br><span class="line">    async getCommentListFn () &#123;</span><br><span class="line">      const res = await commentListAPI(&#123;</span><br><span class="line">        artId: this.$route.query.aid</span><br><span class="line">      &#125;)</span><br><span class="line">      this.commentList = res.data.data.results</span><br><span class="line">      this.totalCount = res.data.data.total_count || &#x27;&#x27; // 如果无评论数(0), 给空字符串(防止0微标出现)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：该效果请查阅 vant组件库自行寻找并使用</p></div><p><strong>2.获取到点赞容器, 调用原生DOM特有方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 评论滑动</span><br><span class="line">async moveFn () &#123;</span><br><span class="line">    // 真实DOM都在document(所以不再一个vue文件内), 也是可以获取的</span><br><span class="line">    document.querySelector(&#x27;.like-box&#x27;).scrollIntoView(&#123;</span><br><span class="line">        behavior: &#x27;smooth&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：scrollIntoView作用是让调用者标签滑动到视口区域底部<br>获取元素不选择第一条评论是因为容易被固定定位的头部挡住，但是这种方法兼容性不太好<br>如果你想要保持兼容性实现滚动效果还有两种方法（非常麻烦：后续我会单独发一期）：<br>1.css动画 animation transtion<br>2.js 动画 计时器</p></div><div class="tip home"><p>第六、点击发布按钮, 拿到输入框内容，再调用接口, 发布评论</p></div><p><strong>1.根据内容, 动态设置发布按钮禁用状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea</span><br><span class="line">v-fofo</span><br><span class="line">v-model=&quot;comValue&quot;</span><br><span class="line">placeholder=&quot;友善评论、理性发言、阳光心灵&quot;</span><br><span class="line">@blur=&quot;isShowCmtInput = false&quot;&gt;</span><br><span class="line">&lt;/textarea&gt;</span><br><span class="line">&lt;van-button type=&quot;default&quot; :disabled=&quot;comValue.length === 0&quot;&gt;发布&lt;/van-button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      comValue: &#x27;&#x27; // 评论内容</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.点击发布按钮, 打印内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> &lt;textarea</span><br><span class="line">        v-fofo</span><br><span class="line">        v-model=&quot;comValue&quot;</span><br><span class="line">        placeholder=&quot;友善评论、理性发言、阳光心灵&quot;</span><br><span class="line">        @blur=&quot;blurFn&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;van-button type=&quot;default&quot; :disabled=&quot;comValue.length === 0&quot; @click=&quot;send&quot;&gt;发布&lt;/van-button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 发布评论框 - 失去焦点</span><br><span class="line">        blurFn () &#123;</span><br><span class="line">          setTimeout(() =&gt; &#123;</span><br><span class="line">            this.isShowCmtInput = false</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        // 发布评论</span><br><span class="line">        async send () &#123;</span><br><span class="line">          console.log(this.comValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：由于点击发布以后先触发了失去焦点事件,这直接导致文本框标签被 v-if 直接移除,导致点击事件没来得及执行,因此无法获取文本框的值</p><p>解决：通过定时器宏任务 将失去焦点放到页面最后执行<br>注意：$nextTick无法解决这类场景  它无法阻止事件的先后，它的应用场景是在同一回调中保证dom解析完成插入页面后执行</p></div><p><strong>3.定义接口方法</strong></p><p><strong>4.发布事件, 调用接口传给后台</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 发布评论</span><br><span class="line">async send () &#123;</span><br><span class="line">    const res = await sendCommentAPI(&#123;</span><br><span class="line">        artId: this.$route.query.aid,</span><br><span class="line">        content: this.comValue</span><br><span class="line">    &#125;)</span><br><span class="line">    // 保存新评论对象到数组中</span><br><span class="line">    this.commentList.unshift(res.data.data.new_obj)</span><br><span class="line">    // 数量+1</span><br><span class="line">    this.totalCount++</span><br><span class="line">    // 成功后, 清除输入框内容</span><br><span class="line">    this.comValue = &#x27;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第七、文章评论——上拉加载更多</p></div><p><strong>1.van-list套住评论列表区域，定义相关变量和方法，距离底部50像素, 判定为触底，默认上来不检测触底事件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      &lt;van-list</span><br><span class="line">        v-model=&quot;loading&quot;</span><br><span class="line">        :finished=&quot;finished&quot;</span><br><span class="line">        finished-text=&quot;没有更多了&quot;</span><br><span class="line">        @load=&quot;onLoad&quot;</span><br><span class="line">        offset=&quot;50&quot;</span><br><span class="line">        :immediate-check=&quot;false&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!-- 评论的 Item 项 --&gt;</span><br><span class="line">        &lt;div class=&quot;cmt-item&quot; v-for=&quot;obj in commentList&quot; :key=&quot;obj.com_id&quot;&gt;</span><br><span class="line">          &lt;!-- 头部区域 --&gt;</span><br><span class="line">          &lt;div class=&quot;cmt-header&quot;&gt;</span><br><span class="line">            &lt;!-- 头部左侧 --&gt;</span><br><span class="line">            &lt;div class=&quot;cmt-header-left&quot;&gt;</span><br><span class="line">              &lt;img :src=&quot;obj.aut_photo&quot; class=&quot;avatar&quot; /&gt;</span><br><span class="line">              &lt;span class=&quot;uname&quot;&gt;&#123;&#123; obj.aut_name &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!-- 头部右侧 --&gt;</span><br><span class="line">            &lt;div class=&quot;cmt-header-right&quot;&gt;</span><br><span class="line">              &lt;van-icon</span><br><span class="line">                name=&quot;like&quot;</span><br><span class="line">                size=&quot;16&quot;</span><br><span class="line">                color=&quot;red&quot;</span><br><span class="line">                v-if=&quot;obj.is_liking === true&quot;</span><br><span class="line">                @click=&quot;loveFn(true, obj)&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">              &lt;van-icon</span><br><span class="line">                name=&quot;like-o&quot;</span><br><span class="line">                size=&quot;16&quot;</span><br><span class="line">                color=&quot;gray&quot;</span><br><span class="line">                v-else</span><br><span class="line">                @click=&quot;loveFn(false, obj)&quot;</span><br><span class="line">              /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 主体区域 --&gt;</span><br><span class="line">          &lt;div class=&quot;cmt-body&quot;&gt;</span><br><span class="line">            &#123;&#123; obj.content &#125;&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;!-- 尾部区域 --&gt;</span><br><span class="line">          &lt;div class=&quot;cmt-footer&quot;&gt;&#123;&#123; timeAgo(obj.pubdate) &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/van-list&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // ...</span><br><span class="line">      loading: false, // 底部加载状态</span><br><span class="line">      finished: false // 底部是否加载完成</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // ...</span><br><span class="line">    // 加载更多</span><br><span class="line">    onLoad () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.准备: data变量offset, 接口请求后, 保存分页要传的offset(来自上一次接口返回的last_id值, 做分页)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      offset: null // 下一页(偏移id), 一定初始值null(第一页不需要传, axios遇到null忽略此参数)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async getCommentListFn () &#123;</span><br><span class="line">      const res = await commentListAPI(&#123;</span><br><span class="line">        artId: this.$route.query.aid,</span><br><span class="line">        offset: this.offset // 把offset偏移量带给后台</span><br><span class="line">      &#125;)</span><br><span class="line">      this.commentList = res.data.data.results</span><br><span class="line">      this.totalCount = res.data.data.total_count || &#x27;&#x27;</span><br><span class="line">      this.offset = res.data.data.last_id // 保存起来为了做分页</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.准备: 在onLoad函数触发, 调用请求评论列表方法</strong></p><ul><li>把新数据和旧数据合并</li><li>关闭loading加载状态(置false), 下次触底如果loading为false, van-list组件才会再执行load事件</li><li>判断如果没有数据了, 把finished(置true), 代表加载完成, van-list组件不会再执行load事件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 获取评论列表</span><br><span class="line">    async getCommentListFn () &#123;</span><br><span class="line">      const res = await commentListAPI(&#123;</span><br><span class="line">        artId: this.$route.query.aid,</span><br><span class="line">        offset: this.offset // 把offset偏移量带给后台</span><br><span class="line">      &#125;)</span><br><span class="line">      // 判断是否还有数据</span><br><span class="line">      if (res.data.data.results.length === 0) &#123;</span><br><span class="line">        this.finished = true</span><br><span class="line">      &#125;</span><br><span class="line">      this.commentList = [...this.commentList, ...res.data.data.results] // 合并数据</span><br><span class="line">      this.totalCount = res.data.data.total_count || &#x27;&#x27; // 如果无评论数(0), 给空字符串(防止0微标出现)</span><br><span class="line">      this.offset = res.data.data.last_id // 保存起来为了做分页</span><br><span class="line">      // 关闭加载状态</span><br><span class="line">      this.loading = false</span><br><span class="line">    &#125;,</span><br><span class="line">    // 加载更多</span><br><span class="line">    onLoad () &#123;</span><br><span class="line">      this.getCommentListFn()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="个人中心页面"><a href="#个人中心页面" class="headerlink" title="个人中心页面"></a>个人中心页面</h2><div class="tip home"><p>第一、创建个人中心标签样式、请求数据、铺设页面</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/PI8Jo.png"/></div></div><p><strong>1.User/index.vue页面, 复制标签结构和样式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;user-container&quot;&gt;</span><br><span class="line">    &lt;!-- 用户基本信息面板 --&gt;</span><br><span class="line">    &lt;div class=&quot;user-card&quot;&gt;</span><br><span class="line">      &lt;!-- 用户头像、姓名 --&gt;</span><br><span class="line">      &lt;van-cell&gt;</span><br><span class="line">        &lt;!-- 使用 title 插槽来自定义标题 --&gt;</span><br><span class="line">        &lt;template #icon&gt;</span><br><span class="line">          &lt;img src=&quot;&quot; alt=&quot;&quot; class=&quot;avatar&quot;&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template #title&gt;</span><br><span class="line">          &lt;span class=&quot;username&quot;&gt;用户名&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template #label&gt;</span><br><span class="line">          &lt;van-tag color=&quot;#fff&quot; text-color=&quot;#007bff&quot;&gt;申请认证&lt;/van-tag&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/van-cell&gt;</span><br><span class="line">      &lt;!-- 动态、关注、粉丝 --&gt;</span><br><span class="line">      &lt;div class=&quot;user-data&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;user-data-item&quot;&gt;</span><br><span class="line">          &lt;span&gt;0&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;动态&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;user-data-item&quot;&gt;</span><br><span class="line">          &lt;span&gt;0&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;关注&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;user-data-item&quot;&gt;</span><br><span class="line">          &lt;span&gt;0&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;粉丝&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 操作面板 --&gt;</span><br><span class="line">    &lt;van-cell-group class=&quot;action-card&quot;&gt;</span><br><span class="line">      &lt;van-cell icon=&quot;edit&quot; title=&quot;编辑资料&quot; is-link /&gt;</span><br><span class="line">      &lt;van-cell icon=&quot;chat-o&quot; title=&quot;小思同学&quot; is-link /&gt;</span><br><span class="line">      &lt;van-cell icon=&quot;warning-o&quot; title=&quot;退出登录&quot; is-link /&gt;</span><br><span class="line">    &lt;/van-cell-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.user-container &#123;</span><br><span class="line">  .user-card &#123;</span><br><span class="line">    background-color: #007bff;</span><br><span class="line">    color: white;</span><br><span class="line">    padding-top: 20px;</span><br><span class="line">    .van-cell &#123;</span><br><span class="line">      background: #007bff;</span><br><span class="line">      color: white;</span><br><span class="line">      &amp;::after &#123;</span><br><span class="line">        display: none;</span><br><span class="line">      &#125;</span><br><span class="line">      .avatar &#123;</span><br><span class="line">        width: 60px;</span><br><span class="line">        height: 60px;</span><br><span class="line">        background-color: #fff;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        margin-right: 10px;</span><br><span class="line">      &#125;</span><br><span class="line">      .username &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .user-data &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-evenly;</span><br><span class="line">    align-items: center;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    padding: 30px 0;</span><br><span class="line">    .user-data-item &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      flex-direction: column;</span><br><span class="line">      justify-content: center;</span><br><span class="line">      align-items: center;</span><br><span class="line">      width: 33.33%;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>2.定义接口方法,在User/index.vue页面使用-获取数据-铺设到标签上</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;user-container&quot;&gt;</span><br><span class="line">    &lt;!-- 用户基本信息面板 --&gt;</span><br><span class="line">    &lt;div class=&quot;user-card&quot;&gt;</span><br><span class="line">      &lt;!-- 用户头像、姓名 --&gt;</span><br><span class="line">      &lt;van-cell&gt;</span><br><span class="line">        &lt;!-- 使用 title 插槽来自定义标题 --&gt;</span><br><span class="line">        &lt;template #icon&gt;</span><br><span class="line">          &lt;img :src=&quot;user.photo&quot; alt=&quot;&quot; class=&quot;avatar&quot;&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template #title&gt;</span><br><span class="line">          &lt;span class=&quot;username&quot;&gt;&#123;&#123; user.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template #label&gt;</span><br><span class="line">          &lt;van-tag color=&quot;#fff&quot; text-color=&quot;#007bff&quot;&gt;申请认证&lt;/van-tag&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/van-cell&gt;</span><br><span class="line">      &lt;!-- 动态、关注、粉丝 --&gt;</span><br><span class="line">      &lt;div class=&quot;user-data&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;user-data-item&quot;&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; user.art_count &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;动态&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;user-data-item&quot;&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; user.follow_count &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;关注&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;user-data-item&quot;&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; user.fans_count &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;粉丝&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; userInfoAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: &#123;&#125; // 用户对象</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  async created () &#123;</span><br><span class="line">    const res = await userInfoAPI()</span><br><span class="line">    console.log(res)</span><br><span class="line">    this.user = res.data.data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、实现退出登录功能，给用户一个确认提示</p></div><p><strong>1.给退出登录按钮绑定点击事件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 操作面板 --&gt;</span><br><span class="line">&lt;van-cell-group class=&quot;action-card&quot;&gt;</span><br><span class="line">    &lt;van-cell icon=&quot;edit&quot; title=&quot;编辑资料&quot; is-link /&gt;</span><br><span class="line">    &lt;van-cell icon=&quot;chat-o&quot; title=&quot;小思同学&quot; is-link /&gt;</span><br><span class="line">    &lt;van-cell icon=&quot;warning-o&quot; title=&quot;退出登录&quot; is-link @click=&quot;quit&quot;/&gt;</span><br><span class="line">&lt;/van-cell-group&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    quit () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.引入vant的Dialog, 然后当用户点击退出给用户提示, 用户选择确定时, 退出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class="line">import &#123; Dialog &#125; from &#x27;vant&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([&#x27;setToken&#x27;]),</span><br><span class="line">    quit () &#123;</span><br><span class="line">      Dialog.confirm(&#123;</span><br><span class="line">        title: &#x27;提示&#x27;,</span><br><span class="line">        message: &#x27;这就走了?不爱我了吗?&#x27;</span><br><span class="line">      &#125;).then(() =&gt; &#123;</span><br><span class="line">        // 清空vuex和本地</span><br><span class="line">        this.setToken(&#x27;&#x27;)</span><br><span class="line">        // 跳到登录页</span><br><span class="line">        this.$router.replace(&#x27;/login&#x27;)</span><br><span class="line">      &#125;).catch(() =&gt; &#123;</span><br><span class="line">        // on cancel</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第三、编辑信息页面创建和路由设置</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/PI7uy.png"/></div></div><p><strong>1.新建User/UserEdit.vue文件, 编辑用户信息页面文件, 准备标签和样式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;user-edit-container&quot;&gt;</span><br><span class="line">    &lt;!-- Header 区域 --&gt;</span><br><span class="line">    &lt;van-nav-bar title=&quot;编辑资料&quot; left-arrow @click-left=&quot;$router.back()&quot; fixed /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 用户资料 --&gt;</span><br><span class="line">    &lt;van-cell-group class=&quot;action-card&quot;&gt;</span><br><span class="line">      &lt;van-cell title=&quot;头像&quot; is-link center&gt;</span><br><span class="line">        &lt;template #default&gt;</span><br><span class="line">          &lt;van-image round class=&quot;avatar&quot; src=&quot;&quot;/&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/van-cell&gt;</span><br><span class="line">      &lt;van-cell title=&quot;名称&quot; is-link  /&gt;</span><br><span class="line">      &lt;van-cell title=&quot;生日&quot; is-link  /&gt;</span><br><span class="line">    &lt;/van-cell-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;UserEdit&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.user-edit-container &#123;</span><br><span class="line">  padding-top: 46px;</span><br><span class="line">  .avatar &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>2.注册需要的van-image组件,添加编辑页面路由,点击编辑选项单元格, 跳转路由</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-cell icon=&quot;edit&quot; title=&quot;编辑资料&quot; is-link to=&quot;/user_editor&quot;/&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第四、编辑信息页面数据铺设</p></div><p><strong>定义接口方法,触发网络请求拿到数据后, 渲染基础数据展示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;user-edit-container&quot;&gt;</span><br><span class="line">    &lt;!-- Header 区域 --&gt;</span><br><span class="line">    &lt;van-nav-bar title=&quot;编辑资料&quot; left-arrow @click-left=&quot;$router.back()&quot; fixed /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 用户资料 --&gt;</span><br><span class="line">    &lt;van-cell-group class=&quot;action-card&quot;&gt;</span><br><span class="line">      &lt;van-cell title=&quot;头像&quot; is-link center&gt;</span><br><span class="line">        &lt;template #default&gt;</span><br><span class="line">          &lt;van-image round class=&quot;avatar&quot; :src=&quot;profile.photo&quot; /&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/van-cell&gt;</span><br><span class="line">      &lt;van-cell title=&quot;名称&quot; is-link :value=&quot;profile.name&quot; /&gt;</span><br><span class="line">      &lt;van-cell title=&quot;生日&quot; is-link :value=&quot;profile.birthday&quot; /&gt;</span><br><span class="line">    &lt;/van-cell-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; userProfileAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;UserEdit&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      profile: &#123;&#125; // 用户基本资料</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  async created () &#123;</span><br><span class="line">    const res = await userProfileAPI()</span><br><span class="line">    console.log(res)</span><br><span class="line">    this.profile = res.data.data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第五、点击头像出现文件选择器，获取文件对象，上传图片文件对象, 表单给后台</p></div><p><strong>1.先实现前端点击获取文件对象效果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-cell title=&quot;头像&quot; is-link center&gt;</span><br><span class="line">    &lt;template #default&gt;</span><br><span class="line">        &lt;van-image round class=&quot;avatar&quot; :src=&quot;profile.photo&quot; @click=&quot;$refs.iptFile.click()&quot;/&gt;</span><br><span class="line">        &lt;!-- file 选择框 --&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">               type=&quot;file&quot;</span><br><span class="line">               ref=&quot;iptFile&quot;</span><br><span class="line">               v-show=&quot;false&quot;</span><br><span class="line">               accept=&quot;image/*&quot;</span><br><span class="line">               @change=&quot;onFileChange&quot;</span><br><span class="line">               /&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-cell&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 文件选择方法</span><br><span class="line">    onFileChange (ev) &#123;</span><br><span class="line">      console.log(ev.target.files[0])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.引入接口, 传入表单对象, 更新页面</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; updatePhotoAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 文件选择方法</span><br><span class="line">    async onFileChange (ev) &#123;</span><br><span class="line">    //   console.log(ev.target.files[0])</span><br><span class="line">      if (ev.target.files.length === 0) return // 防止用户未选择图片</span><br><span class="line">      const fd = new FormData()</span><br><span class="line">      fd.append(&#x27;photo&#x27;, ev.target.files[0]) // photo在表单里参数名携带</span><br><span class="line">      const res = await updatePhotoAPI(fd)</span><br><span class="line">      console.log(res)</span><br><span class="line">      this.profile.photo = res.data.data.photo // 更新最新头像</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>小技巧：移花接木，点击图片, js模拟点击了input[type=file]标签出现选择图片窗口</p></div><div class="tip home"><p>第六、点击名称, 姓名输入框,填入默认值, 自动聚焦,效果如下</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/PIAYI.png"/></div></div><p><strong>1.dialog全局注册, 然后在UserEdit.vue这个页面使用 - 准备弹出输入框层</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 姓名部分 --&gt;</span><br><span class="line">&lt;van-cell</span><br><span class="line">        title=&quot;名称&quot;</span><br><span class="line">        is-link</span><br><span class="line">        :value=&quot;profile.name&quot;</span><br><span class="line">        @click=&quot;showNameDialogFn&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修改用户名称的对话框 --&gt;</span><br><span class="line">&lt;van-dialog</span><br><span class="line">      v-model=&quot;isShowNameDialog&quot;</span><br><span class="line">      title=&quot;修改名称&quot;</span><br><span class="line">      show-cancel-button</span><br><span class="line">      :before-close=&quot;onNameDialogBeforeClose&quot;&gt;</span><br><span class="line">      &lt;!-- 输入框 --&gt;</span><br><span class="line">      &lt;van-field</span><br><span class="line">        v-model.trim=&quot;userName&quot;</span><br><span class="line">        input-align=&quot;center&quot;</span><br><span class="line">        maxlength=&quot;7&quot;</span><br><span class="line">        placeholder=&quot;请输入名称&quot;</span><br><span class="line">        v-fofo</span><br><span class="line">      /&gt;</span><br><span class="line">&lt;/van-dialog&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShowNameDialog: false, // 是否显示姓名弹出框</span><br><span class="line">      userName: &#x27;&#x27; // 编辑用户名</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 点击名字-出现弹出框</span><br><span class="line">    showNameDialogFn () &#123;</span><br><span class="line">      this.isShowNameDialog = true</span><br><span class="line">      this.userName = this.profile.name // 设置默认显示内容</span><br><span class="line">    &#125;,</span><br><span class="line">    // 姓名修改弹出层-关闭前方法</span><br><span class="line">    onNameDialogBeforeClose (action, done) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第七、永远不要相信用户在输入框, 输入的内容, 防止注入攻击</p></div><ul><li>1-7位中英文数字组合</li><li>不通过, 弹窗不关闭, 给个提示</li><li>通过, 弹窗关闭, 调用接口</li></ul><p><strong>1.在弹窗关闭方法里判断</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 姓名修改弹出层-关闭前方法</span><br><span class="line">async onNameDialogBeforeClose (action, done) &#123;</span><br><span class="line">    // action的值: confirm或cancel(点击按钮区分)</span><br><span class="line">    if (action === &#x27;confirm&#x27;) &#123;</span><br><span class="line">        // 确定</span><br><span class="line">        // unicode编码 \u4092</span><br><span class="line">        // url编码 %E2%C3%D1</span><br><span class="line">        if (/^[A-Za-z0-9\u4e00-\u9fa5]&#123;1,7&#125;$/.test(this.userName)) &#123;</span><br><span class="line">            // 通过校验</span><br><span class="line">            // 调用接口</span><br><span class="line">            // 更新页面显示的名字</span><br><span class="line"></span><br><span class="line">            // 关闭弹窗</span><br><span class="line">            done()</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 提示用户</span><br><span class="line">            Notify(&#123; type: &#x27;warning&#x27;, message: &#x27;用户名中英文和数字1-7位&#x27; &#125;)</span><br><span class="line">            // 阻止弹窗关闭</span><br><span class="line">            done(false)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (action === &#x27;cancel&#x27;) &#123;</span><br><span class="line">        // 取消</span><br><span class="line">        done()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.定义接口方法,在通过校验位置, 调用接口更新</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; updateProfileAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">if (/^[A-Za-z0-9\u4e00-\u9fa5]&#123;1,7&#125;$/.test(this.userName)) &#123;</span><br><span class="line">    // 通过校验</span><br><span class="line">    // 调用接口</span><br><span class="line">    await updateProfileAPI(&#123;</span><br><span class="line">        userName: this.userName</span><br><span class="line">    &#125;)</span><br><span class="line">    // 更新页面显示的名字</span><br><span class="line">    this.profileObj.name = this.userName</span><br><span class="line">    // 关闭弹窗</span><br><span class="line">    done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第八、找到dateTimePiker选择时间组件，准备进行生日修改</p></div><p><strong>1.注册DataTimePicker组件，在UserEdit.vue页面使用, 定义相关变量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 修改时间 --&gt;</span><br><span class="line">&lt;van-popup v-model=&quot;isShowBirth&quot; position=&quot;bottom&quot; style=&quot;height: 50%&quot; round&gt;</span><br><span class="line">      &lt;!-- 日期选择控件 --&gt;</span><br><span class="line">      &lt;van-datetime-picker</span><br><span class="line">        v-model=&quot;currentDate&quot;</span><br><span class="line">        type=&quot;date&quot;</span><br><span class="line">        title=&quot;选择出生日期&quot;</span><br><span class="line">        :min-date=&quot;minDate&quot;</span><br><span class="line">        :max-date=&quot;maxDate&quot;</span><br><span class="line">        :show-toolbar=&quot;true&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">&lt;/van-popup&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">  // ...</span><br><span class="line">      isShowBirth: false, // 显示时间选择器</span><br><span class="line">      minDate: new Date(1900, 0, 1), // 最小的可选的日期</span><br><span class="line">      maxDate: new Date(), // 最大的可选日期</span><br><span class="line">      currentDate: new Date() // 当前日期</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.点击单元格, 弹出时间选择组件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-cell title=&quot;生日&quot; is-link :value=&quot;profile.birthday&quot; @click=&quot;isShowBirth = true&quot;/&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第九、实现生日修改，监测取消和确定按钮事件，分别实现功能</p></div><p><strong>1.绑定事件, 实现功能</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 修改时间 --&gt;</span><br><span class="line">&lt;van-popup</span><br><span class="line">v-model=&quot;isShowBirth&quot;</span><br><span class="line">position=&quot;bottom&quot;</span><br><span class="line">style=&quot;height: 50%&quot;</span><br><span class="line">round&gt;</span><br><span class="line">    &lt;!-- 日期选择控件 --&gt;</span><br><span class="line">    &lt;van-datetime-picker</span><br><span class="line">v-model=&quot;currentDate&quot;</span><br><span class="line">type=&quot;date&quot;</span><br><span class="line">title=&quot;选择出生日期&quot;</span><br><span class="line">:min-date=&quot;minDate&quot;</span><br><span class="line">:max-date=&quot;maxDate&quot;</span><br><span class="line">:show-toolbar=&quot;true&quot;</span><br><span class="line">@cancel=&quot;isShowBirth = false&quot;</span><br><span class="line">@confirm=&quot;confirmFn&quot;/&gt;</span><br><span class="line">&lt;/van-popup&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import moment from &#x27;moment&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            // 弹出时间选择框</span><br><span class="line">            showBirthFn () &#123;</span><br><span class="line">                this.isShowBirth = true</span><br><span class="line">                this.currentDate = new Date(this.profile.birthday) // 设置data组件默认显示时间</span><br><span class="line">            &#125;,</span><br><span class="line">            // 时间选择</span><br><span class="line">            async confirmFn () &#123;</span><br><span class="line">                // console.log(this.currentDate instanceof Date)</span><br><span class="line">                // this.currentDate里值是日期对象</span><br><span class="line">                // 但是后台要&quot;年-月-日&quot;格式字符串参数值</span><br><span class="line"></span><br><span class="line">                console.log(this.currentDate)</span><br><span class="line">                const dateStr = moment(this.currentDate).format(&#x27;YYYY-MM-DD&#x27;)</span><br><span class="line">                await updateProfileAPI(&#123;</span><br><span class="line">                    birthday: dateStr</span><br><span class="line">                &#125;)</span><br><span class="line">                // 前端页面同步</span><br><span class="line">                this.profile.birthday = dateStr</span><br><span class="line">                // 时间选择器关闭</span><br><span class="line">                this.isShowBirth = false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：这里面涉及到一个时间的格式转换问题，由于后台返回的生日是字符转 而我们前端需要转换成日期对象来使用，所以可以使用 moment包 来帮我们进行处理，当然最好还是自己写一个js，方便减少打包代码体积</p></div><div class="tip "><p>未完待续。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（六）&quot;&gt;&lt;a href=&quot;#移动端项目总结（六）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（六）&quot;&gt;&lt;/a&gt;移动端项目总结（六）&lt;/h1&gt;&lt;h2 id=&quot;文章评论功能&quot;&gt;&lt;a href=&quot;#文章评论功能&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端项目总结（五）</title>
    <link href="https://tailante.github.io/posts/b2f7.html"/>
    <id>https://tailante.github.io/posts/b2f7.html</id>
    <published>2022-10-04T00:55:37.000Z</published>
    <updated>2022-10-04T03:14:56.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（五）"><a href="#移动端项目总结（五）" class="headerlink" title="移动端项目总结（五）"></a>移动端项目总结（五）</h1><h2 id="文章搜索功能"><a href="#文章搜索功能" class="headerlink" title="文章搜索功能"></a>文章搜索功能</h2><div class="tip home"><p>第一、首页点击 放大镜 按钮-跳转路由-出现搜索页面</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/PKQLF.png"/></div></div><p><strong>1.views/Search/index.vue - 新建页面和标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 搜索页面头部 --&gt;</span><br><span class="line">    &lt;div class=&quot;search-header&quot;&gt;</span><br><span class="line">      &lt;!-- 后退按钮 --&gt;</span><br><span class="line">      &lt;van-icon name=&quot;arrow-left&quot; color=&quot;white&quot; size=&quot;0.48rem&quot; class=&quot;goback&quot; @click=&quot;$router.back()&quot;/&gt;</span><br><span class="line">      &lt;!-- 搜索组件 --&gt;</span><br><span class="line">      &lt;van-search placeholder=&quot;请输入搜索关键词&quot; background=&quot;#007BFF&quot; shape=&quot;round&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      kw: &#x27;&#x27; // 搜索关键字</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.search-header &#123;</span><br><span class="line">  height: 46px;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  background-color: #007bff;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  /*后退按钮*/</span><br><span class="line">  .goback &#123;</span><br><span class="line">    padding-left: 14px;</span><br><span class="line">  &#125;</span><br><span class="line">  /*搜索组件*/</span><br><span class="line">  .van-search &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>2.配置路由 - 与layout并列关系</strong><br><strong>3.点击Home页面右上角搜索图标, 可以切换路由到搜索页面</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template #right&gt;</span><br><span class="line">&lt;van-icon name=&quot;search&quot; size=&quot;0.48rem&quot; color=&quot;#fff&quot; @click=&quot;$router.push(&#x27;/search&#x27;)&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、进入搜索页后，输入框自动聚焦——封装自定义指令插件</p></div><p><strong>1.utils/directives.js, 定义全局自定义指令插件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">// 插件对象(必须有install方法, 才可以注入到Vue.use中)</span><br><span class="line">export default &#123;</span><br><span class="line">  install () &#123;</span><br><span class="line">    Vue.directive(&#x27;fofo&#x27;, &#123;</span><br><span class="line">      inserted (el) &#123;</span><br><span class="line">        // 指令在van-search组件身上, 获取的是组件根标签div, 而input在标签内</span><br><span class="line">        el = el.querySelector(&#x27;input&#x27;)</span><br><span class="line">        el.focus()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.引入到main.js注册</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import diretivesObj from &#x27;@/utils/directives&#x27;</span><br><span class="line">Vue.use(diretivesObj)</span><br></pre></td></tr></table></figure><p><strong>3.去van-search上使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 搜索组件 --&gt;</span><br><span class="line">&lt;van-search v-fofo placeholder=&quot;请输入搜索关键词&quot; background=&quot;#007BFF&quot; shape=&quot;round&quot; /&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第三、性能优化——输入框防抖</p></div><p><strong>1.van-search关联kw变量</strong><br><strong>2.在data中声明变量timer, 保存延迟定时器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        kw: &#x27;&#x27;, // 搜索关键字</span><br><span class="line">        timer: null // 防抖, 用的定时器</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.监听输入框的@inupt事件, 在事件处理函数中使用防抖操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-search v-fofo v-model=&quot;kw&quot; placeholder=&quot;请输入搜索关键词&quot; background=&quot;#007BFF&quot; shape=&quot;round&quot; @input=&quot;inputFn&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        inputFn () &#123;</span><br><span class="line">            clearTimeout(this.timer)</span><br><span class="line">            this.timer = setTimeout(() =&gt; &#123;</span><br><span class="line">                if (this.kw.length === 0) return // 防止空内容触发下面逻辑</span><br><span class="line">                console.log(this.kw)</span><br><span class="line">            &#125;, 500)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第四、发送接口请求，搜索建议列表铺设</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/PKpTy.png"/></div></div><p><strong>1.准备标签、样式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 搜索建议列表 --&gt;</span><br><span class="line">&lt;div class=&quot;sugg-list&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;sugg-item&quot; &gt;</span><br><span class="line">        搜索建议</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">/*搜索建议列表样式 */</span><br><span class="line">.sugg-list &#123;</span><br><span class="line">  .sugg-item &#123;</span><br><span class="line">    padding: 0 15px;</span><br><span class="line">    border-bottom: 1px solid #f8f8f8;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">    // 实现省略号的三行代码</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.在Search/index.vue使用, 请求数据，把数据保存到data里的变量中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; suggestListAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      kw: &#x27;&#x27;, // 搜索关键字</span><br><span class="line">      timer: null, // 防抖, 用的定时器</span><br><span class="line">      suggestList: [] // 建议关键字列表</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async inputFn () &#123;</span><br><span class="line">      clearTimeout(this.timer)</span><br><span class="line">      this.timer = setTimeout(async () =&gt; &#123;</span><br><span class="line">        if (this.kw.length === 0) return // 防止空内容触发下面逻辑</span><br><span class="line">        const res = await suggestListAPI(&#123;</span><br><span class="line">          q: this.kw</span><br><span class="line">        &#125;)</span><br><span class="line">        this.suggestList = res.data.data.options</span><br><span class="line">      &#125;, 500)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.渲染循环到页面上</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 搜索建议列表 --&gt;</span><br><span class="line">&lt;div class=&quot;sugg-list&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;sugg-item&quot; v-for=&quot;(str, index) in suggestList&quot; :key=&quot;index&quot; v-html=&quot;lightFn(str, kw)&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第五、搜索建议列表输入文字高亮效果</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/PKXpd.png"/></div></div><p><strong>1.定义高亮方法utils/str.js - 封装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 转换高亮文字的方法</span><br><span class="line"> * @param &#123;*&#125; str 要被处理的字符串</span><br><span class="line"> * @param &#123;*&#125; target 要匹配关键字</span><br><span class="line"> * @returns 处理后带标签高亮的方法</span><br><span class="line"> */</span><br><span class="line">export const lightFn = (str, target) =&gt; &#123;</span><br><span class="line">  const reg = new RegExp(target, &#x27;ig&#x27;)</span><br><span class="line"></span><br><span class="line">  return str.replace(reg, (match) =&gt; &#123; // match是关键字匹配的值(尽量保持原样)</span><br><span class="line">    return `&lt;span style=&quot;color: red&quot;&gt;$&#123;match&#125;&lt;/span&gt;`</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：正则的语法糖写法为什么不能使用？<br>因为如果使用变量作为正则的匹配条件，不能使用简化的语法糖，匹配的结果不能使用 target 因为匹配回来的菜单可能有大小写，而你输入框的大小写是固定的。<br>同时 replace 可以穿第二个参数，第二个参数可以是函数 而这个函数里面的第一个参数就是匹配的人家原来的值</p></div><p><strong>2.导入到vue组件页面, 注册, 使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 搜索页面头部 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 搜索建议列表 --&gt;</span><br><span class="line">    &lt;div class=&quot;sugg-list&quot; v-for=&quot;(str, index) in suggestList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;sugg-item&quot; v-html=&quot;lightFn(str, kw)&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; lightFn &#125; from &#x27;@/utils/str&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    lightFn // key和value变量名同名</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：铺设搜索建议列表为什么不使用插值表达式而使用 v-html ？<br>因为，插值表达式的的用法与 v-text 属性用法相同，它们不会解析html标签，导致我们的文字高亮效果无法实现</p></div><div class="tip home"><p>第六、搜索记录历史铺设</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/PKvZI.png"/></div></div><p><strong>1.准备结构与样式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 搜索历史 --&gt;</span><br><span class="line">&lt;div class=&quot;search-history&quot;&gt;</span><br><span class="line">    &lt;!-- 标题 --&gt;</span><br><span class="line">    &lt;van-cell title=&quot;搜索历史&quot;&gt;</span><br><span class="line">        &lt;!-- 使用 right-icon 插槽来自定义右侧图标 --&gt;</span><br><span class="line">        &lt;template #right-icon&gt;</span><br><span class="line">&lt;van-icon name=&quot;delete&quot; class=&quot;search-icon&quot; /&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/van-cell&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 历史列表 --&gt;</span><br><span class="line">    &lt;div class=&quot;history-list&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;history-item&quot;&gt;历史文字&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">/**搜索历史 */</span><br><span class="line">.search-icon &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  line-height: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.history-list &#123;</span><br><span class="line">  padding: 0 10px;</span><br><span class="line">  .history-item &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    padding: 8px 14px;</span><br><span class="line">    background-color: #efefef;</span><br><span class="line">    margin: 10px 8px 0px 8px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.定义初始变量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history: [&#x27;API&#x27;, &#x27;java&#x27;, &#x27;css&#x27;, &#x27;前端&#x27;, &#x27;后台接口&#x27;, &#x27;python&#x27;] // 搜索历史</span><br></pre></td></tr></table></figure><p><strong>3.循环铺设</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 历史列表 --&gt;</span><br><span class="line">&lt;div class=&quot;history-list&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;history-item&quot; v-for=&quot;str, index in history&quot; :key=&quot;index&quot;&gt;&#123;&#123; str &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>4.互斥条件, 搜索列表，如果不搜索则显示历史记录，开始搜索则关闭历史记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 搜索建议列表 --&gt;</span><br><span class="line">&lt;div class=&quot;sugg-list&quot; v-if=&quot;kw.length !== 0&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 搜索历史 --&gt;</span><br><span class="line">&lt;div class=&quot;search-history&quot; v-else&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第七、输入框回车后/点击联想菜单项后/点击历史记录, 均会跳转到搜索结果页</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/PcOQk.png"/></div></div><p><strong>1.定义搜索结果页面Search/SearchResult.vue - 并且配置路由</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;!-- 搜索结果页-头部导航 --&gt;</span><br><span class="line">      &lt;div class=&quot;search-result-container&quot;&gt;</span><br><span class="line">        &lt;!-- 点击实现后退效果 --&gt;</span><br><span class="line">        &lt;van-nav-bar</span><br><span class="line">          title=&quot;搜索结果&quot;</span><br><span class="line">          left-arrow</span><br><span class="line">          @click-left=&quot;$router.go(-1)&quot;</span><br><span class="line">          fixed</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;SearchResult&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.search-result-container &#123;</span><br><span class="line">  padding-top: 46px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>2.返回箭头颜色到cover.css里定制成白色即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@nav-bar-icon-color: white;</span><br></pre></td></tr></table></figure><p><strong>3.配置路由，同时Search/index.vue - 回车跳转传参</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-search</span><br><span class="line">            v-fofo</span><br><span class="line">            v-model=&quot;kw&quot;</span><br><span class="line">            placeholder=&quot;请输入搜索关键词&quot;</span><br><span class="line">            background=&quot;#007BFF&quot;</span><br><span class="line">            shape=&quot;round&quot;</span><br><span class="line">            @input=&quot;inputFn&quot;</span><br><span class="line">            @search=&quot;enterFn&quot;</span><br><span class="line">            /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 输入框回车</span><br><span class="line">        enterFn () &#123;</span><br><span class="line">            this.$router.push(&#123;</span><br><span class="line">                path: `/search/$&#123;this.kw&#125;`</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>4.Search/index.vue - 联想菜单项, 点击跳转传参</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;sugg-list&quot; v-if=&quot;kw.length !== 0&quot;&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">         class=&quot;sugg-item&quot;</span><br><span class="line">         v-for=&quot;(str, index) in suggestList&quot;</span><br><span class="line">         :key=&quot;index&quot;</span><br><span class="line">         v-html=&quot;lightFn(str, kw)&quot;</span><br><span class="line">         @click=&quot;clickFn(str)&quot;</span><br><span class="line">         &gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 建议列表点击</span><br><span class="line">        clickFn (str) &#123;</span><br><span class="line">            this.$router.push(&#123;</span><br><span class="line">                path: `/search/$&#123;str&#125;`</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>5.点击历史记录, 跳转结果页</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 历史列表 --&gt;</span><br><span class="line">&lt;div class=&quot;history-list&quot;&gt;</span><br><span class="line">    &lt;span</span><br><span class="line">          class=&quot;history-item&quot;</span><br><span class="line">          v-for=&quot;(str, index) in history&quot;</span><br><span class="line">          :key=&quot;index&quot;</span><br><span class="line">          @click=&quot;hisClickFn(str)&quot;</span><br><span class="line">          &gt;&#123;&#123; str &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">        // 历史记录点击</span><br><span class="line">        hisClickFn (str) &#123;</span><br><span class="line">          this.$router.push(&#123;</span><br><span class="line">            path: `/search/$&#123;str&#125;`</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第八、输入框回车后/点击联想菜单项后, 均会保存历史搜索记录</p></div><p><strong>1.在输入框回车确认事件中, 录入搜索关键字</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.history.push(this.kw) // 保存搜索关键字</span><br></pre></td></tr></table></figure><p><strong>2.在点击联想菜单项, 录入搜索关键字</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.history.push(str) // 保存搜索关键字</span><br></pre></td></tr></table></figure><div class="tip warning"><p>问题1: 发现回来 history 数组里并未渲染历史列表<br>因为跳转页面, 原来页面被释放了, 回来后数组重新创建<br>解决: 本地缓存起来</p></div><p><strong>3.使用 watch 深度监听 history 数组的变化，同时重复的记录不应该多次保存，只需要保存一次</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    history: &#123; // 历史记录数组改变</span><br><span class="line">      deep: true,</span><br><span class="line">      handler () &#123;</span><br><span class="line">        // set 数组去重</span><br><span class="line">        // 如果里面是对象，那么它比较的是对象的地址</span><br><span class="line">        const theSet = new Set(this.history)</span><br><span class="line">        const arr = Array.from(theSet)</span><br><span class="line">        setStorage(&#x27;history&#x27;, JSON.stringify(arr))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">// 刚打开默认从本地获取history数组的值</span><br><span class="line">history: JSON.parse(localStorage.getItem(&#x27;his&#x27;)) || [] // 搜索历史</span><br></pre></td></tr></table></figure><div class="tip warning"><p>问题2: 但是发现跳转后, 并未保存到本地<br>主要是因为 vue 会先将回调执行完 才会再次解析模板（提高效率，不然变化一次解析一次太浪费时间了）,watch才能监听到history在回调中值的改变(但是当回调执行完已经跳路由了)<br>因为路由跳转执行先于 watch,所以需要对路由使用 $nextTick 或者加定时器</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 输入框回车</span><br><span class="line">enterFn () &#123;</span><br><span class="line">    this.history.push(this.kw) // 保存搜索关键字</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        this.$router.push(&#123;</span><br><span class="line">            path: `/search/$&#123;this.kw&#125;`</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 建议列表点击</span><br><span class="line">clickFn (str) &#123;</span><br><span class="line">this.history.push(str) // 保存搜索关键字</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">    this.$router.push(&#123;</span><br><span class="line">    path: `/search/$&#123;str&#125;`</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.点击删除小图标, 清空搜索历史</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 标题 --&gt;</span><br><span class="line">&lt;van-cell title=&quot;搜索历史&quot;&gt;</span><br><span class="line">    &lt;!-- 使用 right-icon 插槽来自定义右侧图标 --&gt;</span><br><span class="line">    &lt;template #right-icon&gt;</span><br><span class="line">&lt;van-icon name=&quot;delete&quot; class=&quot;search-icon&quot; @click=&quot;clearFn&quot;/&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-cell&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">        // 清空搜索历史</span><br><span class="line">        clearFn () &#123;</span><br><span class="line">          this.history = [] // watch会触发, 把空数组保存到本地</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第九、发送请求，搜索结果列表铺设</p></div><p><strong>1.定义搜索结果列表接口</strong><br><strong>2.在Search/SearchResult.vue中 接收路由参数, 然后 调用接口拿到搜索结果列表数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; searchResultListAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;SearchResult&#x27;,</span><br><span class="line">  async created () &#123;</span><br><span class="line">    const res = await searchResultListAPI(&#123;</span><br><span class="line">      q: this.$route.params.keywords // 拿到关键词, keywords来源于router/index.js你定义的动态路由参数名</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.Search/SearchResult.vue - 标签准备 - 复用components/ArticleItem.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 可以考虑, 把Home/components/ArticleItem 挪到全局公共组件src/components文件夹下</span><br><span class="line"></span><br><span class="line">&lt;!-- 搜索结果 --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;article-item&gt;&lt;/article-item&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ArticleItem from &#x27;@/components/ArticleItem&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ArticleItem</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>4.SearchResult.vue - 接收数据, 循环文章单元格, 传入文章对象 - 查看效果</strong></p><div class="tip warning"><p>这就是为什么我们前文中，不能将发送请求逻辑写入到 ArticleItem，因为复用的组件只需要进行接收数据渲染即可</p></div><div class="tip home"><p>第十、搜索结果——上拉加载更多</p></div><p><strong>1.准备van-list组件和变量以及方法, 单独定义个getSearchResultFn方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 搜索结果页-头部导航 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 搜索结果 --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;van-list</span><br><span class="line">        v-model=&quot;loading&quot;</span><br><span class="line">        :finished=&quot;finished&quot;</span><br><span class="line">        finished-text=&quot;没有更多了&quot;</span><br><span class="line">        @load=&quot;onLoad&quot;</span><br><span class="line">        :immediate-check=&quot;false&quot;</span><br><span class="line">        offset=&quot;50&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;article-item</span><br><span class="line">          v-for=&quot;obj in articleList&quot;</span><br><span class="line">          :key=&quot;obj.art_id&quot;</span><br><span class="line">          :obj=&quot;obj&quot;</span><br><span class="line">        &gt;&lt;/article-item&gt;</span><br><span class="line">      &lt;/van-list&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      articleList: [], // 文章数据</span><br><span class="line">      loading: false, // 加载状态</span><br><span class="line">      finished: false // 全部加载完成状态</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 触底加载更多</span><br><span class="line">    onLoad () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    // 获取搜索结果</span><br><span class="line">    async getSearchResultFn () &#123;</span><br><span class="line">      const res = await searchResultListAPI(&#123;</span><br><span class="line">        q: this.$route.params.keywords // 拿到关键词, keywords来源于router/index.js你定义的动态路由参数名</span><br><span class="line">      &#125;)</span><br><span class="line">      console.log(res)</span><br><span class="line">      // 数据预处理</span><br><span class="line">      res.data.data.results.forEach((obj) =&gt; &#123;</span><br><span class="line">        obj.pubdate = timeAgo(obj.pubdate)</span><br><span class="line">      &#125;)</span><br><span class="line">      this.articleList = res.data.data.results</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    this.getSearchResultFn()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.在onLoad触发的网络请求函数中,接口已经准备好, page传参,data变量里定义page: 1,onLoad方法中判断现在有数据, page++, 发请求</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      articleList: [], // 文章数据</span><br><span class="line">      loading: false, // 加载状态</span><br><span class="line">      finished: false, // 全部加载完成状态</span><br><span class="line">      page: 1 // 页码</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 触底加载更多</span><br><span class="line">    onLoad () &#123;</span><br><span class="line">      if (this.articleList.length &gt; 0) &#123;</span><br><span class="line">        this.page++</span><br><span class="line">        this.getSearchResultFn()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 获取搜索结果</span><br><span class="line">    async getSearchResultFn () &#123;</span><br><span class="line">      const res = await searchResultListAPI(&#123;</span><br><span class="line">        q: this.$route.params.keywords, // 拿到关键词, keywords来源于router/index.js你定义的动态路由参数名</span><br><span class="line">        page: this.page</span><br><span class="line">      &#125;)</span><br><span class="line">      console.log(res)</span><br><span class="line">      // 更多数据判断</span><br><span class="line">      if (res.data.data.results.length === 0) &#123;</span><br><span class="line">        this.finished = true</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 数据预处理</span><br><span class="line">      res.data.data.results.forEach((obj) =&gt; &#123;</span><br><span class="line">        obj.pubdate = timeAgo(obj.pubdate)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      // 合并数据</span><br><span class="line">      this.articleList = [...this.articleList, ...res.data.data.results]</span><br><span class="line">      this.loading = false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>由于前文已经介绍过该功能的用法，这里不做过多阐述，发送请求的参数变化主要取决于接口文档的变化</p></div><h2 id="文章详情"><a href="#文章详情" class="headerlink" title="文章详情"></a>文章详情</h2><div class="tip home"><p>第一、文章详情页创建和路由</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/04/PowfI.png"/></div></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- Header 区域 --&gt;</span><br><span class="line">    &lt;van-nav-bar fixed title=&quot;文章详情&quot; left-arrow @click-left=&quot;$router.back()&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 文章信息区域 --&gt;</span><br><span class="line">    &lt;div class=&quot;article-container&quot;&gt;</span><br><span class="line">      &lt;!-- 文章标题 --&gt;</span><br><span class="line">      &lt;h1 class=&quot;art-title&quot;&gt;小程序&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 用户信息 --&gt;</span><br><span class="line">      &lt;van-cell center title=&quot;张三&quot; label=&quot;3天前&quot;&gt;</span><br><span class="line">        &lt;template #icon&gt;</span><br><span class="line">          &lt;img src=&quot;&quot; alt=&quot;&quot; class=&quot;avatar&quot;&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template #default&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;van-button type=&quot;info&quot; size=&quot;mini&quot;&gt;已关注&lt;/van-button&gt;</span><br><span class="line">            &lt;van-button icon=&quot;plus&quot; type=&quot;info&quot; size=&quot;mini&quot; plain&gt;关注&lt;/van-button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/van-cell&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 分割线 --&gt;</span><br><span class="line">      &lt;van-divider&gt;&lt;/van-divider&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 文章内容 --&gt;</span><br><span class="line">      &lt;div class=&quot;art-content&quot;&gt;好好学习, 天天向上&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 分割线 --&gt;</span><br><span class="line">      &lt;van-divider&gt;End&lt;/van-divider&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 点赞 --&gt;</span><br><span class="line">      &lt;div class=&quot;like-box&quot;&gt;</span><br><span class="line">        &lt;van-button icon=&quot;good-job&quot; type=&quot;danger&quot; size=&quot;small&quot;&gt;已点赞&lt;/van-button&gt;</span><br><span class="line">        &lt;van-button icon=&quot;good-job-o&quot; type=&quot;danger&quot; plain size=&quot;small&quot;&gt;点赞&lt;/van-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.article-container &#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin-top: 46px;</span><br><span class="line">&#125;</span><br><span class="line">.art-title &#123;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  margin: 10px 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.art-content &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  line-height: 24px;</span><br><span class="line">  width: 100%;</span><br><span class="line">  overflow-x: scroll;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">    /deep/ img&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">    /deep/ pre &#123;</span><br><span class="line">        white-space: pre-wrap;</span><br><span class="line">        word-wrap: break-word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.van-cell &#123;</span><br><span class="line">  padding: 5px 0;</span><br><span class="line">  &amp;::after &#123;</span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.avatar &#123;</span><br><span class="line">  width: 60px;</span><br><span class="line">  height: 60px;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  background-color: #f8f8f8;</span><br><span class="line">  margin-right: 5px;</span><br><span class="line">  border: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.like-box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、首页点击文章/搜索结果点击，跳转详情（每条文章右下角x号首页有, 搜索结果没有）</p></div><p><strong>1.在SearchResult.vue里的文章单元格article-item组件上点击跳转</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;article-item</span><br><span class="line">              v-for=&quot;obj in articleList&quot;</span><br><span class="line">              :key=&quot;obj.art_id&quot;</span><br><span class="line">              :obj=&quot;obj&quot;</span><br><span class="line">              @click.native=&quot;$router.push(`/article_detail?aid=$&#123;obj.art_id&#125;`)&quot;</span><br><span class="line">              &gt;&lt;/article-item&gt;</span><br></pre></td></tr></table></figure><p><strong>2.在Home/ArticleList.vue的ArticleItem也点击跳转, 同样方式传参</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文章列表 --&gt;</span><br><span class="line">&lt;article-item</span><br><span class="line">              v-for=&quot;item in articleList&quot;</span><br><span class="line">              :key=&quot;item.art_id&quot;</span><br><span class="line">              :obj=&quot;item&quot;</span><br><span class="line">              @dislike=&quot;dislikeFn&quot;</span><br><span class="line">              @reports=&quot;reportsFn&quot;</span><br><span class="line">              @click.native=&quot;$router.push(`/article_detail?aid=$&#123;item.art_id&#125;`)&quot;</span><br><span class="line">              &gt;&lt;/article-item&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>==注意, ArticleItem是组件, 包括Vant的都是组件, 组件身上的事件都是自定义事件(别看是叫click)==<br>组件内需要$emit(‘click’)才会执行<br>解决: 给组件绑定原生的点击事件@click.native  (使用修饰符)</p></div><p><strong>3.首页x, 点击也跳转详情了, 原因: 事件冒泡, 解决</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 在src/components/ArticleItem, 阻止x的事件冒泡</span><br><span class="line"></span><br><span class="line">&lt;!-- 反馈按钮 --&gt;</span><br><span class="line">&lt;van-icon name=&quot;cross&quot; @click.stop=&quot;onCloseClick&quot; /&gt;</span><br></pre></td></tr></table></figure><p><strong>4.搜索结果页, 文档单元格不应该有x</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 所以给ArticleItem传入布尔值, 使用组件时, 控制是否显示</span><br><span class="line"></span><br><span class="line">// components/ArticleItem.vue 里</span><br><span class="line">&lt;!-- 反馈按钮 --&gt;</span><br><span class="line">&lt;van-icon name=&quot;cross&quot; @click.stop=&quot;onCloseClick&quot; v-if=&quot;showX&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    props: &#123;</span><br><span class="line">        showX: &#123;</span><br><span class="line">            type: Boolean,</span><br><span class="line">            default: true // 默认显示</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 在Search/SearchResult.vue, 传入false即可</span><br><span class="line"></span><br><span class="line">&lt;article-item</span><br><span class="line">              v-for=&quot;obj in articleList&quot;</span><br><span class="line">              :key=&quot;obj.art_id&quot;</span><br><span class="line">              :obj=&quot;obj&quot;</span><br><span class="line">              @click.native=&quot;$router.push(`/article_detail?aid=$&#123;obj.art_id&#125;`)&quot;</span><br><span class="line">              :showX=&quot;false&quot;</span><br><span class="line">              &gt;&lt;/article-item&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第三、查看接口文档，发送请求，文章详情数据渲染（铺设页面）</p></div><p><strong>注意：接口所需的文章 id ，可以从路由的query参数里拿到</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; articleDetailAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  async created () &#123;</span><br><span class="line">    const res = await articleDetailAPI(this.$route.params.art_id)</span><br><span class="line">    console.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第四、作者的关注与取关</p></div><p><strong>1.先实现前端效果, 先别考虑接口</strong></p><ul><li>给2个按钮绑定相同方法, 传入布尔值区分</li><li>修改对象属性, 影响页面显示按钮</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-button</span><br><span class="line">            type=&quot;info&quot;</span><br><span class="line">            size=&quot;mini&quot;</span><br><span class="line">            v-if=&quot;artObj.is_followed&quot;</span><br><span class="line">            @click=&quot;followedFn(false)&quot;</span><br><span class="line">            &gt;已关注&lt;/van-button&gt;</span><br><span class="line">&lt;van-button</span><br><span class="line">            icon=&quot;plus&quot;</span><br><span class="line">            type=&quot;info&quot;</span><br><span class="line">            size=&quot;mini&quot;</span><br><span class="line">            plain</span><br><span class="line">            v-else</span><br><span class="line">            @click=&quot;followedFn(true)&quot;</span><br><span class="line">            &gt;关注&lt;/van-button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 作者关注/取关</span><br><span class="line">    async followedFn (bool) &#123;</span><br><span class="line">        if (bool === true) &#123; // 用户点了关注按钮</span><br><span class="line">            // 业务: 关注用户</span><br><span class="line">            // 显示: 已关注按钮</span><br><span class="line">            this.artObj.is_followed = true</span><br><span class="line">        &#125; else &#123; // 用户点了已关注按钮身上</span><br><span class="line">            // 业务: 取消关注用户</span><br><span class="line">            // 显示: 关注按钮</span><br><span class="line">            this.artObj.is_followed = false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.定义接口方法</strong><br><strong>3.在follwedFn方法, 调用接口</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; followedUserAPI, unFollowedUserAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">// 作者关注/取关</span><br><span class="line">async followedFn (bool) &#123;</span><br><span class="line">    if (bool === true) &#123;</span><br><span class="line">        // 用户点了关注按钮</span><br><span class="line">        // 业务: 关注用户</span><br><span class="line">        // 显示: 已关注按钮</span><br><span class="line">        this.artObj.is_followed = true</span><br><span class="line">        await followedUserAPI(&#123;</span><br><span class="line">            target: this.artObj.aut_id</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 用户点了已关注按钮身上</span><br><span class="line">        // 业务: 取消关注用户</span><br><span class="line">        // 显示: 关注按钮</span><br><span class="line">        this.artObj.is_followed = false</span><br><span class="line">        await unFollowedUserAPI(&#123;</span><br><span class="line">            uid: this.artObj.aut_id</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：文章点赞、收藏功能与作者关注功能实现的思路均相同，这里便不在展示</p></div><div class="tip "><p>未完待续。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（五）&quot;&gt;&lt;a href=&quot;#移动端项目总结（五）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（五）&quot;&gt;&lt;/a&gt;移动端项目总结（五）&lt;/h1&gt;&lt;h2 id=&quot;文章搜索功能&quot;&gt;&lt;a href=&quot;#文章搜索功能&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端项目总结（四）</title>
    <link href="https://tailante.github.io/posts/7049.html"/>
    <id>https://tailante.github.io/posts/7049.html</id>
    <published>2022-10-02T10:33:59.000Z</published>
    <updated>2022-10-02T13:40:25.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（四）"><a href="#移动端项目总结（四）" class="headerlink" title="移动端项目总结（四）"></a>移动端项目总结（四）</h1><h2 id="反馈操作"><a href="#反馈操作" class="headerlink" title="反馈操作"></a>反馈操作</h2><div class="tip home"><p>第一、点击 x 按钮-出现一级反馈面板</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/02/PNPfn.png"/></div></div><p><strong>1.找到类似组件 - vant 中的 ActionSheet 动作面板,在 ArticleItem.vue 中使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- 一条文章单元格并列 --&gt;</span><br><span class="line">    &lt;!-- 反馈面板 --&gt;</span><br><span class="line">    &lt;van-action-sheet v-model=&quot;show&quot; :actions=&quot;actions&quot; @select=&quot;onSelect&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                show: false,</span><br><span class="line">                actions: [</span><br><span class="line">                    &#123; name: &#x27;不感兴趣&#x27; &#125;,</span><br><span class="line">                    &#123; name: &#x27;反馈垃圾内容&#x27; &#125;,</span><br><span class="line">                    &#123; name: &#x27;拉黑作者&#x27; &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            // 反馈面板点击事件</span><br><span class="line">            onSelect () &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.发现出来的不全, 分析 DOM 层级结构, 调整挂载位置, 给 van-action-sheet 设置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-action-sheet v-model=&quot;show&quot; :actions=&quot;actions&quot; @select=&quot;onSelect&quot; get-container=&quot;body&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>3.补充底部取消按钮 文字</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-action-sheet v-model=&quot;show&quot; :actions=&quot;actions&quot; @select=&quot;onSelect&quot; get-container=&quot;body&quot; cancel-text=&quot;取消&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>4.点击 x 反馈按钮, 显示反馈面板</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-icon name=&quot;cross&quot; @click=&quot;onCloseClick&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 点击了叉号按钮</span><br><span class="line">        onCloseClick () &#123;</span><br><span class="line">            // 展示动作面板</span><br><span class="line">            this.show = true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、点击一级面板反馈垃圾内容-出现二级反馈面板</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/02/PNy1S.png"/></div></div><p><strong>1.只要切换 actions 数组的值即可</strong><br><strong>2.不想散落在逻辑页面里, 所以在 api/report.js 定义 2 个变量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">export const firstActions = [</span><br><span class="line">  &#123; name: &#x27;不感兴趣&#x27; &#125;,</span><br><span class="line">  &#123; name: &#x27;反馈垃圾内容&#x27; &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">export const secondActions = [</span><br><span class="line">  &#123;</span><br><span class="line">    value: 0,</span><br><span class="line">    name: &#x27;其它问题&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 1,</span><br><span class="line">    name: &#x27;标题夸张&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 2,</span><br><span class="line">    name: &#x27;低俗色情&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 3,</span><br><span class="line">    name: &#x27;错别字多&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 4,</span><br><span class="line">    name: &#x27;旧闻重复&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 6,</span><br><span class="line">    name: &#x27;内容不实&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 8,</span><br><span class="line">    name: &#x27;侵权&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 5,</span><br><span class="line">    name: &#x27;广告软文&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    value: 7,</span><br><span class="line">    name: &#x27;涉嫌违法犯罪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>3.在 ArticleItem.vue 中引入使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; firstActions, secondActions &#125; from &#x27;@/api/reports&#x27;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        // ...省略其他</span><br><span class="line">        actions: firstActions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.点击反馈面板切换数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onSelect (action) &#123;</span><br><span class="line">    // action绑定的数据对象, index是索引</span><br><span class="line">    if (action.name === &#x27;反馈垃圾内容&#x27;) &#123;</span><br><span class="line">        // 证明点击的是反馈垃圾内容</span><br><span class="line">        this.actions = this.secondActions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、点击二级面板返回-回到一级反馈面板</p></div><p><strong>1.定义变量 cancelText 设置底部文字(注意只是显示的文字而已)</strong><br><strong>2.绑定取消事件(无论显示取消/返回文字)底部按钮点击都触发</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-action-sheet v-model=&quot;show&quot; :actions=&quot;actions&quot; @select=&quot;onSelect&quot; get-container=&quot;body&quot; :cancel-text=&quot;cancelText&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: false,</span><br><span class="line">      actions: firstActions,</span><br><span class="line">      cancelText: &#x27;取消&#x27; // 底部按钮文字</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 反馈面板点击事件</span><br><span class="line">    onSelect (action) &#123;</span><br><span class="line">      if (action.name === &#x27;反馈垃圾内容&#x27;) &#123;</span><br><span class="line">        this.actions = secondActions</span><br><span class="line">        this.cancelText = &#x27;返回&#x27; // 修改底部按钮显示文字</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;，</span><br><span class="line">     // 取消事件</span><br><span class="line">    onCancel () &#123;</span><br><span class="line">      // 判断用户点击的是返回还是取消</span><br><span class="line">      if (this.cancelText === &#x27;返回&#x27;) &#123;</span><br><span class="line">        this.actions = firstActions</span><br><span class="line">        this.cancelText = &#x27;取消&#x27;</span><br><span class="line">        this.show = true // 点返回不要让弹窗关闭, 点取消文字按钮, 弹窗默认关闭</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：上述两个事件的触发条件在 Vant 文档里均有说明，请自行查阅文档。</p></div><div class="tip home"><p>第三、点击一级面板不感兴趣-调用接口发送数据（需要 token）</p></div><p><strong>1.在 ArticleItem.vue 中, 点击不感兴趣文章, 传递文章 id 给 ArticleList 页面</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 反馈面板点击事件</span><br><span class="line">onSelect (action) &#123;</span><br><span class="line">    if (action.name === &#x27;反馈垃圾内容&#x27;) &#123;</span><br><span class="line">        this.actions = secondActions</span><br><span class="line">        this.cancelText = &#x27;返回&#x27;</span><br><span class="line">    &#125; else if (action.name === &#x27;不感兴趣&#x27;) &#123;</span><br><span class="line">        this.$emit(&#x27;dislike&#x27;, this.obj)</span><br><span class="line">        this.show = false // 关闭弹窗</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.在 ArticleList.vue 中, 绑定 dislike 事件和 dislikeFn 方法,弄个 Notify 通知框, 提示用户反馈结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; articleDislikeAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">import &#123; Notify &#125; from &#x27;vant&#x27;</span><br><span class="line"></span><br><span class="line">// 反馈(不感兴趣)</span><br><span class="line">async dislikeFn (obj) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        await articleDislikeAPI(&#123;</span><br><span class="line">            target: obj.art_id</span><br><span class="line">        &#125;)</span><br><span class="line">        Notify(&#123; type: &#x27;success&#x27;, message: &#x27;反馈成功&#x27; &#125;)</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        Notify(&#123; type: &#x27;warning&#x27;, message: &#x27;反馈失败-联系程序员&#x27; &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第四、点击二级面板的各种反馈-调用接口发送数据（需要 token）</p></div><p><strong>在上个例子基础上，点击举报类型调用接口</strong><br><strong>ArticleItem.vue 触发父级@reports 事件, 传反馈的文章对象出来和反馈类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 反馈面板点击事件</span><br><span class="line">onSelect (action) &#123;</span><br><span class="line">    if (action.name === &#x27;反馈垃圾内容&#x27;) &#123;</span><br><span class="line">        this.actions = secondActions</span><br><span class="line">        this.cancelText = &#x27;返回&#x27;</span><br><span class="line">    &#125; else if (action.name === &#x27;不感兴趣&#x27;) &#123;</span><br><span class="line">        this.$emit(&#x27;dislike&#x27;, this.obj)</span><br><span class="line">        this.show = false</span><br><span class="line">    &#125; else &#123; // 这里就是二级反馈</span><br><span class="line">        this.$emit(&#x27;reports&#x27;, this.obj, action.value) // 外面需要反馈类型的值</span><br><span class="line">        this.actions = firstActions</span><br><span class="line">        this.show = false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>在 ArticleList.vue 里引入接口, 和@reports 事件方法使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; articleReportsAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">// 反馈(举报)</span><br><span class="line">async reportsFn (obj, type) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        await articleReportsAPI(&#123;</span><br><span class="line">            target: obj.art_id,</span><br><span class="line">            type: type,</span><br><span class="line">            remark: &#x27;就是其他问题&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">        Notify(&#123; type: &#x27;success&#x27;, message: &#x27;举报成功&#x27; &#125;)</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        Notify(&#123; type: &#x27;warning&#x27;, message: &#x27;举报失败&#x27; &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意：这里博主使用自定义事件将数据传入父组件来发送请求是因为：子组件将来是要被搜索功能所复用的，因此不能在子组件内调用接口发送数据，复用的组件最好保证渲染数据的功能即可</p></div><h2 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h2><div class="tip home"><p>第一、使用 axios 响应拦截器，判断是否错误 401, 对身份认证问题统一进行权限判断,失败重新登陆</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 添加响应拦截器</span><br><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">  // 2xx 范围内的状态码都会触发该函数。</span><br><span class="line">  // 对响应数据做点什么</span><br><span class="line">  return response</span><br><span class="line">&#125;, async function (error) &#123;</span><br><span class="line">  // 超出 2xx 范围的状态码都会触发该函数。</span><br><span class="line">  // 对响应错误做点什么</span><br><span class="line">  // 只有401才代表身份过期，需要重新登陆</span><br><span class="line">  if (error.response.status === 401) &#123;</span><br><span class="line">    // 为了拿到路由对象，直接去上面引入</span><br><span class="line">    Notify(&#123; type: &#x27;warning&#x27;, message: &#x27;身份认证过期，请重新登陆&#x27; &#125;)</span><br><span class="line">    // 清空token</span><br><span class="line">    removeToken()</span><br><span class="line">    // 跳转回登录页</span><br><span class="line">    router.replace(&#x27;/login&#x27;)</span><br><span class="line">  return Promise.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、使用 axios 请求拦截器，如果本地有 token, 携带在请求头给后台</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 添加请求拦截器</span><br><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">  // 在发送请求之前做些什么</span><br><span class="line">  // 统一携带 token</span><br><span class="line">  // 判断本地有无 token，判断具体的api/index.js里面如果没有携带 Authorization，我再添加上去</span><br><span class="line">  // undefined是未定义 null是空 你得赋予</span><br><span class="line">  // ?.可选连操作符 如果前面对象里没有length属性 原地返回undefined</span><br><span class="line">  // if 第二个判断是因为防止我自己带的 refresh_token 被覆盖掉</span><br><span class="line">  if (getToken()?.length &gt; 0 &amp;&amp; config.headers.Authorization === undefined) &#123;</span><br><span class="line">    config.headers.Authorization = `Bearer $&#123;getToken()&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">  return config</span><br><span class="line">&#125;, function (error) &#123;</span><br><span class="line">  // 对请求错误做些什么</span><br><span class="line">  return Promise.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip warning"><p>判断条件中的这段代码 getToken()?.length &gt; 0 ?.可选连操作符 如果前面对象里没有 length 属性 原地返回 undefined</p></div><h2 id="频道管理"><a href="#频道管理" class="headerlink" title="频道管理"></a>频道管理</h2><div class="tip home"><p>第一、标签准备和样式,为右侧增加一个 + 号</p></div><div class="tip home"><p>第二、点击 + 号，弹出频道管理页面</p></div><p><strong>1.寻找类似的组件 - vant 组件库叫 popup 组件</strong><br><strong>2.单独创建 Home/ChannelEdit.vue - 频道编辑组件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 弹出层的头部区域 --&gt;</span><br><span class="line">    &lt;van-nav-bar title=&quot;频道管理&quot;&gt;</span><br><span class="line">      &lt;template #right&gt;</span><br><span class="line">        &lt;van-icon name=&quot;cross&quot; size=&quot;0.37333334rem&quot; color=&quot;white&quot;/&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/van-nav-bar&gt;</span><br><span class="line">    &lt;!-- 我的频道 --&gt;</span><br><span class="line">    &lt;div class=&quot;my-channel-box&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;channel-title&quot;&gt;</span><br><span class="line">        &lt;span&gt;我的频道</span><br><span class="line">          &lt;span class=&quot;small-title&quot;&gt;</span><br><span class="line">            点击进入频道</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span&gt;编辑&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 我的频道列表 --&gt;</span><br><span class="line">      &lt;van-row type=&quot;flex&quot;&gt;</span><br><span class="line">        &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;channel-item van-hairline--surround&quot;&gt;</span><br><span class="line">            名字</span><br><span class="line">            &lt;!-- 删除的徽标 --&gt;</span><br><span class="line">            &lt;van-badge color=&quot;transparent&quot; class=&quot;cross-badge&quot;&gt;</span><br><span class="line">              &lt;template #content&gt;</span><br><span class="line">                &lt;van-icon</span><br><span class="line">                  name=&quot;cross&quot;</span><br><span class="line">                  class=&quot;badge-icon&quot;</span><br><span class="line">                  color=&quot;#cfcfcf&quot;</span><br><span class="line">                  size=&quot;0.32rem&quot;</span><br><span class="line">                /&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">            &lt;/van-badge&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/van-col&gt;</span><br><span class="line">      &lt;/van-row&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 更多频道 --&gt;</span><br><span class="line">    &lt;div class=&quot;more-channel-box&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;channel-title&quot;&gt;</span><br><span class="line">        &lt;span&gt;点击添加更多频道：&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 更多频道列表 --&gt;</span><br><span class="line">      &lt;van-row type=&quot;flex&quot;&gt;</span><br><span class="line">        &lt;van-col span=&quot;6&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;channel-item van-hairline--surround&quot;&gt;名字&lt;/div&gt;</span><br><span class="line">        &lt;/van-col&gt;</span><br><span class="line">      &lt;/van-row&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.van-popup,</span><br><span class="line">.popup-container &#123;</span><br><span class="line">  background-color: transparent;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.popup-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pop-header &#123;</span><br><span class="line">  height: 90px;</span><br><span class="line">  background-color: #007bff;</span><br><span class="line">  color: white;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  position: relative;</span><br><span class="line">  .title &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom: 15px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pop-body &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  overflow: scroll;</span><br><span class="line">  padding: 8px;</span><br><span class="line">  background-color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.my-channel-box,</span><br><span class="line">.more-channel-box &#123;</span><br><span class="line">  .channel-title &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 28px;</span><br><span class="line">    padding: 0 6px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.channel-item &#123;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 36px;</span><br><span class="line">  background-color: #fafafa;</span><br><span class="line">  margin: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*删除的微标 */</span><br><span class="line">.cross-badge &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: -3px;</span><br><span class="line">  top: 0;</span><br><span class="line">  border: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*提示文字 */</span><br><span class="line">.small-title &#123;</span><br><span class="line">  font-size: 10px;</span><br><span class="line">  color: gray;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/02/PlkE5.png"/></div></div><p><strong>3.在 Home/index.vue 引入注册使用</strong><br><strong>4.准备变量 show, 点击按钮处弹窗</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-icon name=&quot;plus&quot; size=&quot;0.37333334rem&quot; class=&quot;moreChannels&quot; @click=&quot;show = true&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>5.点击弹出层 x, 关闭</strong></p><p>ChannelEdit 内向父传事件, 影响 show 的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Home/index.vue内</span><br><span class="line">&lt;!-- 弹出层的主体区域 --&gt;</span><br><span class="line">&lt;channel-edit @close=&quot;show = false&quot;&gt;&lt;/channel-edit&gt;</span><br><span class="line">----------------------------------------------</span><br><span class="line">// ChannelEdit.vue内</span><br><span class="line">&lt;van-nav-bar title=&quot;频道管理&quot;&gt;</span><br><span class="line">    &lt;template #right&gt;</span><br><span class="line">&lt;van-icon name=&quot;cross&quot; size=&quot;0.37333334rem&quot; color=&quot;white&quot; @click=&quot;$emit(&#x27;close&#x27;)&quot;/&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-nav-bar&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第三、更多频道，我的频道数据准备（取决与后端接口数据）</p></div><div class="tip warning"><p>由于本项目后端接口只有所有频道数据与我的频道数据，因此我们可以通过计算属性利用简单的算法将更多频道的数据得到：遍历全部数据中的每个, 去已选数组里查找, 找不到收集起来</p></div><p><strong>1.在 ChannelEdit 页面内, 首页把用户已选频道传入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; allChannelListAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      allChannelList: [] // 所有频道</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    userChannelList: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      default: () =&gt; []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  async created () &#123;</span><br><span class="line">    const res = await allChannelListAPI()</span><br><span class="line">    console.log(res)</span><br><span class="line">    this.allChannelList = res.data.data.channels</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">&lt;channel-edit :userChannelList=&quot;channelList&quot; @close=&quot;show = false&quot;&gt;&lt;/channel-edit&gt;</span><br></pre></td></tr></table></figure><p><strong>2.ChannelEdit 内设置计算属性 - 提取未选中的频道数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    unChannelList () &#123;</span><br><span class="line">      return this.allChannelList.filter(obj =&gt; &#123;</span><br><span class="line">        const index = this.userChannelList.findIndex(obj2 =&gt; obj2.id === obj.id)</span><br><span class="line">        if (index === -1) return true</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>3.在 Home/ChannelEdit.vue 编辑频道组件上, 对应标签位置, 循环 name 使用即可</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 我的频道列表 --&gt;</span><br><span class="line">&lt;van-row type=&quot;flex&quot;&gt;</span><br><span class="line">    &lt;van-col span=&quot;6&quot; v-for=&quot;obj in userChannelList&quot; :key=&quot;obj.id&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;channel-item van-hairline--surround&quot;&gt;</span><br><span class="line">            &#123;&#123; obj.name &#125;&#125;</span><br><span class="line">            &lt;!-- 删除的徽标 --&gt;</span><br><span class="line">            &lt;van-badge color=&quot;transparent&quot; class=&quot;cross-badge&quot;&gt;</span><br><span class="line">                &lt;template #content&gt;</span><br><span class="line">&lt;van-icon</span><br><span class="line">                      name=&quot;cross&quot;</span><br><span class="line">                      class=&quot;badge-icon&quot;</span><br><span class="line">                      color=&quot;#cfcfcf&quot;</span><br><span class="line">                      size=&quot;0.32rem&quot;</span><br><span class="line">                      /&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/van-badge&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/van-col&gt;</span><br><span class="line">&lt;/van-row&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 更多频道 --&gt;</span><br><span class="line">&lt;div class=&quot;more-channel-box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;channel-title&quot;&gt;</span><br><span class="line">        &lt;span&gt;点击添加更多频道：&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 更多频道列表 --&gt;</span><br><span class="line">    &lt;van-row type=&quot;flex&quot;&gt;</span><br><span class="line">        &lt;van-col span=&quot;6&quot; v-for=&quot;obj in unChannelList&quot; :key=&quot;obj.id&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;channel-item van-hairline--surround&quot;&gt;&#123;&#123; obj.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/van-col&gt;</span><br><span class="line">    &lt;/van-row&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第四、频道管理——点击编辑按钮即可对频道进行增删操作</p></div><p><strong>1.点击编辑按钮实现文字切换(变量取反)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;channel-title&quot;&gt;</span><br><span class="line">    &lt;span&gt;我的频道</span><br><span class="line">        &lt;span class=&quot;small-title&quot;&gt;</span><br><span class="line">            &#123;&#123; isEdit ? &#x27;点击删除频道&#x27; : &#x27;点击进入频道&#x27; &#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;span @click=&quot;isEdit = !isEdit&quot;&gt;&#123;&#123; isEdit ? &#x27;完成&#x27; : &#x27;编辑&#x27; &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isEdit: false // 控制编辑状态</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.设置 x 微标显示与否(推荐频道上不能出现 x)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 删除的徽标 --&gt;</span><br><span class="line">&lt;van-badge color=&quot;transparent&quot; class=&quot;cross-badge&quot; v-show=&quot;isEdit &amp;&amp; obj.id !== 0&quot;&gt;</span><br><span class="line">    &lt;template #content&gt;</span><br><span class="line">&lt;van-icon</span><br><span class="line">          name=&quot;cross&quot;</span><br><span class="line">          class=&quot;badge-icon&quot;</span><br><span class="line">          color=&quot;#cfcfcf&quot;</span><br><span class="line">          size=&quot;0.32rem&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-badge&gt;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第五、频道管理——编辑状态下，点击更多频道中的每一个频道，会添加进我的频道</p></div><p><strong>1.更多频道选择 - 绑定点击事件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-col span=&quot;6&quot; v-for=&quot;obj in unChannelList&quot; :key=&quot;obj.id&quot; @click=&quot;addFn(obj)&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;channel-item van-hairline--surround&quot;&gt;</span><br><span class="line">        &#123;&#123; obj.name &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/van-col&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 新增频道</span><br><span class="line">        addFn (obj) &#123;</span><br><span class="line">            if (this.isEdit === true) &#123;</span><br><span class="line">                this.$emit(&#x27;addChannel&#x27;, obj)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>2.回传要添加的频道 obj 对象, 子传父</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addFn (item) &#123; // 新增频道</span><br><span class="line">    if (this.isEdit === true) &#123; // 编辑状态</span><br><span class="line">        this.$emit(&#x27;add&#x27;, item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.在 Home/index.vue, 接收后, 添加到频道数组里</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 弹出层的主体区域 --&gt;</span><br><span class="line">&lt;channel-edit :userChannelList=&quot;channelList&quot; @close=&quot;show = false&quot; @addChannel=&quot;addChannelFn&quot;&gt;&lt;/channel-edit&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 添加频道</span><br><span class="line">        addChannelFn (obj) &#123;</span><br><span class="line">            this.channelList.push(obj)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意: 你有计算属性, 所以引用变量改变, 未选频道自动重新计算</p></div><div class="tip home"><p>第六、增删同步后台数据</p></div><p><strong>1.定义更新频道接口方法(查看接口文档)</strong></p><p><strong>2.在 Home/index.vue - 引入接口方法, 在新增频道方法中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 把数据&#123;&#123;name:xxx,id:xxx&#125;&#125;预处理成后台想要的格式&#123;name:xxx,seq:xxx&#125;, 直接把频道数组更新覆盖给后台</span><br><span class="line">import &#123; updateChannelAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">async editFn (obj, index, type) &#123; // 编辑频道</span><br><span class="line">    if (type === &#x27;add&#x27;) &#123;</span><br><span class="line">        this.list.push(obj)</span><br><span class="line">    &#125;</span><br><span class="line">    const arr = this.list.filter((obj) =&gt; &#123; return obj.id !== 0 &#125;) // 先过滤掉id为0的推荐频道, 把剩余的数组返回</span><br><span class="line">    console.log(arr)</span><br><span class="line"></span><br><span class="line">    const resultList = arr.map((item, index) =&gt; &#123;</span><br><span class="line">        const newObj = &#123; ...item &#125; // 浅拷贝(让对象和原数组脱离关系)</span><br><span class="line">        newObj.seq = index + 1</span><br><span class="line">        delete newObj.name // 删除对象里name键值对</span><br><span class="line">        return newObj</span><br><span class="line">    &#125;)</span><br><span class="line">    // map会收集每次遍历return的值形成一个新数组</span><br><span class="line">    console.log(resultList)</span><br><span class="line">    await updateChannelAPI(&#123;</span><br><span class="line">        channels: resultList</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意: 由于本接口不需要传递推荐频道，因此需要在数组中将推荐频道删除，但是数组是引用类型数据，一定要注意，进行删除操作时不要对原数据产生任何影响</p></div><div class="tip warning"><p>以下为错误示范：虽然 filter 导出的新数组是新的地址 但是里面的对象指向的还是同一地址，所以只要对里面的属性进行操作 必然会影响原数组里面的对象</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const newArr = this.userChannelList.filter(item =&gt; item.id !== 0)</span><br><span class="line">      newArr.forEach((item, index) =&gt; &#123;</span><br><span class="line">        delete item.name</span><br><span class="line">        item.seq = index</span><br><span class="line">      &#125;)</span><br><span class="line">      const res = await updateChannelsAPI(&#123;</span><br><span class="line">        channels: newArr</span><br><span class="line">      &#125;)</span><br><span class="line">      console.log(res)</span><br></pre></td></tr></table></figure><div class="tip home"><p>第七、编辑状态下，点击我的频道任意频道，即可对其进行删除</p></div><p><strong>1.推荐频道不允许删除, 所以单独判断一下, 不给删除频道小微标</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 删除的徽标 --&gt;</span><br><span class="line">&lt;van-badge color=&quot;transparent&quot; class=&quot;cross-badge&quot; v-if=&quot;isEdit &amp;&amp; obj.name !== &#x27;推荐&#x27;&quot;&gt;</span><br><span class="line">    &lt;template #content&gt;</span><br><span class="line">&lt;van-icon</span><br><span class="line">          name=&quot;cross&quot;</span><br><span class="line">          class=&quot;badge-icon&quot;</span><br><span class="line">          color=&quot;#cfcfcf&quot;</span><br><span class="line">          size=&quot;0.32rem&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/van-badge&gt;</span><br></pre></td></tr></table></figure><p><strong>2.点击选项删除</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 我的频道列表 --&gt;</span><br><span class="line">&lt;van-row type=&quot;flex&quot;&gt;</span><br><span class="line">&lt;van-col span=&quot;6&quot; v-for=&quot;obj in tabsList&quot; :key=&quot;obj.id&quot; @click=&quot;removeFn(obj)&quot;&gt;</span><br><span class="line">&lt;/van-col&gt;</span><br><span class="line">&lt;/van-row&gt;</span><br></pre></td></tr></table></figure><p><strong>3.从 ChannelEdit.vue 传递要删除的索引到 Home/index.vue 删除频道</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 删除频道</span><br><span class="line">   removeFn (obj) &#123;</span><br><span class="line">       if (this.isEdit === true &amp;&amp; obj.name !== &#x27;推荐&#x27;) &#123;</span><br><span class="line">           this.$emit(&#x27;removeChannel&#x27;, obj)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>4.Home/index.vue - 监听 removeChannel 事件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 弹出层的主体区域 --&gt;</span><br><span class="line">&lt;channel-edit :userChannelList=&quot;channelList&quot; @close=&quot;show = false&quot; @addChannel=&quot;addChannelFn&quot; @removeChannel=&quot;removeChannelFn&quot;&gt;&lt;/channel-edit&gt;</span><br></pre></td></tr></table></figure><p><strong>5.把更新方法提取, 分别调用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    // 添加频道</span><br><span class="line">    async addChannelFn (obj) &#123;</span><br><span class="line">      this.channelList.push(obj)</span><br><span class="line">      this.updateChannel()</span><br><span class="line">    &#125;,</span><br><span class="line">    // 统一更新频道</span><br><span class="line">    async updateChannel () &#123;</span><br><span class="line">      // 先拷贝一份数组(前端页面用channelList, 后端用拷贝出的数组)</span><br><span class="line">      // 数组第一层, 对象里key+value是第二层</span><br><span class="line">      const newArr = this.channelList.map(obj =&gt; &#123;</span><br><span class="line">        const newObj = &#123; ...obj &#125;</span><br><span class="line">        return newObj</span><br><span class="line">      &#125;)</span><br><span class="line">      // 先剔除推荐</span><br><span class="line">      const index = newArr.findIndex(obj =&gt; obj.name === &#x27;推荐&#x27;)</span><br><span class="line">      newArr.splice(index, 1)</span><br><span class="line">      // 转换字段</span><br><span class="line">      newArr.forEach((obj, index) =&gt; &#123;</span><br><span class="line">        delete obj.name</span><br><span class="line">        obj.seq = index + 1</span><br><span class="line">      &#125;)</span><br><span class="line">      // 调用接口</span><br><span class="line">      await updateChannelAPI(&#123;</span><br><span class="line">        channels: newArr</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 删除频道</span><br><span class="line">    async removeChannelFn (obj) &#123;</span><br><span class="line">      // 找到这个频道在数组下标删除</span><br><span class="line">      const ind = this.channelList.findIndex(item =&gt; item.id === obj.id)</span><br><span class="line">      this.channelList.splice(ind, 1)</span><br><span class="line">      this.updateChannel()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><div class="tip home"><p>第八、频道管理层关闭，重置编辑状态</p></div><p><strong>1.绑定@closed 事件(查阅 vant)</strong></p><p>channel-edit 添加 ref(为了获取组件对象, 修改内部的 isEdit 变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 弹出层组件 --&gt;</span><br><span class="line">&lt;van-popup v-model=&quot;show&quot; class=&quot;edit_wrap&quot; @closed=&quot;onPopupClosed&quot;&gt;</span><br><span class="line">    &lt;!-- 弹出层的主体区域 --&gt;</span><br><span class="line">    &lt;channel-edit :userChannelList=&quot;channelList&quot; @close=&quot;show = false&quot; @addChannel=&quot;addChannelFn&quot; @removeChannel=&quot;removeChannelFn&quot; ref=&quot;channelEdit&quot;&gt;&lt;/channel-edit&gt;</span><br><span class="line">&lt;/van-popup&gt;</span><br></pre></td></tr></table></figure><p><strong>2.在 Home/index.vue - 访问到 ChannelEdit.vue 的 isEdit 变量设置为 false</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    // 弹层关闭-重置编辑频道状态</span><br><span class="line">    onPopupClosed () &#123;</span><br><span class="line">        this.$refs.channelEdit.isEdit = false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第九、在非编辑状态下，点击我的频道中任意频道，进入相应频道</p></div><p><strong>1.在 ChannelEdit.vue 的我的频道, 点击事件判断</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 删除频道</span><br><span class="line">removeFn (obj) &#123;</span><br><span class="line">    if (this.isEdit === true &amp;&amp; obj.name !== &#x27;推荐&#x27;) &#123; // 删除频道</span><br><span class="line">        this.$emit(&#x27;removeChannel&#x27;, obj)</span><br><span class="line">    &#125; else &#123; // 进入逻辑</span><br><span class="line">        this.$emit(&#x27;changeChannel&#x27;, obj)</span><br><span class="line">        this.$emit(&#x27;close&#x27;) // 关闭弹窗</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.在 Home/index.vue - 绑定@changeChannel 事件, 准备切换显示频道</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;channel-edit</span><br><span class="line">              :userChannelList=&quot;channelList&quot;</span><br><span class="line">              @close=&quot;show = false&quot;</span><br><span class="line">              @addChannel=&quot;addChannelFn&quot;</span><br><span class="line">              @removeChannel=&quot;removeChannelFn&quot;</span><br><span class="line">              ref=&quot;channelEdit&quot;</span><br><span class="line">              @changeChannel=&quot;channgeChannelFn&quot;</span><br><span class="line">              &gt;&lt;/channel-edit&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 切换频道</span><br><span class="line">    channgeChannelFn (obj) &#123;</span><br><span class="line">      this.channelId = obj.id // 传过来的频道ID, 影响tabs默认v-model的选择</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip "><p>未完待续。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（四）&quot;&gt;&lt;a href=&quot;#移动端项目总结（四）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（四）&quot;&gt;&lt;/a&gt;移动端项目总结（四）&lt;/h1&gt;&lt;h2 id=&quot;反馈操作&quot;&gt;&lt;a href=&quot;#反馈操作&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端项目总结（三）</title>
    <link href="https://tailante.github.io/posts/1e88.html"/>
    <id>https://tailante.github.io/posts/1e88.html</id>
    <published>2022-10-01T00:49:44.000Z</published>
    <updated>2022-10-02T09:00:45.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（三）"><a href="#移动端项目总结（三）" class="headerlink" title="移动端项目总结（三）"></a>移动端项目总结（三）</h1><div class="tip warning faa-horizontal animated faa-fast"><p>写在前面，只要修改了配置文件，一定要重启服务器！！！！</p></div><h2 id="首页功能开发"><a href="#首页功能开发" class="headerlink" title="首页功能开发"></a>首页功能开发</h2><div class="tip home"><p>第一、分析页面结构，创建对应路由，同时将路由重定向至首页</p></div><p>1.Login.vue 和 Layout.vue 是一级路由页面<br>2.Home.vue 和 User.vue 应该是嵌入在 Layout.vue 页面里的二级路由页面<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/01/MMGHh.png"/></div></div></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 二级路由的设置方法</span><br><span class="line">&#123;</span><br><span class="line">    path: &#x27;/layout&#x27;,</span><br><span class="line">    component: Layout,</span><br><span class="line">    redirect: &#x27;/layout/home&#x27;, // 默认显示二级页面为home首页</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;home&#x27;,</span><br><span class="line">        component: Home</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;user&#x27;,</span><br><span class="line">        component: User</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、在 layout 页面铺设底部导航，查找 Vant 组件库文档，使用 TabBar 组件，进行全局注册，并设置对应的路由跳转属性</p></div><div class="tip home"><p>第三、美化样式, 给 router-view 外面, 套一个 div.home_container, 并且防止二级页面内容, 被底部导航挡住</p></div><div class="tip home"><p>第四、登录成功，跳转至首页</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 在Login/index.js内, 登陆成功逻辑处末尾</span><br><span class="line">this.$router.replace(&#123;</span><br><span class="line">    path: &#x27;/layout&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip home"><p>第五、进入 Home 组件，开始设置头部标签，查阅 vant 文档为头部左侧添加一个 logo 图片，右侧添加一个 icon 搜索图标</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 头部标签 --&gt;</span><br><span class="line">    &lt;van-nav-bar fixed&gt;</span><br><span class="line">      &lt;template #left&gt;</span><br><span class="line">        &lt;!-- &lt;img class=&quot;logo&quot; src=&quot;../../assets/toutiao_logo.png&quot; alt=&quot;&quot; /&gt; --&gt;</span><br><span class="line">        &lt;img class=&quot;logo&quot; :src=&quot;imgObj&quot;/&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template #right&gt;</span><br><span class="line">        &lt;van-icon name=&quot;search&quot; size=&quot;0.48rem&quot; color=&quot;#fff&quot;/&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/van-nav-bar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>注意点一：头部标签为何不在 Layout 上面使用 ? 如果使用, 则所有二级页面都有头了, 但实际上只有 Home 页面头部有</p><p>注意点二：由于搜索图标的大小样式是设置在行内，因此 postcss 无法发挥作用，只能通过手动设置 rem 解决</p></div><div class="tip home"><p>第六、查阅 vant 文档，找到 Tab 标签页 ，为首页铺设频道</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 频道部分 --&gt;</span><br><span class="line">// 内容1, 内容2, 内容3, 内容4, 对应的是tab标签下面对应的内容区域(插槽技术)，分别一一对应的关系, 分别独立, 互不影响</span><br><span class="line">&lt;van-tabs v-model=&quot;active&quot; animated&gt;</span><br><span class="line">  &lt;van-tab title=&quot;标签 1&quot;&gt;内容 1&lt;/van-tab&gt;</span><br><span class="line">  &lt;van-tab title=&quot;标签 2&quot;&gt;内容 2&lt;/van-tab&gt;</span><br><span class="line">  &lt;van-tab title=&quot;标签 3&quot;&gt;内容 3&lt;/van-tab&gt;</span><br><span class="line">  &lt;van-tab title=&quot;标签 4&quot;&gt;内容 4&lt;/van-tab&gt;</span><br><span class="line">&lt;/van-tabs&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>为提升用户体验，将头部设置为固定定位，tab 栏被定位的头部导航挡住, 设置固定定位/粘性定位（查阅 vant 文档进行设置）, 距离上边 46px(手动转 rem)，tab 栏内容部分, 也要给 tab 导航定位留出距离</p></div><div class="tip home"><p>第七、铺设频道动态数据，查阅接口文档，定义接口（需要携带 token），在组件创建时发送请求，循环铺设频道</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; userChannelAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">            // ...省略其他</span><br><span class="line">        channelList: [] // 频道数据</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    async created () &#123;</span><br><span class="line">const res = await userChannelAPI()</span><br><span class="line">this.channelList = res.data.data.channels</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------</span><br><span class="line">&lt;!-- 频道部分 --&gt;</span><br><span class="line">&lt;van-tabs v-model=&quot;active&quot; animated sticky offset-top=&quot;1.226667rem&quot;&gt;</span><br><span class="line">    &lt;van-tab v-for=&quot;item in channelList&quot; :key=&quot;item.id&quot; :title=&quot;item.name&quot;&gt;</span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    &lt;/van-tab&gt;</span><br><span class="line">&lt;/van-tabs&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>登录和未登录返回的频道有什么区别? 登录就会传递 token 给后台, 返回对应用户的频道,未登录后台返回默认的频道</p></div><div class="tip home"><p>第八、在 tab 栏内容部分铺设文章列表之前，进行组件拆分，使结构更加清晰，为后续搜索功能开发组件的复用买下基础</p></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.328888.xyz/2022/10/01/Mgm4S.png"/></div></div><div class="tip home"><p>第九、创建对应组件</p></div> 1.创建 ArtileItem 组件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 一条文章单元格 --&gt;</span><br><span class="line">  &lt;van-cell&gt;</span><br><span class="line">    &lt;!-- 标题区域的插槽 --&gt;</span><br><span class="line">    &lt;template #title&gt;</span><br><span class="line">      &lt;div class=&quot;title-box&quot;&gt;</span><br><span class="line">        &lt;!-- 标题 --&gt;</span><br><span class="line">        &lt;span&gt;文章标题&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;!-- label 区域的插槽 --&gt;</span><br><span class="line">    &lt;template #label&gt;</span><br><span class="line">      &lt;div class=&quot;label-box&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;span&gt;作者&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;0评论&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;8个月前&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 反馈按钮 --&gt;</span><br><span class="line">        &lt;van-icon name=&quot;cross&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/van-cell&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">/* 标题样式 */</span><br><span class="line">.title-box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* label描述样式 */</span><br><span class="line">.label-box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 文章信息span */</span><br><span class="line">.label-box span&#123;</span><br><span class="line">    margin: 0 3px;</span><br><span class="line">    &amp;:first-child&#123;</span><br><span class="line">        margin-left: 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>2.创建 ArticleList 组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 文章列表 --&gt;</span><br><span class="line">    &lt;article-item&gt;&lt;/article-item&gt;</span><br><span class="line">    &lt;article-item&gt;&lt;/article-item&gt;</span><br><span class="line">    &lt;article-item&gt;&lt;/article-item&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ArticleItem from &#x27;./components/ArticleItem.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ArticleItem</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3.Home 页引入 ArticleList</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 频道部分 --&gt;</span><br><span class="line">&lt;van-tabs v-model=&quot;active&quot;</span><br><span class="line">          animated</span><br><span class="line">          sticky</span><br><span class="line">          offset-top=&quot;1.226667rem&quot;&gt;</span><br><span class="line">    &lt;van-tab v-for=&quot;item in channelList&quot;</span><br><span class="line">             :key=&quot;item.id&quot;</span><br><span class="line">             :title=&quot;item.name&quot;&gt;</span><br><span class="line">        &lt;article-list&gt;&lt;/article-list&gt;</span><br><span class="line">    &lt;/van-tab&gt;</span><br><span class="line">&lt;/van-tabs&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 只有核心代码</span><br><span class="line">import ArticleList from &#x27;@/views/Home/ArticleList&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        ArticleList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>一个细节：<br>每个 van-tab 代表一个标签导航，它中间夹着的内容，对应下属列表的内容<br>van-tab 循环了很多标签导航，与之一一对应的内容列表不是上来都创建的，默认创建当前激活导航对应的列表组件<br>第一次切换的对应的频道时，才会创建下属的 articlelist 组件 -&gt; created()<br>第二次切换就是显示隐藏切换</p></div><div class="tip home"><p>第十、查看接口文档，调用接口，发送请求，铺设数据</p></div><p><strong>1.在 Home/ArticleList.vue 引入, 并发起请求</strong><br><strong>2.在 ArticleList.vue 中, data 定义 articleList 变量接受</strong><br><strong>3.v-for 循环 ArticleItem, 传入文章对象</strong><br><strong>4.ArticleItem 定义 props 变量 obj 接收, 从 ArticleList 传递过来的文章信息对象</strong><br><strong>5.替换标签内容</strong><br><strong>6.需要 v-if 进行图片判断，来确定渲染图片的数量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template #title&gt;</span><br><span class="line">      &lt;div class=&quot;title-box&quot;&gt;</span><br><span class="line">        &lt;!-- 标题 --&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; obj.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;!-- 单图 --&gt;</span><br><span class="line">        &lt;img class=&quot;thumb&quot;</span><br><span class="line">             :src=&quot;obj.cover.images[0]&quot;</span><br><span class="line">             v-if=&quot;obj.cover.type === 1&quot;/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 三张图片 --&gt;</span><br><span class="line">        &lt;div class=&quot;thumb-box&quot; v-if=&quot;obj.cover.type &gt; 1&quot;&gt;</span><br><span class="line">          &lt;img class=&quot;thumb&quot;</span><br><span class="line">             v-for=&quot;(imgUrl, index) in obj.cover.images&quot;</span><br><span class="line">             :key=&quot;index&quot;</span><br><span class="line">             :src=&quot;imgUrl&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>7.需要对时间进行优化，把时间转换成多久之前</strong><br>第一种方法：引入插件库进行处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// dayjs第三方库: https://dayjs.fenxianglu.cn/</span><br><span class="line">yarn add dayjs</span><br><span class="line">---------------------------</span><br><span class="line">// 新建 utils/date.js</span><br><span class="line">import dayjs from &#x27;dayjs&#x27;</span><br><span class="line">import relativeTime from &#x27;dayjs/plugin/relativeTime&#x27; // 到指定时间需要的插件</span><br><span class="line">import &#x27;dayjs/locale/zh&#x27; // 集成中文</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * .....多久之前</span><br><span class="line"> * @param &#123;*&#125; 之前的时间</span><br><span class="line"> * @returns 系统时间到之前指定时间的距离值</span><br><span class="line"> */</span><br><span class="line">export const timeAgo = (targetTime) =&gt; &#123;</span><br><span class="line">  // 格式化时间</span><br><span class="line">  dayjs.extend(relativeTime)</span><br><span class="line">  dayjs.locale(&#x27;zh&#x27;)</span><br><span class="line">  var a = dayjs()</span><br><span class="line">  var b = dayjs(targetTime)</span><br><span class="line">  return a.to(b) // 返回多久之前...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二种方法：自己单独封装一个转换时间的 js 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">relativeTime (val) &#123;</span><br><span class="line">      const t = new Date(val)</span><br><span class="line">      const diff = Date.now() - t.getTime()</span><br><span class="line"></span><br><span class="line">      const year = Math.floor(diff / (1000 * 3600 * 24 * 365))</span><br><span class="line">      if (year) &#123;</span><br><span class="line">        return `$&#123;year&#125;年前`</span><br><span class="line">      &#125;</span><br><span class="line">      const month = Math.floor(diff / (1000 * 3600 * 24 * 30))</span><br><span class="line">      if (month) &#123;</span><br><span class="line">        return `$&#123;month&#125;月前`</span><br><span class="line">      &#125;</span><br><span class="line">      const day = Math.floor(diff / (1000 * 3600 * 24))</span><br><span class="line">      if (day) &#123;</span><br><span class="line">        return `$&#123;day&#125;天前`</span><br><span class="line">      &#125;</span><br><span class="line">      const hour = Math.floor(diff / (1000 * 3600))</span><br><span class="line">      if (hour) &#123;</span><br><span class="line">        return `$&#123;hour&#125;小时前`</span><br><span class="line">      &#125;</span><br><span class="line">      const minute = Math.floor(diff / (1000 * 60))</span><br><span class="line">      if (minute) &#123;</span><br><span class="line">        return `$&#123;minute&#125;分钟前`</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return &#x27;刚才&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>这里博主更推荐第二种，也就是自己封装一个时间处理函数，一方面锻炼自己原生封装的能力，另一方面可以减小由于引入了外部包而导致最后代码打包时所增加的不必要的体积</p><p>随后将时间处理函数在 home 中使用，直接对数据进行预处理</p></div><div class="tip home"><p>第十一、点击频道显示不同数据(tab 栏切换)</p></div> 1.点击频道, 拿到频道 ID 2.由于频道是用 tab 标签页组件, 需要看文档如何拿到- 在 van-tabs 上修改 v-model 变量名(把 active 换成 channelId)- 在 van-tab 绑定 name 属性和值(值为频道 ID)- 点 van-tab 后,name 值会自动绑定给 v-model(vant 组件内部实现的)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 频道部分 --&gt;</span><br><span class="line">&lt;van-tabs v-model=&quot;channelId&quot; animated sticky offset-top=&quot;1.226667rem&quot;&gt;</span><br><span class="line">&lt;van-tab v-for=&quot;item in channelList&quot; :key=&quot;item.id&quot; :title=&quot;item.name&quot; :name=&quot;item.id&quot;&gt;</span><br><span class="line">&lt;article-list :cid=&quot;channelId&quot;&gt;&lt;/article-list&gt;</span><br><span class="line">&lt;/van-tab&gt;</span><br><span class="line">&lt;/van-tabs&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // ...省略其他(把active换成channelId)</span><br><span class="line">      channelId: 0, // 频道ID(默认0是推荐)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>3.ArticleList 内, props 定义变量 cid, 替换请求的频道（默认会切换 ArticleList, 组件创建后, 会重新进行网络请求）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  // ...核心代码</span><br><span class="line">  props: &#123;</span><br><span class="line">    cid: Number</span><br><span class="line">  &#125;,</span><br><span class="line">  async created () &#123;</span><br><span class="line">    const res = await articlesListAPI(&#123;</span><br><span class="line">      channelId: this.cid</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 回来的数据进行预处理, 把时间转成多久多久之前</span><br><span class="line">    res.data.data.results.forEach((obj) =&gt; &#123;</span><br><span class="line">      obj.pubdate = this.timeAgo(obj.pubdate)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    this.articleList = res.data.data.results</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>这里需要解释一下，为什么选择将频道 ID 传入 ArticleList ,而不是直接在 Home 组件内进行数据请求？</p><p>如果我们查阅 Vant 组件文档会发现，点击 tab 标签页可以触发 change 事件，在这里重新发送请求拿到数据，但是这会导致一个致命的问题，每次切换都会得到最新数据，造成不好的用户体验，即使使用组件缓存也没用（keep-alive 是阻止组件销毁，而你只要切换，就会触发事件发送请求拿数据），因为 Home 组件的 data 现在用的是同一个数组切换数据（多个 articleList 用的是同一个数组，会相互影响），所以我们将选择将频道 ID 传入 ArticleList ，文章列表数据，请求，数组，分别放入到各自内部，自己请求自己的，Home 只负责传入当前激活频道的 ID</p></div><div class="tip home"><p>第十二、文章列表——手指往上拉, 底部加载更多</p></div><p>思路：<br><strong>1.寻找 vant 组件, 叫 list 组件(用法查阅文档)</strong><br><strong>2.要判断是否滚动到底部</strong><br><strong>3.给后台传递页码 / 偏移量, 拿到新数据</strong><br><strong>4.和现有数据合并到一个数组里</strong></p><p>1.在 Home/ArticleList 中,使用 list 组件，同时定义组件所需的变量和方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-list</span><br><span class="line">      v-model=&quot;loading&quot;</span><br><span class="line">      :finished=&quot;finished&quot;</span><br><span class="line">      finished-text=&quot;没有更多了&quot;</span><br><span class="line">      @load=&quot;onLoad&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 文章列表 --&gt;</span><br><span class="line">      &lt;article-item</span><br><span class="line">        v-for=&quot;item in articleList&quot;</span><br><span class="line">        :key=&quot;item.art_id&quot;</span><br><span class="line">        :obj=&quot;item&quot;</span><br><span class="line">      &gt;&lt;/article-item&gt;</span><br><span class="line">&lt;/van-list&gt;</span><br><span class="line">--------------------------------------------</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      articleList: [], // 文章列表</span><br><span class="line">      loading: false, // 底部加载状态</span><br><span class="line">      finished: false // 数据是否全部加载完成</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 底部加载</span><br><span class="line">    onLoad () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.触底的距离有点远, 查文档, 设置 list 组件属性 offset=”50”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-list</span><br><span class="line">      v-model=&quot;loading&quot;</span><br><span class="line">      :finished=&quot;finished&quot;</span><br><span class="line">      finished-text=&quot;没有更多了&quot;</span><br><span class="line">      @load=&quot;onLoad&quot;</span><br><span class="line">      offset=&quot;50&quot;</span><br><span class="line">    &gt;</span><br></pre></td></tr></table></figure><p>3.网页刚上来不监测是否触底, 不执行 load 事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-list</span><br><span class="line">      v-model=&quot;loading&quot;</span><br><span class="line">      :finished=&quot;finished&quot;</span><br><span class="line">      finished-text=&quot;没有更多了&quot;</span><br><span class="line">      @load=&quot;onLoad&quot;</span><br><span class="line">      offset=&quot;50&quot;</span><br><span class="line">      :immediate-check=&quot;false&quot; (是否在初始化时立即执行滚动位置检查)</span><br><span class="line">    &gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>为什么我们需要 immediate-check=”false” 来使网页刚上来不监测是否触底, 不执行 load 事件？</p><p>因为网页刚打开，created 与 onload 同时执行 同时发送请求 导致 key 值相同</p><p>那么第二个问题就出现了，我们刚打开网页为什么会触发 onload 事件呢？</p><p>主要是因为组件挂载时，就会默认判定一次是否触底，在 vue 中，DOM 的更新是异步的，而第一次的数据也是网络请求回来的，标签先挂载了，数据回来才更新 dom，所以标签没有高度，所以触底</p></div><p>4.查看接口文档，分析如何拿到下一页数据（由于各个接口文档不同，博主以本项目文档举例），发现接口文档有个 timestamp, 说明下一页要用上一次请求成功的 pre_timestamp 的值，所以在 Home/ArticleList.vue, data 里定义变量 nextTime，在文章列表获取成功时, 接收 pre_timestamp 的值，调用接口传入 nextTIme，接收数据合并到现有数组中,最后判断是否全部加载完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // ...省略其他</span><br><span class="line">      nextTime: null // 用于加载更多(分页)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    async getArticleList () &#123;</span><br><span class="line">      // 负责拿文章列表数据</span><br><span class="line">      const res = await articlesListAPI(&#123;</span><br><span class="line">        channelId: this.cid,</span><br><span class="line">        timestamp: this.nextTime</span><br><span class="line">      &#125;)</span><br><span class="line">      console.log(res)</span><br><span class="line">      // 回来的数据进行预处理, 把时间转成多久多久之前</span><br><span class="line">      res.data.data.results.forEach((obj) =&gt; &#123;</span><br><span class="line">        obj.pubdate = this.timeAgo(obj.pubdate)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      // 如果无数据</span><br><span class="line">      if (res.data.data.results.length === 0) &#123;</span><br><span class="line">        this.finished = true // 告诉list组件直接底部显示没有更多数据</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.nextTime = res.data.data.pre_timestamp // 保存下一页数据的时间(做分页用)</span><br><span class="line">        this.articleList = [...this.articleList, ...res.data.data.results]</span><br><span class="line">        // 等待网络请求结果后</span><br><span class="line">        this.loading = false // 底部加载更多状态</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async created () &#123;</span><br><span class="line">    this.getArticleList()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>1.list 组件使用的注意点：</p><ul><li>list 组件触底后, 自动执行 load 事件和对应 onLoad 方法, 并把 loading 值改为 true</li><li>异步数据加载完毕, 合并数据, 把 loading 改为 false, 以后再让 list 自动执行 load 事件</li><li><p>异步数据加载完毕, 判断没有数据了, 把 finished 改为 true, 以后再也不出 load 事件</p><p>2.为何要把新数组和就数组拆开合并起来？ 为了让页面数据更多, 撑高 list 组件, 让用户继续滚动</p></li></ul></div><div class="tip home"><p>第十三、解决 bug：只要稍微滚动，再切换频道，created 与 onload 又会同时执行，就会导致 k 重复</p></div><div class="tip warning"><p>原因：immediate-check:仅仅是内部不要判断而已 ，而 onload 监听事件一直在执行，当上一个页面滚动条位置不为 0 时，切换到新的组件，这时候滚动条会向 0 的位置滚动，而同时异步的数据还没有渲染到 DOM 上，这时候 onload 再一次认为触底加载更多，于是乎触发事件。</p></div><p>解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 底部加载</span><br><span class="line">onLoad () &#123;</span><br><span class="line">    // 有第一页数据以后, onLoad再发请求</span><br><span class="line">    if (this.articleList.length &gt; 0) &#123;</span><br><span class="line">        this.getArticleList()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第十四、文章列表——手指往下拉, 顶部刷新</p></div><p>思路：<br><strong>1. 实现页面上下拉效果 - vant组件里的list组件</strong><br><strong>2. 刷新要把旧数组清空, 时间回到系统时间, 重新发起一次请求, 第一页数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// 用法：包裹在list外层</span><br><span class="line">&lt;van-pull-refresh v-model=&quot;isLoading&quot; @refresh=&quot;onRefresh&quot;&gt;</span><br><span class="line">      &lt;van-list</span><br><span class="line">        v-model=&quot;loading&quot;</span><br><span class="line">        :finished=&quot;finished&quot;</span><br><span class="line">        finished-text=&quot;没有更多了&quot;</span><br><span class="line">        @load=&quot;onLoad&quot;</span><br><span class="line">        offset=&quot;50&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;!-- 文章列表 --&gt;</span><br><span class="line">        &lt;article-item</span><br><span class="line">          v-for=&quot;item in articleList&quot;</span><br><span class="line">          :key=&quot;item.art_id&quot;</span><br><span class="line">          :obj=&quot;item&quot;</span><br><span class="line">        &gt;&lt;/article-item&gt;</span><br><span class="line">      &lt;/van-list&gt;</span><br><span class="line">    &lt;/van-pull-refresh&gt;</span><br><span class="line">---------------------------------------------</span><br><span class="line">export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            // ...省略了其他变量(不要删除啊)</span><br><span class="line">            isLoading: false // 顶部刷新状态</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        // 顶部刷新事件方法</span><br><span class="line">        onRefresh () &#123;</span><br><span class="line">            this.nextTime = null</span><br><span class="line">      this.articleList = []</span><br><span class="line">      this.getArticleList()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br><span class="line">同时一定要注意，在getArticleList()方法中加入这句话，数据异步刷新完毕, 要关闭isLoading状态</span><br><span class="line">this.isLoading = false // 顶部加载状态关闭</span><br></pre></td></tr></table></figure><div class="tip "><p>未完待续。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（三）&quot;&gt;&lt;a href=&quot;#移动端项目总结（三）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（三）&quot;&gt;&lt;/a&gt;移动端项目总结（三）&lt;/h1&gt;&lt;div class=&quot;tip warning faa-horizontal an</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端项目总结（二）</title>
    <link href="https://tailante.github.io/posts/12f1.html"/>
    <id>https://tailante.github.io/posts/12f1.html</id>
    <published>2022-09-30T07:05:26.000Z</published>
    <updated>2022-09-30T12:43:27.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（二）"><a href="#移动端项目总结（二）" class="headerlink" title="移动端项目总结（二）"></a>移动端项目总结（二）</h1><div class="tip warning faa-horizontal animated faa-fast"><p>写在前面，只要修改了配置文件，一定要重启服务器！！！！</p></div><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><div class="tip home"><p>第一、搭建登陆页面，添加路由规则，并在 App.vue 中添加路由挂载点</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Login from &#x27;@/views/Login&#x27;</span><br><span class="line">const routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        redirect: &#x27;/login&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &#x27;/login&#x27;,</span><br><span class="line">        component: Login</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><div class="tip warning"><p>一个注意点：可以先暂时将页面重定向至登录页，等后续首页功能开发后，重定向至首页</p></div><div class="tip home"><p>第二、根据 UI 设计图，在 Vant 组件库中找到对应组件（NavBar 导航，表单组件），铺设登陆页面</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 具体可查阅Vant组件库文档</span><br><span class="line">// 组件引入</span><br><span class="line">// 在main.js - 引入Vant组件 - NavBar导航 - 全局注册</span><br><span class="line">import &#123; NavBar &#125; from &#x27;vant&#x27;</span><br><span class="line">Vue.use(NavBar)</span><br><span class="line">------------------------------</span><br><span class="line">&lt;!-- 组件使用 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;van-nav-bar title=&quot;&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><details class="folding-tag" cyan open><summary> 知识点：修改组件库样式 </summary>              <div class='content'>              <p><span class='p red'>第一种方法</span>：利用开发者工具，找到对应标签的类名，进行样式的覆盖即可<br><span class='p red'>第二种方法</span>：在 Vant 组件库文档中，找到<strong><span class='p cyan'>定制主题</span></strong>选项，按需引入<br>步骤一：<br>在 babel.config.js 中配置按需引入样式源文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      &#x27;import&#x27;,</span><br><span class="line">      &#123;</span><br><span class="line">        libraryName: &#x27;vant&#x27;,</span><br><span class="line">        libraryDirectory: &#x27;es&#x27;,</span><br><span class="line">        // 指定样式路径</span><br><span class="line">        style: (name) =&gt; `$&#123;name&#125;/style/less`,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x27;vant&#x27;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意 babel6 不支持按需引入样式，请手动引入样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 引入全部样式</span><br><span class="line">import &#x27;vant/lib/index.less&#x27;;</span><br><span class="line"></span><br><span class="line">// 引入单个组件样式</span><br><span class="line">import &#x27;vant/lib/button/style/less&#x27;;</span><br></pre></td></tr></table></figure><p>步骤二：<br>使用 Less 提供的 modifyVars 即可对变量进行修改，如果 vue-cli 搭建的项目，可以在 vue.config.js 中进行配置<br>在 src 目录下新建的 styles 文件夹下建立一个 xxx.less 文件夹，用于修改想要变更的样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// vue.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    loaderOptions: &#123;</span><br><span class="line">      less: &#123;</span><br><span class="line">        // 若 less-loader 版本小于 6.0，请移除 lessOptions 这一级，直接配置选项。</span><br><span class="line">        lessOptions: &#123;</span><br><span class="line">          modifyVars: &#123;</span><br><span class="line">            // 第一种方式：直接覆盖变量（每次修改都要重启服务器）</span><br><span class="line">            &#x27;text-color&#x27;: &#x27;#111&#x27;,</span><br><span class="line">            &#x27;border-color&#x27;: &#x27;#eee&#x27;,</span><br><span class="line">            // 第二种方式：可以通过 less 文件覆盖（文件路径为绝对路径：不要手动写绝对路径, 用代码来动态获取, 请使用path.join()来进行路径的拼接）（不需要重启服务器）</span><br><span class="line">            hack: `true; @import &quot;$&#123;path.join(__dirname, &#x27;src/styles/cover.less&#x27;)&#125;&quot;;`</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">---------------------------------------</span><br><span class="line">// 在less 文件中设置</span><br><span class="line">@nav-bar-background-color:#007bff;</span><br><span class="line">@nav-bar-title-text-color:white;</span><br></pre></td></tr></table></figure>              </div>            </details><div class="tip warning faa-horizontal animated"><p>注意点一：博主认为，上述第一种方法适用于组件不复用的情况，因为在 style 标签具有 scoped 属性的情况下，只会作用于当前组件，而第二种方法适用于组件复用的情况，无论是直接覆盖变量，或者在 less 文件中覆盖，其修改的组件样式有可能被多处引用，从而导致牵一发而动全身。</p><p>注意点二：上述第一种方法有可能会出现不生效的情况，出现该情况的原因是：该选择器是组件内部的标签，并不是 template 模板中的根标签，在 style 标签具有 scoped 属性的情况下，scoped 尝试为其加入属性选择器来匹配当前页面，而只有在 template 模板中的根标签才能够被 scoped 选中，所以它选不中组件内部的标签。</p><p>解决办法：在选择器前面加上 /deep/ (/deep/ 会把属性选择器加到前面 利用后代选择器往里找)</p><p>/<em> /deep/ 就是把 data-v-hash 值选择器写到类名的前面 </em>/<br>/deep/ .van-nav-bar__title{<br>color: white;<br>}</p><p>注意点三：为什么不直接给组件设置 class 类名，因为组件属性虽然是 class, 但是也要看组件是否支持才可以（需要自己查阅文档）</p></div><div class="tip home"><p>第三、表单组件的正则校验</p></div><p>以下是使用例子，其中组件的属性与方法可以自行查阅文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 整个表单 --&gt;</span><br><span class="line">      &lt;van-form @submit=&quot;onSubmit&quot;&gt;</span><br><span class="line">        &lt;!-- name: 与 input name作用相同，数据传输标志 --&gt;</span><br><span class="line">        &lt;!-- rules 表单校验规则 --&gt;</span><br><span class="line">        &lt;!-- 支持正则校验 --&gt;</span><br><span class="line">        &lt;van-field v-model=&quot;user.mobile&quot;</span><br><span class="line">                   required</span><br><span class="line">                   name=&quot;mobile&quot;</span><br><span class="line">                   label=&quot;手机号&quot;</span><br><span class="line">                   placeholder=&quot;请输入手机号&quot;</span><br><span class="line">                   :rules=&quot;[&#123; required: true, message: &#x27;请输入11位手机号&#x27;, pattern: /^1[3-9]\d&#123;9&#125;$/ &#125;]&quot; /&gt;</span><br><span class="line">        &lt;van-field v-model=&quot;user.code&quot;</span><br><span class="line">                   required</span><br><span class="line">                   type=&quot;password&quot;</span><br><span class="line">                   name=&quot;code&quot;</span><br><span class="line">                   label=&quot;密码&quot;</span><br><span class="line">                   placeholder=&quot;请填写密码&quot;</span><br><span class="line">                   :rules=&quot;[&#123; required: true, message: &#x27;请填写6位密码&#x27;, pattern: /^\d&#123;6&#125;$/ &#125;]&quot; /&gt;</span><br><span class="line">        &lt;div style=&quot;margin: 16px;&quot;&gt;</span><br><span class="line">          &lt;!-- 信息按钮 type=&quot;info&quot; --&gt;</span><br><span class="line">          &lt;!-- native-type 原生 button 标签的 type 属性 --&gt;</span><br><span class="line">          &lt;van-button round</span><br><span class="line">                      block</span><br><span class="line">                      :loading=&quot;isLoading&quot;</span><br><span class="line">                      :disabled=&quot;isLoading&quot;</span><br><span class="line">                      type=&quot;info&quot;</span><br><span class="line">                      native-type=&quot;submit&quot;</span><br><span class="line">                      loading-text=&quot;登录中...&quot;&gt;提交&lt;/van-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/van-form&gt;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>一个注意点：属性后无值的属性，默认值为 true</p></div><div class="tip home"><p>第四、查看接口文档，调用登录接口</p></div><p>在中 api/index.js - 定义登录接口方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 用户 - 登录</span><br><span class="line">export const loginAPI = (&#123; mobile, code &#125;) =&gt; &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;/v1_0/authorizations&#x27;,</span><br><span class="line">    method: &#x27;POST&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      mobile,</span><br><span class="line">      code</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中引入调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; loginAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line"></span><br><span class="line">async onSubmit () &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        const res = await loginAPI(this.formLogin)</span><br><span class="line">        const &#123; token, refresh_token &#125; = res.data.data</span><br><span class="line">        console.log(token);</span><br><span class="line">        console.log(refresh_token);</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        console.error(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning"><p>一个注意点：axios 内部 自动把参数对象转换成 json 格式发后台，自动将 Content-Type：’application/json’ 配置好</p></div><div class="tip home"><p>第五、登录按钮优化，防止用户在网速慢的时候多次点击登录按钮</p></div><p>1.给按钮设置 loading 状态和 disabled 禁用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;van-button</span><br><span class="line">            round</span><br><span class="line">            block</span><br><span class="line">            type=&quot;info&quot;</span><br><span class="line">            native-type=&quot;submit&quot;</span><br><span class="line">            :loading=&quot;isLoding&quot;</span><br><span class="line">            :disabled=&quot;isLoding&quot;</span><br><span class="line">            loading-text=&quot;程序员拼命加载ing...&quot;&gt;登录&lt;/van-button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                // ...省略其他</span><br><span class="line">                isLoding: false // 加载状态</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.在网络请求开始的时候 isLoading = true,在网络请求结束的时候 isLoading = false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">async onSubmit () &#123;</span><br><span class="line">    this.isLoading = true</span><br><span class="line">    try &#123;</span><br><span class="line">        const res = await loginAPI(this.formLogin)</span><br><span class="line">        const &#123; token, refresh_token &#125; = res.data.data</span><br><span class="line">        // 可自行查阅 Vant 组件库 Notify 的用法</span><br><span class="line">        Notify(&#123; type: &#x27;success&#x27;, message: &#x27;登录成功&#x27; &#125;)</span><br><span class="line">        this.isLoading = false</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">      // 可自行查阅 Vant 组件库 Notify 的用法</span><br><span class="line">        Notify(&#123; type: &#x27;warning&#x27;, message: &#x27;手机号或密码错误&#x27; &#125;)</span><br><span class="line">        this.isLoading = false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip home"><p>第六、登录结果持久化，把 token 和 refresh_token 值保存到浏览器中</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 此文件 封装三个方法 专门用于操作token</span><br><span class="line">// 封装的目的： 代码分层方便清晰，修改方便</span><br><span class="line"></span><br><span class="line">const key = &#x27;xxx&#x27;</span><br><span class="line"></span><br><span class="line">// 设置</span><br><span class="line">export const setToken = token =&gt; localStorage.setItem(key, token)</span><br><span class="line"></span><br><span class="line">// 取出</span><br><span class="line">export const getToken = () =&gt; localStorage.getItem(key)</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">export const removeToken = () =&gt; localStorage.removeItem(key)</span><br></pre></td></tr></table></figure><div class="tip warning"><p>这里博主将本地存储方法封装为一个 js 文件，并将方法向外导出,哪一个组件需要使用，哪一个组件就可以引用，提高代码复用性的同时，增加了可维护性，如果后续需求改动，即可在该 js 文件中进行替换：如 localStorage 替换为 localSession</p></div><div class="tip "><p>未完待续。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（二）&quot;&gt;&lt;a href=&quot;#移动端项目总结（二）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（二）&quot;&gt;&lt;/a&gt;移动端项目总结（二）&lt;/h1&gt;&lt;div class=&quot;tip warning faa-horizontal an</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端项目总结（一）</title>
    <link href="https://tailante.github.io/posts/828b.html"/>
    <id>https://tailante.github.io/posts/828b.html</id>
    <published>2022-09-30T05:12:34.000Z</published>
    <updated>2022-10-01T01:14:09.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端项目总结（一）"><a href="#移动端项目总结（一）" class="headerlink" title="移动端项目总结（一）"></a>移动端项目总结（一）</h1><div class="tip warning faa-horizontal animated faa-fast"><p>写在前面，只要修改了配置文件，一定要重启服务器！！！！</p></div><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ul><li>极客园移动端是一个<span class='p red'>IT资讯移动web应用</span>，有着和<strong>今日头条</strong>类似的资讯浏览体验。</li><li><span class='p red'>主要功能</span>：资讯列表、标签页切换，文章举报，频道管理、文章详情、关注功能、点赞功能、评论功能、搜索功能、登录功能、个人中心、编辑资料、小思同学</li><li>极客园可打包成一款移动 APP，后期结合 H5+可在 Hbuilder 打包成一款体验较好的手机应用。</li><li>项目在线浏览地址: <a href="http://123.57.109.30:4005/dist/">http://123.57.109.30:4005/dist/</a></li></ul><h2 id="项目技术点介绍"><a href="#项目技术点介绍" class="headerlink" title="项目技术点介绍"></a>项目技术点介绍</h2><ul><li>vuejs 中<ul><li>$nextTick 使用 (vue 更新 DOM 是异步的)</li><li>组件通信 (父, 子传递)</li><li>keep-alive 组件缓存</li></ul></li><li>vuex</li><li>vue-router<ul><li>懒加载 (对打包以后首页加载速度有提高)</li></ul></li><li>axios<ul><li>请求和响应拦截器（自动发送 token）</li><li>封装请求工具方法 (代码分层)</li></ul></li><li>vant 移动端组件库</li><li>socket.io-client<ul><li>服务器主动推送数据</li></ul></li><li>amfe-flexible<ul><li>移动端 rem 适配</li></ul></li></ul><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><div class="tip home"><p>第一、清空项目默认配置内容</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules # 安装的包</span><br><span class="line">├── public# 静态资源托管目录</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">└── src# 源码</span><br><span class="line">    ├── api#请求接口封装模块</span><br><span class="line">    └── index.js #封装请求方法</span><br><span class="line">    ├── assets#资源目录</span><br><span class="line">    ├── components#组件目录</span><br><span class="line">    ├── router#路由模块</span><br><span class="line">    └── index.js #路由对象</span><br><span class="line">    ├── store#Vuex容器模块</span><br><span class="line">    └── index.js #store对象</span><br><span class="line">    ├── styles #样式目录</span><br><span class="line">    ├── utils  #工具模块目录</span><br><span class="line">    ├── views  #视图组件目录</span><br><span class="line">    ├── App.vue#根组件</span><br><span class="line">    └── main.js#入口文件</span><br><span class="line">├── .browserslistrc # 浏览器的约定</span><br><span class="line">├── .editorconfig #对本项目要用到编辑器的约定</span><br><span class="line">├── .eslintrc.js #eslint</span><br><span class="line">├── .gitignore # git的忽略设置</span><br><span class="line">├── babel.config.js#babel配置文件</span><br><span class="line">├── package-lock.json#npm相关文件</span><br><span class="line">├── package.json#npm相关文件</span><br><span class="line">└── README.md#项目说明文件</span><br></pre></td></tr></table></figure><div class="tip home"><p>第二、增加新的配置文件，将请求均封装至一个模块，统一管理网络请求，不参与逻辑代码，方便后期维护</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- /api/index.js 存储请求函数模块</span><br><span class="line">- /styles 样式文件模块</span><br><span class="line">- /utils 工具函数模块</span><br></pre></td></tr></table></figure><div class="tip home"><p>第三、按需引入 Vant 组件库</p></div><span class='p red'>babel-plugin-import</span> 是一款 babel 插件，它会在编译过程中将 import 的写法自动转换为按需引入的方式。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 安装插件</span><br><span class="line">npm i babel-plugin-import -D</span><br><span class="line"></span><br><span class="line">// 对于使用 babel7 的用户，可以在 babel.config.js 中配置</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    [&#x27;import&#x27;, &#123;</span><br><span class="line">      libraryName: &#x27;vant&#x27;,</span><br><span class="line">      libraryDirectory: &#x27;es&#x27;,</span><br><span class="line">      style: true</span><br><span class="line">    &#125;, &#x27;vant&#x27;]</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 接着你可以在代码中直接引入 Vant 组件</span><br><span class="line">// 插件会自动将代码转化为方式二中的按需引入形式</span><br><span class="line">import &#123; Button &#125; from &#x27;vant&#x27;;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated"><p>注意：博主推荐自动按需引入插件，一方面它避免了一次性导入所有组件，增加代码包体积，而另一方面也避免了每次手动引入组件总是还要再引入组件配套的 css 而造成代码冗余。</p></div><div class="tip home"><p>第四、下载 amfe-flexible、postcss 和postcss-pxtorem@5.1.1 进行移动端适配</p></div><p>根目录下创建 postcss.config.js 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">plugins: &#123;</span><br><span class="line">    &#x27;postcss-pxtorem&#x27;: &#123;</span><br><span class="line">      // 能够把所有元素的px单位转成Rem</span><br><span class="line">      // rootValue: 转换px的基准值。</span><br><span class="line">      // 编码时, 一个元素宽是75px，则换成rem之后就是2rem</span><br><span class="line">      rootValue: 37.5,</span><br><span class="line">      propList: [&#x27;*&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated"><p>一个注意点：postcss 只能转换 style 里面的px  行内的样式它无法进行转换 所以只能自己手动利用rem计算</p></div><div class="tip home"><p>第五、封装 axios 函数，统一配置、便于管理</p></div><p>创建 utils/request.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 基于 axios 封装的请求模块</span><br><span class="line">import theAxios from &#x27;axios&#x27;</span><br><span class="line">// 新建一个新的axios实例</span><br><span class="line">const axios = theAxios.create(&#123;</span><br><span class="line">  baseURL: &#x27;请求的URL基地址&#x27;,</span><br><span class="line">  timeout: 20000 // 20秒超时时间</span><br><span class="line">&#125;)</span><br><span class="line">// 采用对象解构赋值的形式进行参数传递，同时利用函数返回值将 axios 导出</span><br><span class="line">export default (&#123; url, method = &#x27;GET&#x27;, params = &#123;&#125;, data = &#123;&#125;, headers = &#123;&#125; &#125;) =&gt; &#123;</span><br><span class="line">  return axios(&#123;</span><br><span class="line">    url,</span><br><span class="line">    method,</span><br><span class="line">    params,</span><br><span class="line">    data,</span><br><span class="line">    headers</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated"><p>上述代码使用函数+return 导出 axios 的好处是：<br>以后换库, 只需要改这里, 逻辑页面不用动, 保证代码的复用性和独立性(高内聚低耦合)<br>return $.ajax({<br>&nbsp;&nbsp;url: url,<br>&nbsp;&nbsp;type: method,<br>&nbsp;&nbsp;data: data,<br>&nbsp;&nbsp;header: headers<br>})</p></div><div class="tip home"><p>第六、封装接口</p></div><p>api/index.js 定义各种接口方法<br>创建 utils/request.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import request from &#x27;@/utils/request&#x27;</span><br><span class="line">// 接口方法, 只负责调用一个接口, 返回一个Promise对象</span><br><span class="line">export const oneAPI = () =&gt; &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;url地址&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">export const twoAPI = () =&gt; &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#x27;url地址&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 组件导入调用</span><br><span class="line">import &#123; oneAPI &#125; from &#x27;@/api&#x27;</span><br><span class="line">async function myFn()&#123;</span><br><span class="line">    const res = await allChannelListAPI()</span><br><span class="line">    console.log(res) // 后台返回的数据</span><br><span class="line">&#125;</span><br><span class="line">// 同时，可使用try+catch来捕获promise失败的结果</span><br><span class="line">myFn();</span><br></pre></td></tr></table></figure><div class="tip "><p>未完待续。。。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端项目总结（一）&quot;&gt;&lt;a href=&quot;#移动端项目总结（一）&quot; class=&quot;headerlink&quot; title=&quot;移动端项目总结（一）&quot;&gt;&lt;/a&gt;移动端项目总结（一）&lt;/h1&gt;&lt;div class=&quot;tip warning faa-horizontal an</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于搭建本页面</title>
    <link href="https://tailante.github.io/posts/db1f.html"/>
    <id>https://tailante.github.io/posts/db1f.html</id>
    <published>2022-09-29T13:17:54.000Z</published>
    <updated>2022-09-29T15:12:06.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录博客的第一次"><a href="#记录博客的第一次" class="headerlink" title="记录博客的第一次"></a>记录博客的第一次</h1><h2 id="小白的懵懂"><a href="#小白的懵懂" class="headerlink" title="小白的懵懂"></a>小白的懵懂</h2><p>对于与一个编程小白来说，这次搭建博客真的是<span class='p red'>太不容易了</span>，以下便是这篇博客出生的艰辛历程。</p><p>首先，我去百度搜索了 <strong>hexo 的官方文档</strong>，来进行安装。在全局安装完以后，下一步就是创建，然而我呆头呆脑的在一个 <wavy>非空的文件夹</wavy> 里进行创建，果不其然报错了，就这个错误我记得还浪费掉许多时间去解决它 QAQ。。<span class='p cyan'>(后来才发现需要一个空文件夹)</span></p><p>在创建完一个 hexo 项目以后，就进行配置，什么主标题啊，副标题啊，关键字啊，都配置好了，又学习了一些常用命令，然后就发现不对劲，就感觉这个默认主题有点丑啊哈哈，<span class='p red'>就打算换一个主题</span>，由于我的疏忽，我并<span class='p red'>没有看到</span> hexo 官方文档中有主题这个选项，但是我也够聪明，直接去中国知名的哔哩哔哩大学去寻找如何为 hexo 更换主体，我翻到了一位<span class='p cyan'>UP 主的个人博客搭建教程，讲道理，视频真的是保姆级别</span> ，奈何我这马马虎虎，活生生把一天的工作量硬是拖到两天。</p><p>由于我本人是自学前端的嘛，所以hexo所依赖的Git与Node.js我平时用的挺多的，所以UP主有关这些<wavy>依赖的配置</wavy>我都是快进，直接跳到了配置主题部分，就是这个操作把我坑惨了。。</p><h2 id="自负的开始"><a href="#自负的开始" class="headerlink" title="自负的开始"></a>自负的开始</h2><p>首先我去 <strong>github</strong> 上将主题代码拉到本地，然后在自己 <strong>hexo 项目</strong>的 <strong>_config.yml</strong> 上将 <strong>theme</strong> 修改为 <strong>butterfly</strong> ，然后运行，然后就报错啦哈哈，因为项目文件夹的名字是 <strong>hexo-theme-butterfly</strong><span class='p red'>(讲道理从这开始已经就不对劲了)</span>,于是乎我又把 <strong>theme</strong> 修改为 <strong>hexo-theme-butterfly</strong>，再跑一变，这次没有报错，本地可以运行，于是我跟着视频就继续配置功能，配置到本地搜索功能的时候，我就发现<span class='p red'>搜索标签根本没有渲染到html上</span>，屏幕里根本就没有这个搜索按钮，但是我以为这可能是服务器还没解析好，于是继续跟着视频配置，直到后来<span class='p red'>连音乐播放器都没有显示</span>，我就感觉不对劲了，然而我以为靠我自己可以解决，但浪费了一下午还是没能解决，十分无奈找到UP主，请它出山帮忙，内时候我还没部署到<strong>github</strong>，然后就立刻建立仓库把这个项目部署上去了，好家伙部署以后更迷糊，连css样式都没了,UP主看完都想刀了我，问我有没有<span class='p red'>好好看视频</span>，后来我又从头到尾仔细看了一边，才发现我快进的地方都是关键的地方QAQ</p><h2 id="好好改造，重新做人"><a href="#好好改造，重新做人" class="headerlink" title="好好改造，重新做人"></a>好好改造，重新做人</h2><div class="tip warning"><p>第一，我从github上拉下来的代码，是测试版的，所以文件名才显示hexo-theme-butterfly，如果直接复制UP主博客里的代码下载以后的主题文件就是butterfly正式版。</p></div><div class="tip warning"><p>第二，在github建立仓库时，我的仓库名是瞎起的，正确的应该是自己的github用户名.github.io。</p></div><div class="tip warning"><p>第三，hexo有严格的格式要求，空格和缩进哪怕多一个少一个都可能报错。</p></div><div class="tip warning"><p>第四，要好好看文档，其实许多答案都在文档里，所有的东西只有自己配置一遍才懂——安知鱼。</p></div><h2 id="由衷的感谢"><a href="#由衷的感谢" class="headerlink" title="由衷的感谢"></a>由衷的感谢</h2><p>最后，十分感谢安知鱼UP主为我博客的建设提出的悉心指导，下面是大佬的博客，欢迎去那里取经<br><div class="tip error"><p><a href="https://anzhiy.cn/">https://anzhiy.cn/</a></p></div></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录博客的第一次&quot;&gt;&lt;a href=&quot;#记录博客的第一次&quot; class=&quot;headerlink&quot; title=&quot;记录博客的第一次&quot;&gt;&lt;/a&gt;记录博客的第一次&lt;/h1&gt;&lt;h2 id=&quot;小白的懵懂&quot;&gt;&lt;a href=&quot;#小白的懵懂&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tailante.github.io/posts/3eeb.html"/>
    <id>https://tailante.github.io/posts/3eeb.html</id>
    <published>2022-09-28T12:04:23.503Z</published>
    <updated>2022-09-29T03:32:08.265Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><div class="tip "><p>default</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
